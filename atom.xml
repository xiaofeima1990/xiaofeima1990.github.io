<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guoxuan Ma | Stay Hard Stay Foolish</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaofeima1990.github.io/"/>
  <updated>2018-09-19T00:09:09.195Z</updated>
  <id>http://xiaofeima1990.github.io/</id>
  
  <author>
    <name>Guoxuan Ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Data Science Visualization Resources</title>
    <link href="http://xiaofeima1990.github.io/2018/09/18/Data-Science-Visualization-Resources/"/>
    <id>http://xiaofeima1990.github.io/2018/09/18/Data-Science-Visualization-Resources/</id>
    <published>2018-09-19T00:06:09.000Z</published>
    <updated>2018-09-19T00:09:09.195Z</updated>
    
    <content type="html"><![CDATA[<p>This post is aimed at collecting the visualization Resources so as to assist illustrating the data features and research results</p><a id="more"></a><p><a href="https://python-graph-gallery.com/" target="_blank" rel="noopener">https://python-graph-gallery.com/</a></p><p><a href="http://networkx.github.io/" target="_blank" rel="noopener">http://networkx.github.io/</a></p><p><a href="https://plot.ly/python/lines-on-maps/" target="_blank" rel="noopener">https://plot.ly/python/lines-on-maps/</a></p><h3 id="Some-Specific-Fields"><a href="#Some-Specific-Fields" class="headerlink" title="Some Specific Fields"></a>Some Specific Fields</h3><h4 id="airline-route-map"><a href="#airline-route-map" class="headerlink" title="airline route map"></a>airline route map</h4><p><a href="http://tech.marksblogg.com/popular-airline-passenger-routes.html" target="_blank" rel="noopener">http://tech.marksblogg.com/popular-airline-passenger-routes.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post is aimed at collecting the visualization Resources so as to assist illustrating the data features and research results&lt;/p&gt;
    
    </summary>
    
      <category term="Data Science" scheme="http://xiaofeima1990.github.io/categories/Data-Science/"/>
    
    
      <category term="visualization" scheme="http://xiaofeima1990.github.io/tags/visualization/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Convolutional Neural Network</title>
    <link href="http://xiaofeima1990.github.io/2018/09/13/understand_CNN/"/>
    <id>http://xiaofeima1990.github.io/2018/09/13/understand_CNN/</id>
    <published>2018-09-13T13:46:50.000Z</published>
    <updated>2019-04-04T14:48:57.255Z</updated>
    
    <content type="html"><![CDATA[<p>Convolutional Neural Network 由两部分组成：convolution 和 neural network。想要深入了解CNN，我们首先需要了解什么事convolution，以及如何将convolution引入到neural network中。</p><a id="more"></a><h2 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h2><p>在数学上，convolution 定义为：</p><blockquote><p>In mathematics (and, in particular, functional analysis) convolution is a mathematical operation on two functions (f and g) to produce a third function that expresses how the shape of one is modified by the other</p></blockquote><p>卷积可以看作是两个函数 $f$ 和 $g$ 生成第三个函数的一种数学算子，表征函数（不动的）$f$ 与经过反转或者平移 $g$ 的乘积所生成的新函数围成的曲边梯形面积。上述文字的确很难理解，我们首先观察convolution的数学表达式：</p><script type="math/tex; mode=display">\int^{\infty}_{-\infty} f(\tau)g(x-\tau)d\tau = (f*g)(x) = h(x)</script><p>简单来说，我们固定一个“不动”的函数$f$ , 我们想要知道如果另一个函数$g$“路过”这个$f$函数，这两个相互作用会发生什么奇怪的行为。真实的例子比如我们想从一段音频中，提取出一些对我们有用的音频信息。</p><p><img src="\pic\pig\Convolution_of_box_signal_with_itself2.gif" alt="onvolution_of_box_signal_with_itself"> </p><p>简单来说，就是让 $g$ “走过整”个 $f$ (用某种滤波函数遍历音频资料)，看两者交叠地方的面积变化情况，不同的$g$ 作用在 $f$ 上会有不同的结果。某种程度上来说，我用不同的滤波函数 $g$ 可以从 $f$ 中提取不同方面的信息或特点。比如，上图所展示的就是用正方形 $g$ 来遍历 $f$，得到的是一个新的三角形卷积函数。如果我们用三角形，或者半圆形，那么我们得到的自然是不同的卷积函数。</p><p>接下来的问题可能是为何新的卷积函数是三角形的呢？而且为何是从”-1”这个点开始的呢？为回答上述问题，我们首先 从卷积的定义出发，卷积相当于两个函数相乘得到一个新的函数，但不是简单的 $f(3)<em>g(2)$, 而是给定某个点，比如 $5$ , 看所有能够到达5的新函数($f(\tau)g(5-\tau)$)乘积加总，从而构成新函数在$5$的上面的值，即：$(f</em>g)(5)=\int^{\infty}_{-\infty} f(\tau)g(5-\tau)d\tau $。如果上述解释还是过于抽象，那么下面扔球的小例子可能更有助于理解：</p><p>当我们扔一个球到地上的时候，球到地面的运动距离就是一个简单一维的运动情况。但假如我们固定让小球要运动$c$ 距离，但允许我们扔两次，并且第二次从第一次触碰地方开始扔。我们标记第一次运动落点的密度函数为$f(a)$，第二次落点的密度函数为$g(b)$。</p><p><img src="\pic\pig\ProbConv-fagb.png" alt="robConv-fag"></p><p>那么其两次加起来移动$c$ 距离可以有多种可能。因为如果固定$c=3$,那么 a 和 b 的选择可以是 $a=2,b=1; a=1,b=2; a=0,b=3; … $ </p><p><img src="\pic\pig\ProbConv-OnePath.png" alt="robConv-OnePat"></p><p>因此为了找到所有的可能，我们需要把其全部加总。所以，两次合起来小球移动距离$c$的密度函数应当表达为：</p><script type="math/tex; mode=display">\sum_{a+b=c} f(a)\cdot g(b) \ \ \text{or} \ \ \int^{\infty}_{-\infty} f(\tau)g(c-\tau)d\tau</script><p><img src="\pic\pig\ProbConv-SumPaths.png" alt="robConv-SumPath"></p><p>上述讨论的是一维的情况，高维的情况遵循同样的原理，比如一个球落地时我们不仅考虑在一条直线上的运动，进一步，我们考虑在一个平面上的落点：</p><p><img src="\pic\pig\ProbConv-TwoDim.png" alt="robConv-TwoDi"></p><p>而计算convolution还是跟之前一样：</p><script type="math/tex; mode=display">(f*g) (c) = \sum_{a+b=c} f(a)\cdot g(b)</script><p>些许不同的地方在于现在 $a$ 和 $b$ 是向量形式， 即：</p><script type="math/tex; mode=display">(f*g)(c_1,c_2) = \sum_{a_1, a_2} f(a_1,a_2) \cdot g(c_1 - a_1, c_2 - a_2)</script><p>当我们加总后，从落点$a$出发，到最终$c$位置的密度函数的convolution，可以表示为：</p><p><img src="\pic\pig\ProbConv-Intermediate.png" alt="robConv-Intermediat"></p><p>那么不同位置的新函数可以表示为（第一个为较为稠密的新convolution，第二个为较为稀疏的新convolution）：</p><p><img src="\pic\pig\ProbConv-Intermediate-Align.png" alt="robConv-Intermediate-Alig"></p><p><img src="\pic\pig\ProbConv-Intermediate-Sep.png" alt="robConv-Intermediate-Se"></p><h3 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h3><p>convolution 一个主要应用领域就是图像识别。因为图像可以被简单看作二维函数(矩阵)（当然还有不同的色彩），而进行图像的各种变换就是利用可中过滤(filter or kernel)函数来对图像进行各种convolution处理。</p><p><img src="\pic\pig\RiverTrain-ImageConvDiagram.png" alt="iverTrain-ImageConvDiagra"></p><p>例如，对图像进行虚化，我们可以通过平均kernel矩阵上面的像素(pixel)来做到，通过kernel 作用到原图像上，进而生成新图像，我们得到：</p><p><img src="\pic\pig\RiverTrain-ImageConvDiagram.png" alt="iverTrain-ImageConvDiagra"></p><p> 我们同样可以侦测图像的形状边缘，通过设定-1 和 1 在两个相邻像素(pixel)上并且其他位置设定为0，这构成来用来侦测边缘的过滤矩阵。</p><p><img src="\pic\pig\Gimp-Edge.png" alt="imp-Edg"></p><h2 id="Convolutional-Neural-Network"><a href="#Convolutional-Neural-Network" class="headerlink" title="Convolutional Neural Network"></a>Convolutional Neural Network</h2><p>接下来的问题就是convolution如何跟convolutional neural network 联系上的？ </p><p>现在考虑一个一维的convolutional layer, 输入$x_n$，输出$y_n$ ，$A$ 代表着neurons，而neuron在neural network可以被表示为：</p><script type="math/tex; mode=display">\sigma(\omega_0 x_0 + \omega_1 x_1 + \omega_2 x_2 + ... + b)</script><p>权重系数$\omega_0, \omega_1, …, $ 描述了每个neuron如何与输入数据进行联系的。值得注意的是权重系数$\omega$是神经网络的核心，控制着每一层神经网络的表现。注意，当我们说每一层中若干个neurons一样，相当于这些neurons 的权重系数（矩阵）都相同。</p><p>用图像表示一般情况下的neural network 则是：</p><p><img src="\pic\pig\Conv-9-Conv2-XY.png" alt="onv-9-Conv2-X"></p><p>但在convolutional neural network 中， 有许多相同的neuron作用于不同的输入数据上，因此，许多相同的权重矩阵重复出现在不同的neuron上。</p><p><img src="\pic\pig\Conv-9-Conv2-XY-W.png" alt="onv-9-Conv2-XY-"></p><p>简单来说，正常的neural network中，权重矩阵用不同的权重系数连接不同的输入数据和输出位置。</p><script type="math/tex; mode=display">W = \left[\begin{array}{ccccc} W_{0,0} & W_{0,1} & W_{0,2} & W_{0,3} & ...\\W_{1,0} & W_{1,1} & W_{1,2} & W_{1,3} & ...\\W_{2,0} & W_{2,1} & W_{2,2} & W_{2,3} & ...\\W_{3,0} & W_{3,1} & W_{3,2} & W_{3,3} & ...\\...     &   ...   &   ...   &  ...    & ...\\\end{array}\right]</script><p>但在convolutional layer 中，同样的权重重复出现在不同的位置，而且每一个neuron不是连接所有的输入数据，因此，其权重矩阵表现为：</p><script type="math/tex; mode=display">W = \left[\begin{array}{ccccc} w_0 & w_1 &  0  &  0  & ...\\ 0  & w_0 & w_1 &  0  & ...\\ 0  &  0  & w_0 & w_1 & ...\\ 0  &  0  &  0  & w_0 & ...\\... & ... & ... & ... & ...\\\end{array}\right]</script><p>当输入数据（向量）与该矩阵相乘时，就相当于被某个函数在进行convolution操作一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Convolutional Neural Network 由两部分组成：convolution 和 neural network。想要深入了解CNN，我们首先需要了解什么事convolution，以及如何将convolution引入到neural network中。&lt;/p&gt;
    
    </summary>
    
      <category term="Data Science" scheme="http://xiaofeima1990.github.io/categories/Data-Science/"/>
    
    
      <category term="CNN" scheme="http://xiaofeima1990.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>Practical Problems in Applied Econometrics</title>
    <link href="http://xiaofeima1990.github.io/2018/09/12/Problems%20in%20Ecocomectrics/"/>
    <id>http://xiaofeima1990.github.io/2018/09/12/Problems in Ecocomectrics/</id>
    <published>2018-09-12T13:46:50.000Z</published>
    <updated>2018-09-15T02:39:24.060Z</updated>
    
    <content type="html"><![CDATA[<p>This post summarize some practical problems in applied econmetrics</p><ul><li>Incidental parameter problem</li></ul><a id="more"></a><h3 id="Incidental-parameter-problem"><a href="#Incidental-parameter-problem" class="headerlink" title="Incidental parameter problem"></a>Incidental parameter problem</h3><p> the fixed effects estimators of nonlinear panel data models can be severely biased because of the “well-known” incidental parameter problem.<br> In FE models of the type</p><script type="math/tex; mode=display">y_{it}=\alpha_i+\beta X_{it}+u_{it}</script><p>$\alpha$ is the incidental parameter, because theoretically speaking, it is of a secondary importance. Usually, $\beta$ is the important parameter, statistically speaking. But in essence, $\alpha$ is important because it provides useful information on the individual intercept.</p><p>Most of the panels are short, i.e., T is relatively small. In order to illustrate the incidental parameter problem I will disregard $\beta$ for simplicity. So the model is now:</p><script type="math/tex; mode=display">y_{it}=\alpha_i+u_{it},\ \ u_{it} \sim N(0,\sigma^2)</script><p>So by using deviations from means method we have $\hat{u}_{it}=y_{it}−\bar{y}_i$ and that’s how we can get $\alpha$. Lets have a look on the estimate for $\sigma^2$:</p><script type="math/tex; mode=display">\sigma^2=\frac{1}{NT} \sum_{i} \sum{t}(y_{it}-\bar{y}_i)  \sum_i \sum_t (y_{it}−\bar{y}_i)^2=\sigma^2 \frac{\xi^2_N(T−1)}{NT}=\sigma^2 \frac{N(T−1)}{NT}= \sigma^2 \frac{T−1}{T}</script><p>You can see that if $T$ is “large” then the term \frac{T−1}{T} disappears, BUT, if $T$ is small (which is the case in most of the panels) then the estimate of σ2 will be inconsistent. This makes the FE estimator to be inconsistent.</p><p>The reason \beta is usually consistent because usually $N$ is indeed sufficiently large and therefore has the desired asymptotic requirements.</p><p>Note that in spatial panels for example, the situation is opposite - $T$ is usually considered large enough, but $N$ is fixed. So the asymptotics comes from $T$. Therefore in spatial panels you need a large $T$!</p><h2 id="Selection-Bias"><a href="#Selection-Bias" class="headerlink" title="Selection Bias"></a>Selection Bias</h2><p>Selection bias is the bias introduced by the selection of individuals, groups or data for analysis in such a way that proper randomization is not achieved, thereby ensuring that the sample obtained is not representative of the population intended to be analyzed.[1] It is sometimes referred to as the selection effect. The phrase “selection bias” most often refers to the distortion of a statistical analysis, resulting from the method of collecting samples. If the selection bias is not taken into account, then some conclusions of the study may not be accurate.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post summarize some practical problems in applied econmetrics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incidental parameter problem&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Economics" scheme="http://xiaofeima1990.github.io/categories/Economics/"/>
    
    
      <category term="econometrics" scheme="http://xiaofeima1990.github.io/tags/econometrics/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Decorator in Python</title>
    <link href="http://xiaofeima1990.github.io/2018/08/16/understanding-decorator/"/>
    <id>http://xiaofeima1990.github.io/2018/08/16/understanding-decorator/</id>
    <published>2018-08-16T11:59:14.000Z</published>
    <updated>2019-04-04T14:49:37.479Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Decorator-in-Python"><a href="#Decorator-in-Python" class="headerlink" title="Decorator in Python"></a>Decorator in Python</h1><p>Many times when you read the code, you will find some annoying synax like <code>@somefunction</code>. What does that mean? That is the decorator in python. The synax for the decorator has the following definition and function: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line">var = some_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># which would be the same as</span></span><br><span class="line"></span><br><span class="line">var = decorator(some_value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># and can be chained as well:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="meta">@decorator_2</span></span><br><span class="line">var = some_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># which would be</span></span><br><span class="line"></span><br><span class="line">var = decorator(decorator_2(some_value))</span><br></pre></td></tr></table></figure><p>the main advantage is that you can use the decorator as a standardized way to create variables that have the same behaviour, instead<br>of havng to do that using methods. I think that a lot can be gained by specifying a decorator that can decorate variables or properties.</p><p><strong>BUT</strong>, just look at the synax again, the decorator actually help developer to initialize the variable before the invoke of the function. for example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">list_function=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_function_lists</span><span class="params">(f)</span>:</span></span><br><span class="line">list_function.append(f)</span><br><span class="line">print(<span class="string">"this is decorator"</span>)</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_function_lists</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"this is function a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_function_lists</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"this is function b"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">The above code has no initilization or instance to call the function. But can you guess the result when we codpy the code into the python complier? </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">this <span class="keyword">is</span> decorator</span><br><span class="line">this <span class="keyword">is</span> decorator</span><br></pre></td></tr></table></figure><p>if we check the <code>list_function</code>, we will find </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list_function</span><br><span class="line">&gt;&gt;&gt;[&lt;function __main__.a&gt;, &lt;function __main__.b&gt;]</span><br></pre></td></tr></table></figure><p>In order to have a deeper understanding of the decorator, remember that functions are objects in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> word.capitalize()+<span class="string">"!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> shout()</span><br><span class="line"><span class="comment"># outputs : 'Yes!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># As an object, you can assign the function to a variable like any</span></span><br><span class="line"><span class="comment"># other object </span></span><br><span class="line"></span><br><span class="line">scream = shout</span><br><span class="line"></span><br><span class="line"><span class="comment"># Notice we don't use parentheses: we are not calling the function, we are</span></span><br><span class="line"><span class="comment"># putting the function "shout" into the variable "scream". </span></span><br><span class="line"><span class="comment"># It means you can then call "shout" from "scream":</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> scream()</span><br><span class="line"><span class="comment"># outputs : 'Yes!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># More than that, it means you can remove the old name 'shout', and</span></span><br><span class="line"><span class="comment"># the function will still be accessible from 'scream'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> shout</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> shout()</span><br><span class="line"><span class="keyword">except</span> NameError, e:</span><br><span class="line">    <span class="keyword">print</span> e</span><br><span class="line">    <span class="comment">#outputs: "name 'shout' is not defined"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> scream()</span><br><span class="line"><span class="comment"># outputs: 'Yes!'</span></span><br></pre></td></tr></table></figure><p>Another interesting property of Python functions is they can be defined… inside another function!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># You can define a function on the fly in "talk" ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whisper</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> word.lower()+<span class="string">"..."</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... and use it right away!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> whisper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># You call "talk", that defines "whisper" EVERY TIME you call it, then</span></span><br><span class="line"><span class="comment"># "whisper" is called in "talk". </span></span><br><span class="line">talk()</span><br><span class="line"><span class="comment"># outputs: </span></span><br><span class="line"><span class="comment"># "yes..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># But "whisper" DOES NOT EXIST outside "talk":</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> whisper()</span><br><span class="line"><span class="keyword">except</span> NameError, e:</span><br><span class="line">    <span class="keyword">print</span> e</span><br><span class="line">    <span class="comment">#outputs : "name 'whisper' is not defined"*</span></span><br></pre></td></tr></table></figure><p>Usually, people use decorator to define a insider functions for invoke. The following is the example without decorator<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># A decorator is a function that expects ANOTHER function as parameter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_shiny_new_decorator</span><span class="params">(a_function_to_decorate)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Inside, the decorator defines a function on the fly: the wrapper.</span></span><br><span class="line">    <span class="comment"># This function is going to be wrapped around the original function</span></span><br><span class="line">    <span class="comment"># so it can execute code before and after it.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">the_wrapper_around_the_original_function</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Put here the code you want to be executed BEFORE the original </span></span><br><span class="line">        <span class="comment"># function is called</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Before the function runs"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Call the function here (using parentheses)</span></span><br><span class="line">        a_function_to_decorate()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Put here the code you want to be executed AFTER the original </span></span><br><span class="line">        <span class="comment"># function is called</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"After the function runs"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># At this point, "a_function_to_decorate" HAS NEVER BEEN EXECUTED.</span></span><br><span class="line">    <span class="comment"># We return the wrapper function we have just created.</span></span><br><span class="line">    <span class="comment"># The wrapper contains the function and the code to execute before</span></span><br><span class="line">    <span class="comment"># and after. It's ready to use!</span></span><br><span class="line">    <span class="keyword">return</span> the_wrapper_around_the_original_function</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now imagine you create a function you don't want to ever touch again.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_stand_alone_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I am a stand alone function, don't you dare modify me"</span></span><br><span class="line"></span><br><span class="line">a_stand_alone_function() </span><br><span class="line"><span class="comment">#outputs: I am a stand alone function, don't you dare modify me</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Well, you can decorate it to extend its behavior.</span></span><br><span class="line"><span class="comment"># Just pass it to the decorator, it will wrap it dynamically in </span></span><br><span class="line"><span class="comment"># any code you want and return you a new function ready to be used:</span></span><br><span class="line"></span><br><span class="line">a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)</span><br><span class="line">a_stand_alone_function_decorated()</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#Before the function runs</span></span><br><span class="line"><span class="comment">#I am a stand alone function, don't you dare modify me</span></span><br><span class="line"><span class="comment">#After the function runs</span></span><br></pre></td></tr></table></figure></p><p>When we start using decorator, the world becomes simple:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@my_shiny_new_decorator</span><br><span class="line">def another_stand_alone_function():</span><br><span class="line">    print &quot;Leave me alone&quot;</span><br><span class="line"></span><br><span class="line">another_stand_alone_function()  </span><br><span class="line">#outputs:  </span><br><span class="line">#Before the function runs</span><br><span class="line">#Leave me alone</span><br><span class="line">#After the function runs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Decorator-in-Python&quot;&gt;&lt;a href=&quot;#Decorator-in-Python&quot; class=&quot;headerlink&quot; title=&quot;Decorator in Python&quot;&gt;&lt;/a&gt;Decorator i
      
    
    </summary>
    
      <category term="develop" scheme="http://xiaofeima1990.github.io/categories/develop/"/>
    
    
      <category term="python" scheme="http://xiaofeima1990.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>How to Use Pandoc</title>
    <link href="http://xiaofeima1990.github.io/2018/06/01/pandoc_start/"/>
    <id>http://xiaofeima1990.github.io/2018/06/01/pandoc_start/</id>
    <published>2018-06-01T17:39:56.000Z</published>
    <updated>2018-06-01T12:21:27.717Z</updated>
    
    <content type="html"><![CDATA[<p>About <a href="http://pandoc.org/installing.html" target="_blank" rel="noopener">pandoc</a></p><p>If you need to convert files from one markup format into another, pandoc is your swiss-army knife. Pandoc can convert documents in markdown, reStructuredText, textile, HTML, DocBook, LaTeX, MediaWiki markup, TWiki markup, OPML, Emacs Org-Mode, Txt2Tags, Microsoft Word docx, LibreOffice ODT, EPUB, or Haddock markup to</p><ul><li>HTML formats: XHTML, HTML5, and HTML slide shows using Slidy, reveal.js, Slideous, S5, or DZSlides.</li><li>Word processor formats: Microsoft Word docx, OpenOffice/LibreOffice ODT, OpenDocument XML</li><li>Ebooks: EPUB version 2 or 3, FictionBook2</li><li>Documentation formats: DocBook, TEI Simple, GNU TexInfo, Groff man pages, Haddock markup</li><li>Page layout formats: InDesign ICML</li><li>Outline formats: OPML</li><li>TeX formats: LaTeX, ConTeXt, LaTeX Beamer slides</li><li>PDF via LaTeX</li><li>Lightweight markup formats: Markdown (including CommonMark), reStructuredText, AsciiDoc, MediaWiki markup, DokuWiki markup, Emacs Org-Mode, Textile</li><li>Custom formats: custom writers can be written in lua.</li></ul><h2 id="installing"><a href="#installing" class="headerlink" title="installing"></a>installing</h2><p>you can install pandoc from its <a href="https://github.com/jgm/pandoc/releases/tag/1.17.0.2" target="_blank" rel="noopener">website</a></p><h2 id="geting-started"><a href="#geting-started" class="headerlink" title="geting started"></a>geting started</h2><p>for example, if you want to convert latex file (demo.tex )into md, then you can : </p><ol><li>change path into the file directory </li><li>use the command <code>pandoc demo.tex -f latex -t markdown -s -o demo.md</code>  convert latex to markdown</li><li>use the commond <code>pandoc demo.md -f markdown -t html -s -o demo.html</code>  convert markdown to html</li></ol><p>pretty simple right ?! </p><p>for more information, you can see from <a href="http://pandoc.org" target="_blank" rel="noopener">http://pandoc.org</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;About &lt;a href=&quot;http://pandoc.org/installing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pandoc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you need to convert files from one 
      
    
    </summary>
    
      <category term="Skills" scheme="http://xiaofeima1990.github.io/categories/Skills/"/>
    
    
      <category term="guide" scheme="http://xiaofeima1990.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>US Airline Flight Route Map</title>
    <link href="http://xiaofeima1990.github.io/2018/05/19/airline%20flight%20route%20map/"/>
    <id>http://xiaofeima1990.github.io/2018/05/19/airline flight route map/</id>
    <published>2018-05-20T01:23:25.000Z</published>
    <updated>2018-08-29T02:53:48.148Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, I try to summarize the the construction of US Airline Flight Map. The data source comes from <a href="https://www.transtats.bts.gov/Tables.asp?DB_ID=125" target="_blank" rel="noopener">Bureau of Transportation Statistics</a>. The first thing is to obtain the local airport information. For example, the GIS location, the carrier’s market share and market construction, and the distance from the near HUB. Secondly, I want to draw the flight route map. </p><a id="more"></a><h2 id="Airport-Information"><a href="#Airport-Information" class="headerlink" title="Airport Information"></a>Airport Information</h2><p>To get the local airport information, we can extract from the data and use gis information to calculate distance. The whole process can be divided by three steps. </p><ol><li>extract all the flight routes flying into the particular airport</li><li>use airport address to get GIS information</li><li>organize the information and output the local airport information.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> geocoder</span><br><span class="line"><span class="keyword">from</span> geopy <span class="keyword">import</span> distance</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">DICT_HUB=&#123;</span><br><span class="line">        <span class="string">"PA"</span>:<span class="string">'PHL'</span>,</span><br><span class="line">        <span class="string">"MI"</span>:<span class="string">'DTW'</span>,</span><br><span class="line">        <span class="string">"WV"</span>:<span class="string">"DCA"</span>,</span><br><span class="line">        <span class="string">"IL"</span>:<span class="string">"ORD"</span>,</span><br><span class="line">        <span class="comment"># and we can also add other hubs in different States</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">path=<span class="string">"your path directory"</span></span><br><span class="line">STATE=input(<span class="string">"input the state you want "</span>)</span><br><span class="line">Year= input(<span class="string">"input the year and quarter you want"</span>)</span><br><span class="line"><span class="comment"># load the data</span></span><br><span class="line">market_pd=pd.read_csv(path+STATE+Year+<span class="string">".csv"</span>) <span class="comment"># like this </span></span><br><span class="line"></span><br><span class="line">airport_pd=pd.read_csv(path+<span class="string">"airport_statistics.csv"</span>) </span><br><span class="line">col=list(market_pd.columns)</span><br><span class="line">market_pd.drop(col[<span class="number">-1</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>) <span class="comment">#drop a columns </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## first let me focus on only one routes from other state to PA</span></span><br><span class="line">market_pd_1=market_pd.loc[market_pd[<span class="string">'DEST_STATE_ABR'</span>]==STATE,]</span><br><span class="line">STATE_airports=list(market_pd_1[<span class="string">'DEST'</span>].unique())</span><br><span class="line">year=list(market_pd_1[<span class="string">'YEAR'</span>].unique())[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## gropuby airports from origin to dest </span></span><br><span class="line">group_airport=market_pd_1.groupby([<span class="string">'ORIGIN'</span>,<span class="string">'DEST'</span>])</span><br><span class="line">routes_list=group_airport.groups.keys()</span><br><span class="line">col_info=[<span class="string">'code'</span>,<span class="string">'year'</span>,<span class="string">'name'</span>,<span class="string">'address'</span>,<span class="string">'lat'</span>,<span class="string">'lgt'</span>,<span class="string">'dis_to_hub0'</span>,<span class="string">'carriers'</span>,<span class="string">'major_airline'</span>,<span class="string">'ratio_1'</span>]</span><br><span class="line">State_airport_info=pd.DataFrame(index=STATE_airports,columns=col_info)</span><br><span class="line"></span><br><span class="line"><span class="comment">## HUB airport in State</span></span><br><span class="line">add_HUB=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==DICT_HUB[STATE],<span class="string">'add'</span>].values[<span class="number">0</span>]</span><br><span class="line">geo_info_HUB= geocoder.google(add_HUB)</span><br><span class="line"></span><br><span class="line"><span class="comment">## return GIS information and calculate the distance </span></span><br><span class="line"><span class="keyword">for</span> nn_airport <span class="keyword">in</span> STATE_airports:</span><br><span class="line">    </span><br><span class="line">    new_gb = pd.concat( [ group_airport.get_group(name) <span class="keyword">for</span> name,group <span class="keyword">in</span> group_airport <span class="keyword">if</span> name[<span class="number">1</span>]==nn_airport ] )</span><br><span class="line">    new_gb.drop_duplicates([<span class="string">'ORIGIN'</span>],keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## get carrier information from different routes</span></span><br><span class="line">    new_gb[<span class="string">'last_carrier'</span>]=new_gb[<span class="string">'TK_CARRIER_GROUP'</span>].str.strip(<span class="string">"-|:"</span>)</span><br><span class="line">    new_gb[<span class="string">'last_carrier'</span>]=new_gb[<span class="string">'last_carrier'</span>].str[<span class="number">-2</span>:]</span><br><span class="line">    new_gb = new_gb[new_gb[<span class="string">'last_carrier'</span>] != <span class="string">''</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## get market ratio</span></span><br><span class="line">    carr_pd=new_gb.groupby(<span class="string">"last_carrier"</span>)</span><br><span class="line">    carr_pd=pd.DataFrame(carr_pd[<span class="string">'ITIN_ID'</span>].count())</span><br><span class="line">    carr_pd[<span class="string">'ratio'</span>]=carr_pd[<span class="string">'ITIN_ID'</span>]/sum(carr_pd[<span class="string">'ITIN_ID'</span>])</span><br><span class="line">    carr_pd.sort_values(by=<span class="string">'ratio'</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    carriers=list(zip(carr_pd.index, carr_pd.ratio))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## rest is the geographic infomation and population </span></span><br><span class="line">    <span class="comment">## use goocode to calculate the distance </span></span><br><span class="line">    add_temp=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==nn_airport,<span class="string">'add'</span>].values[<span class="number">0</span>]</span><br><span class="line">    geo_info_temp= geocoder.google(add_temp)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> geo_info_temp.ok:</span><br><span class="line">        </span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        geo_info_temp= geocoder.google(nn_airport)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    airport_name=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==nn_airport,<span class="string">'name'</span>].values[<span class="number">0</span>]</span><br><span class="line">    dis_hub=distance.distance(geo_info_temp.latlng, geo_info_HUB.latlng).miles</span><br><span class="line">    </span><br><span class="line">    s=pd.Series([nn_airport,year,airport_name,add_temp,geo_info_temp.lat,geo_info_temp.lng,dis_hub,carriers,carriers[<span class="number">-1</span>][<span class="number">0</span>],carriers[<span class="number">-1</span>][<span class="number">1</span>]],index=col_info)</span><br><span class="line">    </span><br><span class="line">    State_airport_info.loc[nn_airport,]=s</span><br><span class="line"></span><br><span class="line">State_airport_info.reset_index(level=<span class="number">0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## output to airport information</span></span><br><span class="line">State_airport_info.to_csv(path+STATE+<span class="string">"_airport_info.csv"</span>,index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h2 id="Draw-the-airport-location-map"><a href="#Draw-the-airport-location-map" class="headerlink" title="Draw the airport location map"></a>Draw the airport location map</h2><p>Once we get airport infromation in different State, we can construct GIS information table and draw the map. (Currently, I just use all <code>airport_info.csv</code> to construct <code>airport_gis.csv</code> manually) The <code>airport_gis.csv</code> includes the airport information, i.e. gis information, major carriers and market ratio for the major carriers. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">path =<span class="string">"your data path "</span></span><br><span class="line">data_airport_gis=pd.read_csv(path+<span class="string">"airport_gis.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the focus location of the map</span></span><br><span class="line">map_1 = folium.Map(location=[<span class="number">40.8499873</span>,<span class="number">-77.8486889</span>], tiles=<span class="string">"Mapbox Bright"</span>, zoom_start=<span class="number">4</span>) <span class="comment"># focus location can be anywhere</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add gis info into the folium </span></span><br><span class="line"><span class="comment">## no major </span></span><br><span class="line">temp_pd=data_airport_gis[data_airport_gis[<span class="string">'Major'</span>]==<span class="number">0</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(temp_pd)):</span><br><span class="line">    folium.Marker([temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]], popup=temp_pd.iloc[i][<span class="string">'code'</span>],</span><br><span class="line">                  icon = folium.Icon(color=<span class="string">'green'</span>,prefix=<span class="string">"fa"</span>, icon=<span class="string">"plane"</span>),).add_to(map_1)</span><br><span class="line">    </span><br><span class="line"><span class="comment">## no major </span></span><br><span class="line">temp_pd=data_airport_gis[data_airport_gis[<span class="string">'Major'</span>]==<span class="number">1</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(temp_pd)):   </span><br><span class="line">    print(temp_pd.iloc[i][<span class="string">'code'</span>])</span><br><span class="line">    folium.Marker([temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]], popup=temp_pd.iloc[i][<span class="string">'code'</span>],</span><br><span class="line">                  icon = folium.Icon(color=<span class="string">'blue'</span>,prefix=<span class="string">"glyphicon"</span>, icon=<span class="string">"plane"</span>),).add_to(map_1)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># draw the circles </span></span><br><span class="line">    folium.Circle(</span><br><span class="line">      location=[temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]],</span><br><span class="line">      radius=<span class="number">1609</span>*<span class="number">200</span>,</span><br><span class="line">      popup=<span class="string">"200 miles"</span>,</span><br><span class="line">      color=<span class="string">'crimson'</span>,</span><br><span class="line">      fill=<span class="keyword">True</span>,</span><br><span class="line">      fill_color=<span class="string">'crimson'</span></span><br><span class="line">   ).add_to(map_1)</span><br><span class="line"></span><br><span class="line">    folium.Circle(</span><br><span class="line">      location=[temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]],</span><br><span class="line">      radius=<span class="number">1609</span>*<span class="number">300</span>,</span><br><span class="line">      popup=<span class="string">"300 miles"</span>,</span><br><span class="line">      color=<span class="string">'#32aaff'</span>,</span><br><span class="line">      fill=<span class="keyword">True</span>,</span><br><span class="line">      fill_color=<span class="string">'#32aaff'</span></span><br><span class="line">   ).add_to(map_1)</span><br><span class="line">    </span><br><span class="line">    folium.Circle(</span><br><span class="line">      location=[temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]],</span><br><span class="line">      radius=<span class="number">1609</span>*<span class="number">450</span>,</span><br><span class="line">      popup=<span class="string">"450 miles"</span>,</span><br><span class="line">      color=<span class="string">'#7f8eff'</span>,</span><br><span class="line">      fill=<span class="keyword">True</span>,</span><br><span class="line">      fill_color=<span class="string">'#7f8eff'</span></span><br><span class="line">   ).add_to(map_1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map_1.save(path+<span class="string">'map.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="Construct-flight-route-data"><a href="#Construct-flight-route-data" class="headerlink" title="Construct flight route data"></a>Construct flight route data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> geocoder</span><br><span class="line"><span class="keyword">from</span> geopy <span class="keyword">import</span> distance</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">DICT_HUB=&#123;</span><br><span class="line">        <span class="string">"PA"</span>:<span class="string">'PHL'</span>,</span><br><span class="line">        <span class="string">"MI"</span>:<span class="string">'DTW'</span>,</span><br><span class="line">        <span class="string">"WV"</span>:<span class="string">"DCA"</span>,</span><br><span class="line">        <span class="string">"IL"</span>:<span class="string">"ORD"</span>,</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">path =<span class="string">"your data path"</span></span><br><span class="line"><span class="comment">#STATE=input("input the state you want ")</span></span><br><span class="line"><span class="comment">#Year=input("time period ")</span></span><br><span class="line">STATE=<span class="string">"PA"</span></span><br><span class="line">Year=<span class="string">"2000Q1"</span></span><br><span class="line"></span><br><span class="line">market_pd=pd.read_csv(path+STATE+Year+<span class="string">".csv"</span>)</span><br><span class="line"></span><br><span class="line">airport_pd=pd.read_csv(path+<span class="string">"airport_statistics.csv"</span>) </span><br><span class="line">col=list(market_pd.columns)</span><br><span class="line">market_pd.drop(col[<span class="number">-1</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>) <span class="comment">#drop a columns </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## first let me focus on only one routes from other state to PA</span></span><br><span class="line">market_pd_1=market_pd.loc[market_pd[<span class="string">'DEST_STATE_ABR'</span>]==STATE,]</span><br><span class="line">STATE_airports=list(market_pd_1[<span class="string">'DEST'</span>].unique())</span><br><span class="line">year=list(market_pd_1[<span class="string">'YEAR'</span>].unique())[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#,'ORIGIN','ORIGIN_STATE_ABR','DEST','DEST_STATE_ABR'</span></span><br><span class="line">col_map=[<span class="string">'ITIN_ID'</span>, <span class="string">'MKT_ID'</span>,<span class="string">'AIRPORT_GROUP'</span>,<span class="string">'TK_CARRIER_GROUP'</span>,<span class="string">'MARKET_FARE'</span>,<span class="string">'MARKET_DISTANCE'</span>, <span class="string">'DISTANCE_GROUP'</span>,<span class="string">'MKT_GEO_TYPE'</span>]</span><br><span class="line"></span><br><span class="line">market_pd_map=market_pd_1[col_map]</span><br><span class="line"></span><br><span class="line"><span class="comment"># deal with the aiprot info </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">air_cat1</span><span class="params">(x)</span>:</span></span><br><span class="line">    xx=str(x).split(<span class="string">":"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(xx)==<span class="number">2</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> xx[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> xx[<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">air_cat2</span><span class="params">(x)</span>:</span></span><br><span class="line">    xx=str(x).split(<span class="string">":"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(xx)==<span class="number">2</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> xx[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> xx[<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">market_pd_map[<span class="string">'pos1'</span>]=market_pd_map[<span class="string">'AIRPORT_GROUP'</span>].apply(air_cat1)</span><br><span class="line">market_pd_map[<span class="string">'pos2'</span>]=market_pd_map[<span class="string">'AIRPORT_GROUP'</span>].apply(air_cat2)</span><br><span class="line"></span><br><span class="line">airport_list=list(pd.unique(market_pd_map[<span class="string">'pos1'</span>]))+list(pd.unique(market_pd_map[<span class="string">'pos2'</span>]))</span><br><span class="line">col_info = [<span class="string">'Code'</span>,<span class="string">'name'</span>,<span class="string">'address'</span>,<span class="string">'lat'</span>,<span class="string">'lng'</span>]</span><br><span class="line">airport_gis_pd=pd.DataFrame(columns=col_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># GIS process: use address to convert gis</span></span><br><span class="line"><span class="keyword">for</span> nn_airport <span class="keyword">in</span> airport_list:</span><br><span class="line">    add_temp=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==nn_airport,<span class="string">'add'</span>].values[<span class="number">0</span>]</span><br><span class="line">    airport_name=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==nn_airport,<span class="string">'name'</span>].values[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    geo_info_temp= geocoder.google(add_temp)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> geo_info_temp.ok:</span><br><span class="line">        </span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        geo_info_temp= geocoder.google(airport_name+<span class="string">", "</span>+STATE)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    s=pd.Series([nn_airport,airport_name,add_temp,geo_info_temp.lat,geo_info_temp.lng],index=col_info)</span><br><span class="line"></span><br><span class="line">    airport_gis_pd=airport_gis_pd.append(s,ignore_index=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">airport_gis_pd.to_csv(path+<span class="string">"airport_PA00Q1_gis.csv"</span>,index=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># save the results</span></span><br><span class="line">group_airport=market_pd_map.groupby([<span class="string">'pos1'</span>,<span class="string">'pos2'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">airport_m_pd=group_airport[<span class="string">'ITIN_ID'</span>].count()</span><br><span class="line">airport_m_pd=pd.DataFrame(airport_m_pd)</span><br><span class="line">airport_m_pd = airport_m_pd.rename(columns=&#123;<span class="string">'ITIN_ID'</span>: <span class="string">'num_flights'</span>,&#125;)</span><br><span class="line"></span><br><span class="line">airport_m_pd.reset_index(level=<span class="number">0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line">airport_m_pd.reset_index(level=<span class="number">0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># marge the result from origin cities to destination cities</span></span><br><span class="line">merg_fligh_od=pd.merge(airport_m_pd,airport_gis_pd[[<span class="string">'Code'</span>,<span class="string">'lat'</span>,<span class="string">'lng'</span>]],left_on=<span class="string">'pos1'</span>, right_on=<span class="string">'Code'</span>,how=<span class="string">"left"</span>)</span><br><span class="line">merg_fligh_od = merg_fligh_od.rename(columns=&#123;<span class="string">'lat'</span>: <span class="string">'lat_1'</span>, <span class="string">'lng'</span>: <span class="string">'lng_1'</span>&#125;)</span><br><span class="line">merg_fligh_od=pd.merge(merg_fligh_od,airport_gis_pd[[<span class="string">'Code'</span>,<span class="string">'lat'</span>,<span class="string">'lng'</span>]],left_on=<span class="string">'pos2'</span>, right_on=<span class="string">'Code'</span>,how=<span class="string">"left"</span>)</span><br><span class="line">merg_fligh_od = merg_fligh_od.rename(columns=&#123;<span class="string">'lat'</span>: <span class="string">'lat_2'</span>, <span class="string">'lng'</span>: <span class="string">'lng_2'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">merg_fligh_od.to_csv(path+<span class="string">"flight_routes.csv"</span>,index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="Create-Flight-Map-with-plotly"><a href="#Create-Flight-Map-with-plotly" class="headerlink" title="Create Flight Map with plotly"></a>Create Flight Map with plotly</h3><p>Finally, with all the gis information, I can construct the flight route map. After searching for different data visualization tools, I finally decide to use plotly to do the graph. The following is the simple example for a basic route map. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">path =<span class="string">"your data path"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#load the data</span></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">df_airports = pd.read_csv(path+<span class="string">'airport_PA00Q1_gis.csv'</span>)</span><br><span class="line"></span><br><span class="line">df_airports.head()</span><br><span class="line"></span><br><span class="line">df_flight_paths = pd.read_csv(path+<span class="string">"flight_routes.csv"</span>)</span><br><span class="line">df_flight_paths.head()</span><br><span class="line"></span><br><span class="line"><span class="comment">## initialization</span></span><br><span class="line">airports = [ dict(</span><br><span class="line">        type = <span class="string">'scattergeo'</span>,</span><br><span class="line">        locationmode = <span class="string">'USA-states'</span>,</span><br><span class="line">        lon = df_airports[<span class="string">'lng'</span>],</span><br><span class="line">        lat = df_airports[<span class="string">'lat'</span>],</span><br><span class="line">        hoverinfo = <span class="string">'text'</span>,</span><br><span class="line">        text = df_airports[<span class="string">'name'</span>],</span><br><span class="line">        mode = <span class="string">'markers'</span>,</span><br><span class="line">        marker = dict( </span><br><span class="line">            size=<span class="number">2</span>, </span><br><span class="line">            color=<span class="string">'rgb(255, 0, 0)'</span>,</span><br><span class="line">            line = dict(</span><br><span class="line">                width=<span class="number">3</span>,</span><br><span class="line">                color=<span class="string">'rgba(68, 68, 68, 0)'</span></span><br><span class="line">            )</span><br><span class="line">        ))]</span><br><span class="line"></span><br><span class="line"><span class="comment">## add gis info</span></span><br><span class="line">flight_paths = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range( len( df_flight_paths ) ):</span><br><span class="line">    flight_paths.append(</span><br><span class="line">        dict(</span><br><span class="line">            type = <span class="string">'scattergeo'</span>,</span><br><span class="line">            locationmode = <span class="string">'USA-states'</span>,</span><br><span class="line">            lon = [ df_flight_paths[<span class="string">'lng_1'</span>][i], df_flight_paths[<span class="string">'lng_2'</span>][i] ],</span><br><span class="line">            lat = [ df_flight_paths[<span class="string">'lat_1'</span>][i], df_flight_paths[<span class="string">'lat_2'</span>][i] ],</span><br><span class="line">            mode = <span class="string">'lines'</span>,</span><br><span class="line">            line = dict(</span><br><span class="line">                width = <span class="number">1</span>,</span><br><span class="line">                color = <span class="string">'red'</span>,</span><br><span class="line">            ),</span><br><span class="line">            opacity = float(df_flight_paths[<span class="string">'num_flights'</span>][i])/float(df_flight_paths[<span class="string">'num_flights'</span>].max()),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"><span class="comment">## write down the map description     </span></span><br><span class="line">layout = dict(</span><br><span class="line">        title = <span class="string">'2000 Q1 flight paths&lt;br&gt;(PA)'</span>,</span><br><span class="line">        showlegend = <span class="keyword">False</span>, </span><br><span class="line">        geo = dict(</span><br><span class="line">            scope=<span class="string">'north america'</span>,</span><br><span class="line">            projection=dict( type=<span class="string">'azimuthal equal area'</span> ),</span><br><span class="line">            showland = <span class="keyword">True</span>,</span><br><span class="line">            landcolor = <span class="string">'rgb(243, 243, 243)'</span>,</span><br><span class="line">            countrycolor = <span class="string">'rgb(204, 204, 204)'</span>,</span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># use plotly to draw the map</span></span><br><span class="line">fig = dict( data=flight_paths + airports, layout=layout )</span><br><span class="line">plotly.offline.plot( fig, filename=path+<span class="string">'d3-flight-paths.html'</span> )</span><br></pre></td></tr></table></figure><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><p>airport map<br><a href="/files/map-airport.html">airport</a></p></li><li><p>flight routes map<br><a href="/files/d3-flight-paths.html">flight route</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this post, I try to summarize the the construction of US Airline Flight Map. The data source comes from &lt;a href=&quot;https://www.transtats.bts.gov/Tables.asp?DB_ID=125&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bureau of Transportation Statistics&lt;/a&gt;. The first thing is to obtain the local airport information. For example, the GIS location, the carrier’s market share and market construction, and the distance from the near HUB. Secondly, I want to draw the flight route map. &lt;/p&gt;
    
    </summary>
    
      <category term="Data Science" scheme="http://xiaofeima1990.github.io/categories/Data-Science/"/>
    
    
      <category term="GIS" scheme="http://xiaofeima1990.github.io/tags/GIS/"/>
    
      <category term="python" scheme="http://xiaofeima1990.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Typora for Math Formula</title>
    <link href="http://xiaofeima1990.github.io/2018/05/19/Use%20Typora%20for%20Math%20Formula/"/>
    <id>http://xiaofeima1990.github.io/2018/05/19/Use Typora for Math Formula/</id>
    <published>2018-05-19T19:49:22.289Z</published>
    <updated>2019-04-04T14:51:30.785Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><strong>How to number the equations</strong></p><p>As far as I can see, in mac system, Typora automatically number the equations in <em>Math block</em> . But in windows system, there is no automatically numbering function. whether it has automatically or not, we can always choose to use <code>\tag{}</code> and <code>\nonumber</code> to number or remove the number for certain equations.</p><p><strong>How to cite the equations</strong></p><p>If we want to cite the equations later, we can use <code>\label{name}</code> and <code>\ref{label_name}</code> to cite the particular equation. Of course, we need to add <code>$ $</code> outsides. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;How to number the equations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As far as I can see, in mac system, Typora automatically number the
      
    
    </summary>
    
      <category term="Skills" scheme="http://xiaofeima1990.github.io/categories/Skills/"/>
    
    
      <category term="guide" scheme="http://xiaofeima1990.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xiaofeima1990.github.io/2018/05/18/hello-world/"/>
    <id>http://xiaofeima1990.github.io/2018/05/18/hello-world/</id>
    <published>2018-05-19T01:59:29.037Z</published>
    <updated>2019-04-04T14:51:11.929Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Economics Important Data and Tools</title>
    <link href="http://xiaofeima1990.github.io/2018/05/18/Economics-Important-Data-and-Tools/"/>
    <id>http://xiaofeima1990.github.io/2018/05/18/Economics-Important-Data-and-Tools/</id>
    <published>2018-05-19T00:54:00.000Z</published>
    <updated>2018-05-19T01:09:41.249Z</updated>
    
    <content type="html"><![CDATA[<p>This script lists some importance data source and tools for economic research and study<br><a id="more"></a></p><p><strong>NBER Recession Period</strong></p><p><a href="/files/NBER recession date.xlsx">NBER recession date</a></p><p><strong>Value Function Iteration Example</strong><br>The example is written in matlab:</p><p><a href="/files/VFI/VFI.m">main</a><br><a href="/files/VFI/valfun2.m">fuction</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This script lists some importance data source and tools for economic research and study&lt;br&gt;
    
    </summary>
    
      <category term="Economics" scheme="http://xiaofeima1990.github.io/categories/Economics/"/>
    
    
      <category term="economic source" scheme="http://xiaofeima1990.github.io/tags/economic-source/"/>
    
  </entry>
  
  <entry>
    <title>Mechanism Design and Contract Theory Introduction</title>
    <link href="http://xiaofeima1990.github.io/2018/05/18/mechanism%20design%20contract%20theory/"/>
    <id>http://xiaofeima1990.github.io/2018/05/18/mechanism design contract theory/</id>
    <published>2018-05-19T00:39:00.000Z</published>
    <updated>2018-05-19T16:40:38.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mechanism-Design"><a href="#Mechanism-Design" class="headerlink" title="Mechanism Design"></a>Mechanism Design</h2><blockquote><p>Mechanism design is a field in economics and game theory that takes an engineering approach to designing economic mechanisms or incentives, toward desired objectives, in strategic settings, where players act rationally.</p><p>Participants in the Mechanism design understand that they are playing a non-cooperative game. <strong>Game theory takes the rules of the game as given. The theory of mechanism design is about the optimal choice of the rules of the game</strong></p><p>Because it starts at the end of the game, then goes backwards, it is also called reverse game theory. Mechanism design studies solution concepts for a class of private-information games.</p></blockquote><p>Mechanism design theory provides a coherent framework for analyzing this great variety of institutions, or allocation mechanisms, with a focus on the problems associated with incentives and private information. By using game theory, mechanism design can go beyond the classical approach, and, for example, explicitly model how prices are set. The theory shows, for example, that so-called double auctions (where buyers and sellers post their bid- and ask-prices) can be efficient trading institutions when each trader has private information about his or her valuations of the goods traded.</p><a id="more"></a><p>There are at least two reasons why we study mechanism design.</p><ul><li><p>normative<br>  it aids in practice the designers of real-world mechanisms. The theory of optimal auctions, for example, is frequently invoked in discussions about the design of government and industry auctions.</p></li><li><p>positive<br>  it can explain why real-world institutions are. For example, we might seek to explain the use of auctions in some house sales, as well as the use of posted prices in other house sales by appealing to the theory of mechanism design</p></li></ul><p>One cases for the application of mechanism is that theory has been used to identify conditions under which commonly observed auction forms maximize the sellers expected revenue. Other cases such as public goods,the theory thus helps to justify governmental financing of public goods through taxation.</p><p>The development of mechanism design theory began with the work of Leonid Hurwicz (1960). <strong>He defined a mechanism as a communication system in which participants send messages to each other and/or to a message center, and where a pre-specified rule assigns an outcome (such as an allocation of goods and services) for every collection of received messages.</strong> Hurwicz (1972) introduced the key notion of <em>incentive-compatibility</em>, which allows the analysis to incorporate the incentives of self-interested participants. <strong>The incentives created by the choice of rules of games are central to the theory of mechanism design.</strong></p><p>In the 1970s, the formulation of the so-called <em>revelation principle</em> and the development of <em>implementation theory</em> led to great advances in the theory of mechanism design. revelation principle was developed by Roger Myerson. And the <em>resulting theory</em>, known as <em>implementation theory</em> was developed by Eric Maskin.</p><p><strong>distinction between the theory of mechanism design and contract theory</strong> : In contract theory, we study the optimal design of incentives for a <strong>single agent</strong>. In mechanism design, we study the optimal design of incentives for <strong>a group of agents</strong>, such as the buyers in our first example and the colleagues in the second example. Contract theory therefore, unlike the theory of mechanism design, does not have to deal with strategic interaction.</p><p>direct mechanism: the agent report their private information .</p><p>(incentive compatible) (IC) A mechanism is called incentive-compatible if every participant can achieve the best outcome to him/herself just by acting according to his/her true preferences</p><p>(participation constraint) no agent should be made worse off by participating in the mechanism.</p><h3 id="Incentive-compatibility-and-the-revelation-principle"><a href="#Incentive-compatibility-and-the-revelation-principle" class="headerlink" title="Incentive compatibility and the revelation principle"></a>Incentive compatibility and the revelation principle</h3><p>In Hurwiczs formulation, a mechanism is a <strong>communication</strong> system in which participants exchange messages with each other, messages that jointly determine the outcome. These messages may contain private information, such as an individuals (true or pretended) willingness to pay for a public good. The mechanism is like a <strong>machine</strong> that compiles and processes the received messages, thereby aggregating (true or false) private information provided by many agents. Each agent strives to maximize his or her expected payoff (utility or profit), and may decide to withhold disadvantageous information or send false information (hoping to pay less for a public good, say).</p><p>Hurwiczs (1972) notion of incentive-compatibility can now be expressed as follows: the mechanism is incentive-compatible if it is a dominant strategy for each participant to report his private information truthfully.</p><blockquote><p>In a standard exchange economy, no incentive-compatible mechanism which satisfies the participation constraint can produce Pareto-optimal outcomes.</p></blockquote><p>Private information precludes full efficiency.</p><p>This lead to the following questions :</p><ul><li><p>Can Pareto optimality be attained if we consider a wider class of mechanisms and/or a less demanding equilibrium concept than dominant-strategy equilibrium, such as Nash equilibrium or Bayesian Nash equilibrium?</p></li><li><p>If not, then we would like to know how large the unavoidable social welfare losses are, and what the appropriate standard of efficiency should be.</p></li></ul><p>The revelation principle states that any equilibrium outcome of an arbitrary mechanism can be replicated by an incentive-compatible direct mechanism. Although the set of all possible mechanisms is huge, the revelation principle implies that an optimal mechanism can always be found within the well-structured subclass consisting of <strong><em>direct mechanisms.</em></strong></p><p>Direct Mechanisms A direct revelation mechanism is one where each agent is asked to report his individual preferences. In an indirect mechanism agents are asked to send messages other than preferences.</p><p>(Incentive Efficient) A direct mechanism is said to be incentive efficient if it maximizes some weighted sum of the agents expected payoffs subject to their IC constraints.</p><h4 id="Dominant-strategy-mechanisms-for-public-goods-provision"><a href="#Dominant-strategy-mechanisms-for-public-goods-provision" class="headerlink" title="Dominant-strategy mechanisms for public goods provision"></a>Dominant-strategy mechanisms for public goods provision</h4><p>Before 1970, economists generally believed that public goods could not be provided at an efficient level, precisely because people would not reveal their true willingness to pay. But Edward Clarke (1971) and Theodore Groves (1973) shows a case if there are no income effects on the demand for public goods (technically, if utility functions are quasi-linear), then there exists a class of mechanisms in which (a) truthful revelation of ones willingness to pay is a dominant strategy, and (b) the equilibrium level of the public good maximizes the social surplus.</p><p>Each person is asked to report his or her willingness to pay for the project, and the project is undertaken if and only if the aggregate reported willingness to pay exceeds the cost of the project. If the project is undertaken, then each person pays a tax or fee equal to the difference between the cost of the project and everyone elses reported total willingness to pay. With such taxes, each person internalizes the total social surplus, and truth-telling is a dominant strategy.</p><p>But due to the drawbacks of Dominant-strategy mechanisms, focus of the literature shifted from dominantstrategy solutions to so-called Bayesian mechanism design.</p><h4 id="Bayesian-mechanisms-for-public-goods-provision"><a href="#Bayesian-mechanisms-for-public-goods-provision" class="headerlink" title="Bayesian mechanisms for public goods provision"></a>Bayesian mechanisms for public goods provision</h4><p>In a Bayesian model, the agents are expected-utility maximizers. The solution concept is typically Bayesian Nash equilibrium. Regarding Clarke-Groves dominant-strategy mechanism, Claude dAspremont and Louis- AndrGrard-Varet (1979) showed that this problem can be solved in the Bayesian version of the model. In the Bayesian model, agents are expected utility maximizers, and the IC constraints only have to hold in expectation. So it is easier to satisfy.</p><p>The fact that English villages were much earlier than French villages in deciding on public goods such as enclosure of open fields and drainage of marshlands can arguably be ascribed to the fact that French villages required unanimity on such issues whereas the English did not. (why)</p><p>Why if participation is voluntary and decisions to start the project must be taken unanimously, then the problem of free-riding becomes severe?  -<strong>bilateral trade</strong></p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>Incentive compatibility guarantees that truth-telling is an equilibrium, but not that it is the only equilibrium. Many mechanisms have multiple equilibria that produce different outcomes. In view of these difficulties, it is desirable to design mechanisms in which all equilibrium outcomes are optimal for the given goal function. The quest for this property is known as the implementation problem.</p><p>Groves and Ledyard (1977) and Hurwicz and Schmeidler (1978) showed that, in certain situations, <strong>it is possible to construct mechanisms in which all Nash equilibria are Pareto optimal,</strong> while Eric Maskin (1977) gave a general characterization of Nash implementable social-choice functions.</p><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><h4 id="Optimal-selling-and-procurement-mechanisms"><a href="#Optimal-selling-and-procurement-mechanisms" class="headerlink" title="Optimal selling and procurement mechanisms"></a>Optimal selling and procurement mechanisms</h4><p>General revenue-equivalence theorem. In particular, four well-known auction forms (the so-called English and Dutch auctions, and first-price and second-price sealed bid auctions, respectively) generate the same expected revenue. Myerson (1981) showed that if the bidders are symmetric (drawn from one and the same type pool) and if the seller sets an appropriate reserve price (a lowest price below which the object will not be sold), then all of the four well-known auction formats are in fact optimal</p><p>if the bidders types are independently drawn from a uniform distribution on the interval from zero to one hundred, then the optimal reserve price is 50, independently of the number of bidders. This reserve price induces bidders whose valuations exceed 50 to bid higher than they would otherwise have done, which raises the expected revenue. <strong>On the other hand, if it so happens that no bidder thinks the object is worth 50, then the object is not sold even if it has a positive value to some bidder and no value at all to the seller.(not understand)</strong> This outcome is clearly not Pareto efficient in the classical sense</p><p>Maskin (1992) found that, under certain conditions, an English auction maximizes social welfare even if each bidders valuation depends on other bidders private information.</p><p>One might be tempted to discount the need for the governments auction to maximize social welfare, for the following reason. Suppose there are two potential bidders, A and B, and B values the asset more than A. Then, even if the government allocates the asset to the wrong person, A, would not then B simply buy the asset from A (assuming it can be traded)? If so, then B (who values the asset the most) would always get the asset in the end - so the government should not worry too much about getting the initial allocation right. However, this argument is incorrect, because it does not take informational constraints into account. The Laffont-Maskin and Myerson-Satterthwaite impossibility results (see Section 2.4) imply that B may not buy the asset from A even if B values it the most. Therefore, getting the initial allocation of ownership right may be of the utmost importance.</p><h4 id="Regulation-and-auditing"><a href="#Regulation-and-auditing" class="headerlink" title="Regulation and auditing"></a>Regulation and auditing</h4><p>This is about monopolies and oligopolies. The situation changed dramatically with the pioneering contributions of Baron and Myerson (1982) and Sappington (1982, 1983). the regulatory process was modeled as a game of incomplete information. The regulator did not have direct access to information about the monopolists true production costs.</p><h3 id="Social-Choice-Theory"><a href="#Social-Choice-Theory" class="headerlink" title="Social Choice Theory"></a>Social Choice Theory</h3><p>In the axiomatic social-choice theory pioneered by Kenneth Arrow (1951), there is a set X of feasible alternatives and n individuals who have preferences over these. A social choice rule is a rule that selects one or several alternatives from X on the basis of the individuals preferences, for any given such preference profile</p><p>Maskin monotonicity is the following property of a social choice rule. Suppose that, for preference profile P1, the chosen alternative is A1. Consider another preference profile P2 such that, the position of A1 relative to each of the other alternatives either improves or stays the same as in P1. Then, A1 should still be chosen at P2.</p><p>plurality rule. An alternative in $X$ is said to be the plurality alternative if it is top-ranked by the greatest number of voters</p><h2 id="Asymmetric-Information"><a href="#Asymmetric-Information" class="headerlink" title="Asymmetric Information"></a>Asymmetric Information</h2><p>In 1996, the Bank of Sweden Prize in Economic Sciences in Memory of Alfred Nobel was awarded to James Mirrlees and William Vickrey for their fundamental contributions to the theory of incentives under asymmetric information, in particular its applications to the <strong>design of optimal income taxation</strong> and resource allocation through <strong>different types of auctions.</strong> The theory of markets with asymmetric information rests firmly on the work of three researchers: George Akerlof (University of California, Berkeley), Michael Spence (Stanford University) and Joseph Stiglitz (Columbia University).</p><p>Some questions like Why do people looking for a good used car typically turn to a dealer rather than a private seller? Why dofirms pay dividends even if they are taxed more heavily than capital gains? Why is it in the interest of insurance companies to offer a menu of policies with different mixes of premiums, coverage and deductibles? challenge the traditional economic theory. Those questions share a same realistic assumption : one side of the market has better information than the other.</p><p>Akerlof showed how informational asymmetries can give rise toadverse selection in markets. Spence demonstrated that informed economic agents in such markets may have incentives to take observable and costly actions to crediblysignaltheir private information to uninformed agents, so as to improve their market outcome. Stiglitz showed that poorly informed agents can indirectly extract information from those who are better informed, by offering a menu of alternative contracts for a specific transaction, so-called screening through self-selection.</p><ul><li><p><strong>Akerlof</strong> </p><p>market failure and asymmetric information. (lemon market)</p></li><li><p><strong>Michael Spence</strong></p><p>Spence’s most important work demonstrates how agents in a market can use signaling to counteract the effects of adverse selection. In this context, signaling refers to observable actions taken by economic agents to convince the opposite party of the value or quality of their products. A fundamental insight is that signaling can succeed only if the signaling cost differs sufficiently among the ’senders’.</p></li><li><p><strong>Stiglitz</strong></p><p>insurance market </p></li></ul><h2 id="Contract-Theory"><a href="#Contract-Theory" class="headerlink" title="Contract Theory"></a>Contract Theory</h2><p>An eternal obstacle to human cooperation is that people have different interests. In modern societies, conflicts of interests are often mitigated if not completely resolved by contractual arrangements. The idea that incentives must be aligned to exploit the gains from cooperation has a long history within economics. In the 1700’s, Adam Smith argued that sharecropping contracts do not give tenants sufficient incentives to improve the land. Today, incentive problems are almost universally seen through its lens. The theory has had a major impact on organizational economics and corporate finance, and it has deeply influenced other fields such as industrial organization, labor economics, public economics, political science, and law.</p><p>A <strong>classic contracting problem</strong> has the following structure. A principal engages an agent to take certain actions on the principals behalf. However, the principal cannot directly observe the agents actions, which creates a problem of moral hazard : <em>the agent may take actions that increase his own payoff but reduce the overall surplus of the relationship.</em> To be specific, suppose the principal is the main shareholder of a company and the agent is the company’s manager. As Adam Smith noted, the separation of ownership and control in a company might cause the manager to make decisions contrary to the interests of shareholders.</p><blockquote><p>Therefore <strong>contract theory</strong> has traditionally been divided into <strong>two</strong> parts: the theory of hidden information (also referred to as the theory of adverse selection) and the theory of hidden action (also referred to as the theory of moral hazard).</p></blockquote><p>To alleviate this moral-hazard problem, the principal may offer a compensation package which ties the managers income to some (observable and verifiable) performance measure. We refer to this as paying for performance. But any performance measure is likely to be imprecise and noisy, so in the end the optimal compensation schedule must trade off incentive provision against risk-sharing.</p><p>informativeness principle Formally, suppose P is considering making the transfer t a function of some signal s in addition to $\beta$. The informativeness principle implies that she should do so if and only if is not a sufficient statistic for a given ($\beta$; s).</p><p>Paying for performance requires both the ability to write sufficiently detailed contracts ex ante, as well as the ability to measure and verify performance ex post.</p><p>incomplete contracting approach</p><p>allocation of decision rights.</p><p>Decision rights are often determined by property rights, property rights generate bargaining power,which in turn determines incentives. image the company want to do R&amp;D. the researcher’s right and company’s right during the innovation of the product.</p><p>More generally, when performance-based contracts are hard to write or hard to enforce, carefully allocated decision rights may produce good incentives and thus substitute for contractually specified rewards. This insight is a cornerstone in the theory of incomplete contracts.</p><p>The theory has been highly influential within corporate finance and organizational economics,</p><ul><li><p>costs and benefits of mergers</p></li><li><p>the distribution of authority within organizations</p></li><li><p>whether or not providers of public services should be privately owned</p></li><li><p>how outside owners can control a company’s inside managers through the design of corporate governance and capital structure</p></li></ul><h3 id="Complete-Contracts-principal-agent-model"><a href="#Complete-Contracts-principal-agent-model" class="headerlink" title="Complete Contracts: principal-agent model"></a>Complete Contracts: principal-agent model</h3><p>A simple framework :</p><p>imprecise performance measure</p><h2 id="Incomplete-Contracts-Allocating-Decision-Rights"><a href="#Incomplete-Contracts-Allocating-Decision-Rights" class="headerlink" title="Incomplete Contracts: Allocating Decision Rights"></a>Incomplete Contracts: Allocating Decision Rights</h2><ul><li>Hold up problem</li><li>property right</li><li>In property-rights models of Hart and coauthors, decision rights over physical assets are the crucial source of bargaining power and incentives.</li><li>What is the connection between mechanism design, asymmetric information and contract theory?!</li><li>Screening Contract and Incentive Contract</li></ul><h4 id="Voting-Scheme-of-the-social-choice"><a href="#Voting-Scheme-of-the-social-choice" class="headerlink" title="Voting Scheme of the social choice."></a>Voting Scheme of the social choice.</h4><p>Condorcet conditions: If there is a candidate that is preferred to every other candidate in pair wise majority -rule comparisons , that candidate should be choose</p><p>$(a\succ b),\ (a\succ c)\ (a\succ d)$ $a$ is the winner. The potential candidate should win all the pairs</p><p>Arrow impossibility theorem : Any social welfare function W over three or more outcomes that is pareto efficient and independent of irrelevant alternatives is dictatorial.</p><p>Pareto Efficiency : W is Pareto efficient if for any $o_{1},\ o_{2}\in O,\ \forall i\ o_{1}\succ_{i}o_{2}$ implies that $o_{1}\succ_{W}o_{2}$</p><p>If everyone agrees $a$ better than b, social welfare function is also required that $a$ is better than <strong>$b$</strong> . If one person feels differently, this does not restrict soical welfare function at all.</p><p>Idependence of Irrelevant Alternatives : $W$ is independent of Irrelevant Alternatives if for any $o_{1},\ o_{2}\in O,$ and any two preference profiles $[\succ’],[\succ’’]\in L^{n}$ $\forall i\ (o_{1}\succ_{i}’o_{2}\ \text{iff},\ o_{1}\succ_{i}’’o_{2})$ implies that $(o_{1}\succ_{W}([\succ’])o_{2})$ iff $(o_{1}\succ_{W}([\succ’’])o_{2})$</p><p>if agent 1 likes $o_{1}$ better than $o_{2}$, in preference $\succ’$ , he must also likes $o_{1}$ better than $o_{2}$, in preference $\succ’’$ .</p><p>Non-dictatorship : $W$ does not have a dictator if $\lnot\exists i\ \forall o_{1},o_{2}(o_{1}\succ_{i}o_{2}\Rightarrow o_{1}\succ_{W}o_{2})$</p><p>given a set of agents $N=\{1,2,3…\}$a finite set of outcomes (or alternative or candidates ) $O$ and the set of preferences over outcomes $L_{NS}$</p><p>Social choice function $C:\ L_{NS}^{N}\rightarrow O$</p><p>Social welfare function $W:\ L_{NS}^{n}\rightarrow L_{NS}$</p><p>social choice function VS social welfare function</p><p>Assume that finite set of alternatives are a,b and c. social choice function can have one single output which can be a or b or c. A social welfare function can have any ranking as output such as $a &lt; b &lt; c​ $ .</p><h2 id="Tian’s-notes"><a href="#Tian’s-notes" class="headerlink" title="Tian’s notes"></a>Tian’s notes</h2><p>The <strong>incentives</strong> structure and information structure are thus two basic features of any economic system. Indeed, delegation of a task to an agent who has different objectives than the principal who delegates this task is problematic when information about the agent is imperfect. This problem is the essence of incentive questions. <strong>Thus, conflicting objectives and decentralized information are the two basic ingredients of incentive theory.</strong></p><p>The three words contracts, mechanisms and institutions are to a large extent synonymous. They all mean <strong>rules of the game</strong>, which describe what actions the parties can undertake, and what outcomes these actions would be obtained. While mechanism design theory may be able answer big questions, such as socialism vs. capitalism, contract theory is developed and useful for more manageable smaller questions, concerning specific contracting practices and mechanisms.</p><p>mechanism design is normative economics, in contrast to game theory, which is positive economics.</p><p>(normative economics) a part of economics that expresses value or normative judgments about economic fairness or what the outcome of the economy or goals of public policy ought to be.</p><p>(positive economics) is the branch of economics that concerns the description and explanation of economic phenomena. It focuses on facts and cause-and-effect behavioral relationships and includes the development and testing of economics theories.</p><h3 id="Screening-and-Signaling"><a href="#Screening-and-Signaling" class="headerlink" title="Screening and Signaling"></a>Screening and Signaling</h3><p>For the most part we will focus on the situation where the <em>Principal has no private information and the agents do</em>. This framework is called <strong>screening</strong>, because the principal will in general try to screen different types of agents by inducing them to choose different bundles.</p><p>The opposite situation, in which the <em>Principal has private information and the agents do not</em>, is called <strong>signaling</strong>, since the Principal could signal his type with the design of his contract.</p><h3 id="First-Best-and-Second-Best"><a href="#First-Best-and-Second-Best" class="headerlink" title="First Best and Second Best"></a>First Best and Second Best</h3><p>In the class, what we learned of first best is that principal can extract all the rent from agents; second best involves the incentive compatibility constraint and principal need to share some rent to agents to pay for the “information value”</p><p><strong>In Contract Theory</strong> </p><p>The first-best refers to the best you could do if you knew agent’s preferences over labor an income (i.e., if you did not have to impose the incentive compatibility constraint), and the second-best is the best you can do if agents have to reveal their preferences themselves.</p><p><strong>Difference</strong> </p><p>There is not much connection between the two notions as defined above. Every combination of the two notions is a priori possible. Both a mechanism and a contract can be</p><ol><li><p>First-best ex-post efficient (i.e., efficient when incentive compatibility constraint is <strong>not</strong> imposed and the outcome of the mechanism/contract must be deterministic)</p></li><li><p>First-best ex-ante efficient (i.e., efficient when incentive compatibility constraint is <strong>not</strong> imposed and the outcome of the mechanism/contract can be random)</p></li><li><p>Second-best ex-post efficient (i.e., efficient when incentive compatibility constraint <strong>is</strong> imposed and the outcome of the mechanism/contract must be deterministic)</p></li><li><p>Second-best ex-ante efficient (i.e., efficient when incentive compatibility constraint <strong>is</strong> imposed and the outcome of the mechanism/contract can be random)</p></li></ol><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>Quasi-linear Utility quasi-linear utility functions are linear in one argument, generally the numeraire. This utility function has the representation $u(x_{1},x_{2},\ldots,x_{n})=x_{1}+\theta(x_{2},\ldots,x_{n})$. Informally, an agent has quasi-linear utility if it can express all its preferences in terms of money and the amount of money it has will not create a <strong>wealth effect.</strong> As a practical matter in mechanism design, quasi-linear utility ensures that <strong>agents can compensate each other with side payments.</strong> In regard to surplus, quasi-linear preferences entail that Marshallian surplus will equal Hicksian surplus since there would be <strong>no wealth effect for a change in price</strong>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Mechanism-Design&quot;&gt;&lt;a href=&quot;#Mechanism-Design&quot; class=&quot;headerlink&quot; title=&quot;Mechanism Design&quot;&gt;&lt;/a&gt;Mechanism Design&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Mechanism design is a field in economics and game theory that takes an engineering approach to designing economic mechanisms or incentives, toward desired objectives, in strategic settings, where players act rationally.&lt;/p&gt;
&lt;p&gt;Participants in the Mechanism design understand that they are playing a non-cooperative game. &lt;strong&gt;Game theory takes the rules of the game as given. The theory of mechanism design is about the optimal choice of the rules of the game&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because it starts at the end of the game, then goes backwards, it is also called reverse game theory. Mechanism design studies solution concepts for a class of private-information games.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mechanism design theory provides a coherent framework for analyzing this great variety of institutions, or allocation mechanisms, with a focus on the problems associated with incentives and private information. By using game theory, mechanism design can go beyond the classical approach, and, for example, explicitly model how prices are set. The theory shows, for example, that so-called double auctions (where buyers and sellers post their bid- and ask-prices) can be efficient trading institutions when each trader has private information about his or her valuations of the goods traded.&lt;/p&gt;
    
    </summary>
    
      <category term="Economics" scheme="http://xiaofeima1990.github.io/categories/Economics/"/>
    
    
      <category term="Mechanism Design" scheme="http://xiaofeima1990.github.io/tags/Mechanism-Design/"/>
    
  </entry>
  
  <entry>
    <title>解决next主题和mathjax下划线冲突问题</title>
    <link href="http://xiaofeima1990.github.io/2018/05/18/solve-mathjax-display%20in%20next/"/>
    <id>http://xiaofeima1990.github.io/2018/05/18/solve-mathjax-display in next/</id>
    <published>2018-05-18T04:00:00.000Z</published>
    <updated>2018-05-19T03:11:04.964Z</updated>
    
    <content type="html"><![CDATA[<p>源于网络</p><p>在markdown写技术文章时，经常会用到latex渲染公式，markdwon集成了mathjax用于渲染公式。<br>默认next主题是集成公式的，只需要在每篇博客前面加上mathjax: true即可。</p><p>Hexo默认使用hexo-renderer-marked引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线_代表斜体，会被渲染引擎处理为<em>标签。<br>因为类Latex格式书写的数学公式下划线 _ 表示下标，有特殊的含义，如果被强制转换为<em>标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，xi在开始被渲染的时候，处理为$x<em>i</em>$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。</em></em></p><a id="more"></a><p>解决办法<br>更换markdown公式渲染引擎<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p><p>hexo 默认渲染引擎是<code>hexo-renderer-marked</code>, 另一个渲染引擎 <code>hexo-renderer-kramed</code> 在默认引擎上修复了一下bug。</p><p>修改语义转义规则<br>更换引擎后，行间公式<script type="math/tex"> </script>确实可以正常渲染了，但行内公式$ $还是有一些问题，接下来到node_modules\kramed\lib\rules\inline.js下，修改第11行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><p>修改第20行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></p><p>重启hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源于网络&lt;/p&gt;
&lt;p&gt;在markdown写技术文章时，经常会用到latex渲染公式，markdwon集成了mathjax用于渲染公式。&lt;br&gt;默认next主题是集成公式的，只需要在每篇博客前面加上mathjax: true即可。&lt;/p&gt;
&lt;p&gt;Hexo默认使用hexo-renderer-marked引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线_代表斜体，会被渲染引擎处理为&lt;em&gt;标签。&lt;br&gt;因为类Latex格式书写的数学公式下划线 _ 表示下标，有特殊的含义，如果被强制转换为&lt;em&gt;标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，xi在开始被渲染的时候，处理为$x&lt;em&gt;i&lt;/em&gt;$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Skills" scheme="http://xiaofeima1990.github.io/categories/Skills/"/>
    
    
  </entry>
  
  <entry>
    <title>Continuous Time Model</title>
    <link href="http://xiaofeima1990.github.io/2018/05/14/continous-time-model/"/>
    <id>http://xiaofeima1990.github.io/2018/05/14/continous-time-model/</id>
    <published>2018-05-14T04:00:00.000Z</published>
    <updated>2018-05-19T00:45:05.747Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Abstract</strong> This notes is about the study of continuous time dynamic model based on “The Art of Smooth Pasting”</p><a id="more"></a><h1 id="Brownian-Motion"><a href="#Brownian-Motion" class="headerlink" title="Brownian Motion"></a>Brownian Motion</h1><p>The Brownian Motion was first formulated to represent the motion of small particles suspended in a liquid. To decribe the motion, given the initial value $x_{0}$ at time $t=0$ , the random variable $x_{t}$ for any $t&gt;0$ is normally distributed with mean $(x_{0}+\mu t)$ and variance $(\sigma^{2}t)$ . The parameter $\mu$ measures the trend , and $\sigma$ the volatility of the process. For the Brownian motion, $x_{t}$ as its ’position’, and a graph of $x_{t}$ against $t$ as its ’path’.</p><p>The infinitesimal random increment $dx$ over the infinitesimal time $dt$ having mean $\mu dt$ and variance $\sigma^{2}dt$. Just as we write normal random varible as $\mu+\sigma w$ where $w$ is a standard normal varible of $N(0,1)$, we can</p><script type="math/tex; mode=display">dx=\mu dt+\sigma dw  \tag{1}</script><p>where $w$ is a standardized Brownian motion (Wiener process) whose increment $dw$ has zeros mean and variance $dt$</p><p>The (Ito) Calculus of such infinitesimal random variables differs in some important ways from the usual non-random calculus. Since a fully rigorous treatment of ito calculus is quite difficult, a non-rigorous exposition should suffices for many economic applications. So here we can approximate Brownian motion by a discrete random walk. Then the normal distribution arises as the limit of a sum of independent binary variables $\bigtriangleup x$ over discret time intervals $\bigtriangleup t$ when these go to zero in a particular way.</p><h2 id="Random-Walk-and-Brownian-Motion"><a href="#Random-Walk-and-Brownian-Motion" class="headerlink" title="Random Walk and Brownian Motion"></a>Random Walk and Brownian Motion</h2><p>This subsection try to bridge the discrete random walk with continuous Brownian motion. To do so, we can divide time into discrete period of length $\bigtriangleup t$, and $\bigtriangleup h$ can be seen as the step-length or the distance between successive points.</p><p><img src="/pic/continue_time/fig1.png" alt="image"></p><p>Let $\bigtriangleup x$ be a random variable that follows a random walk: in one time period it moves up one step in space with probability $p$, and one step down with probability $q=1-p$. Note: $\bigtriangleup h$ is given positive number, and $\bigtriangleup x$ is a random variable that takes values $\pm\bigtriangleup h$ . Figure 1.1 illustrate this with time marching downward and position shown horizontally. So the mean and variance of $\bigtriangleup x$ are</p><script type="math/tex; mode=display">\begin{align}E[\bigtriangleup x] & =p\bigtriangleup h+q(-\bigtriangleup h)=(p-q)\bigtriangleup h    \tag{2} \\  Var[\bigtriangleup x] & =E[(\bigtriangleup h)^{2}]-(E[\bigtriangleup x])^{2}\nonumber \\ & =4pq(\bigtriangleup h)^{2} \tag{3}    \end{align}</script><p>A time interval of length $t$ has $n=t/\bigtriangleup t$ such discrete steps. Since the successive steps of the random walk are independent, the cumulated change $(x_{t}-x_{0})$ is a binominal variate with mean</p><script type="math/tex; mode=display">n(p-q)\bigtriangleup h=(p-q)\bigtriangleup h\cdot t/\bigtriangleup t</script><p>and variance</p><script type="math/tex; mode=display">4npq(\bigtriangleup h)^{2}=4pq(\bigtriangleup h)^{2}\cdot t/\bigtriangleup t</script><p>(Recall the relation between Bernoulli distribution and Binomial distribution) Remember the binomial distribution, a ’success’ in any one trial counts as 1 and occurs with probability p, while a failure counts as 0 and occurs with probability $q=1-p$. The (random) number of successes in $n$ independent trials has expectation $np$ and variance $npq$. So back to this problem, now the success counts as $\bigtriangleup h$ and failure as $-\bigtriangleup h$. Now set</p><script type="math/tex; mode=display">\bigtriangleup h=\sigma\sqrt{\bigtriangleup t} \ \ (4)​</script><p>and</p><script type="math/tex; mode=display">p=\frac{1}{2}[1+\frac{\mu}{\sigma}\sqrt{\bigtriangleup t}],\ \ q=\frac{1}{2}[1-\frac{\mu}{\sigma}\sqrt{\bigtriangleup t}] \ \ (5)</script><p>or</p><script type="math/tex; mode=display">p=\frac{1}{2}[1+\frac{\mu}{\sigma^{2}}\sqrt{\bigtriangleup t}],\ \ q=\frac{1}{2}[1-\frac{\mu}{\sigma^{2}}\sqrt{\bigtriangleup t}]</script><p>Then</p><script type="math/tex; mode=display">4pq=1-\left(\frac{\mu}{\sigma}\right)^{2}\bigtriangleup t</script><p>Substitute these into the above expression. and let $\bigtriangleup t$ go to zero. Then the Binomial distribution converges to the normal, with mean</p><script type="math/tex; mode=display">t\frac{\mu}{\sigma^{2}}\bigtriangleup h\frac{\bigtriangleup h}{\bigtriangleup t}=\mu t</script><p>and variance <script type="math/tex">t[1-\left(\frac{\mu}{\sigma}\right)^{2}\bigtriangleup t]\frac{\sigma^{2}\bigtriangleup t}{\bigtriangleup t}\rightarrow\sigma^{2}t</script></p><p>Thus we can regard Brownian motion as the limit of the random walk, when the time interval and the space step-ength go to zero together.</p><p>The mean of $(x_{t}-x_{0})$ is $\mu t$ and its standard deviation is $\sigma\sqrt{t}$. For large $t$, we have $\sqrt{t}\ll t$; in the long run, the trend is the dominant determinant of brownian motion. But for small $t$, we have $t\ll\sqrt{t}$, so volatility dominates in the short run.</p><p>Another manifestation of this volatility is seen by calculating the expected length of a path. We have</p><script type="math/tex; mode=display">E(|\bigtriangleup x|)=\bigtriangleup h</script><p>so the total expectedd length of the path over time interval from $0$ to $t$ is</p><script type="math/tex; mode=display">t\bigtriangleup h/\bigtriangleup t=t\sigma/\sqrt{\bigtriangleup t}\rightarrow\infty</script><p>as $\bigtriangleup t$ goes to zero. For small but finite $\bigtriangleup t$, the total length of almost all sample path is very large. Therefore each path must have many ups and sowns and look very jagged. Most such sample paths are not differentiable. When discussing the expected rate of change, therefore, we must write $E[dx]/dt$ not $E[dx/dt]$</p><h2 id="Ito’s-Lemma"><a href="#Ito’s-Lemma" class="headerlink" title="Ito’s Lemma"></a>Ito’s Lemma</h2><p>Suppose $x$ follows Brownian motion with parameters $(\mu,\sigma)$. Consider a stochastic process y that is related to $x$ by $y=f(x)$ where $f$ is a given non-random function. We want to related changes in y to those in x. The rules of conventional calculus suggest writing $dy=f’(x)dx$ and taking expectations. How the changes in x relate to changes in y ? The rules of conventional calculus suggest writing $dy=f’(x)dx$ and taking expectations. <strong>But this turns out to be wrong.</strong> The reason is as follows. Starting at $y_{0}=f(x_{0})$ , consider the position a small amount of time $t$ later.</p><script type="math/tex; mode=display">y_{t}-y_{0}=f'(x_{0})(x_{t}-x_{0})+\frac{1}{2}f''(x_{0})(x_{t}-x_{0})^{2}+...</script><p>Hence</p><script type="math/tex; mode=display">\begin{aligned}E[y{t}-y{0}] & =f'(x{0})E[x{t}-x{0}]+\frac{1}{2}f^{''}(x{0})E[(x{t}-x{0})^{2}]+...\\ & =f'(x{0})\mu t+\frac{1}{2}f^{''}(x{0})[\sigma^{2}t+\mu^{2}t^{2}]+...\\ & =[\mu f'(x{0})+\frac{1}{2}\sigma^{2}f^{''}(x{0})]t+...\end{aligned}</script><p>Note that the second order term in the Taylor expansion of $f(x)$ contributes a term that is not ignorable. The reason is that the variance of the increments of $x$ is linear in t. This is the feature that makes the calculus of Brownian motion so different from the usual calculus of non-random variables. A similar calculation will show that</p><script type="math/tex; mode=display">Var[y_{t}-y_{0}]=f'(x_{0})^{2}\sigma^{2}t+...</script><p>Let $x$ denote a general starting and $y=f(x)$. Consider the infinitesimal increment $dy$ over the next infinitesimal time interval $dt$. We can use the above expression replacing $t$ with $dt$ and ignoreing higher order terms in $dt$. Therefore $dy$ has mean</p><script type="math/tex; mode=display">E[dy]=[f^{'}(x)\mu+\frac{1}{2}f^{''}(x)\sigma^{2}]dt</script><p>and variance</p><script type="math/tex; mode=display">Var[dy]=f'(x)^{2}\sigma^{2}dt</script><p>So $y$ follows the general diffusion process defined by</p><script type="math/tex; mode=display">dy=[f'(x)\mu+\frac{1}{2}f^{''}(x)\sigma^{2}]dt+f'(x)\sigma dw \ \ (6)</script><p>This is Ito Lemma in the form that will prove most useful for the study. A slight generalization is easily available : if $y=f(x,t)$, the Taylor expansion has an addition term in $f_{t}$, and</p><script type="math/tex; mode=display">dy=[f_{x}(x,t)\mu+\frac{1}{2}f_{xx}(x,t)\sigma^{2}+f_{t}(x,t)]dt+f_{x}(x,t)\sigma dw \ \ (7)</script><p>For a simple intuition, return to the discrete random walk formulation, and suppose $x$ ahs zeros trend, so $p=q=\frac{1}{2}$. Now $E[\bigtriangleup x]=0$ and as time passes the distribution of $x$ merely spreads out with linearly increasing variance around an unchanging mean. From the standard intution of risk -aversion , or Jensen’s inequality, we know the sign of $E[\bigtriangleup y]$ will be negative if $f$ is concave and positive if $f$ is convex.</p><p><img src="/pic/continue_time/fig2.png" alt="image"></p><h2 id="GEometric-Brownian-motion"><a href="#GEometric-Brownian-motion" class="headerlink" title="GEometric Brownian motion"></a>GEometric Brownian motion</h2><p>Now suppose x follows the Brownian motion, and let $X=e^{x}$. Ito’s Lemma gives</p><script type="math/tex; mode=display">E[dX]=[e^{x}\mu+\frac{1}{2}e^{x}\sigma^{2}]dt=X[\mu+\frac{1}{2}\sigma^{2}]dt</script><p>and <script type="math/tex">Var(dX)=[e^{x}]^{2}\sigma^{2}dt=X^{2}\sigma^{2}dt</script></p><p>Therefore the process of $X$ can be written</p><script type="math/tex; mode=display">dX/X=[\mu+\frac{1}{2}\sigma^{2}]dt+\sigma dw</script><p>This is called the geometric or proportional Brownian motion. It provides a good first approximation of the dynamics of exchange rates, prices of natural resources, and more generally many asset prices.</p><p>Conversely, if $X$ follows the geometric Brownian motion</p><script type="math/tex; mode=display">dX/X=vdt+\sigma dz  \ \ (8)</script><p>then using Ito’s Lemma we find that $x=\ln X$ follows the ordinary or absolute Brownian motion</p><script type="math/tex; mode=display">dx=[v-\frac{1}{2}\sigma^{2}]dt+\sigma dw</script><p>Notice that $d\text{\ensuremath{\ln}}x\neq dX/X$ . Suppose $X$ follows geometric Brownian motion (8) with the known position $X_{0}$ , with the relation of $x=\ln X$ we finally can get</p><script type="math/tex; mode=display">E(X_{t})=\exp(x_{0}+\mu t+\frac{1}{2}\sigma^{2}t)=X_{0}e^{vt}</script><p>Since exponential is a convex function, therefore</p><script type="math/tex; mode=display">E[X_{t}]=E[\exp x_{t}]>\exp E[x_{t}]=\exp(x_{0}+\mu t)</script><h2 id="Some-generalizations"><a href="#Some-generalizations" class="headerlink" title="Some generalizations"></a>Some generalizations</h2><p>If the trend and volatility coefficients are functions of the current state ($x$), this is often called a <strong>diffusion process.</strong>When they are functions of time as well, it is sometimes called an <strong>Ito process</strong>.</p><script type="math/tex; mode=display">dx=\mu(x,t)dt+\sigma(x,t)dw \ \ (9)</script><p>By the defintion of diffiusion process, we can see that (8) geometric brownian motion is a special case of diffusion process</p><script type="math/tex; mode=display">dX=\mu Xdt+\sigma Xdw</script><p>In come cases, we may need processes that revert toward some central level $\bar{x}$ of the state variable</p><script type="math/tex; mode=display">dx=-\theta(x-\bar{x})dt+\sigma dw \ \ (10)</script><p>where $\theta$ is some positive constant.</p><p>Also, several variabes $x_{i}$ for $i=1,2,..m$ may follow Brownian motion, their volatility components being linear combinations of independent standard Wiener processes $w_{j}$ for $j=1,2,…n$</p><script type="math/tex; mode=display">dx_{i}=\mu_{i}dt+\sum_{j=1}^{n}a_{ij}dw_{j}</script><p>Then</p><script type="math/tex; mode=display">\begin{aligned}E[dx{i}]      & =\mu{i}dt \\Var[dx_{i}] &=\sum_{j=1}^{n}(a{ij})^{2}dt \\ Cov[dx_{i},dx_{k}]&=\sum_{j=1}^{n}a_{ij}a_{kj}dt\end{aligned}</script><p>Such multi-variable processes are important in financial economics.</p><h1 id="Discounted-Present-Values"><a href="#Discounted-Present-Values" class="headerlink" title="Discounted Present Values"></a>Discounted Present Values</h1><p>Now we can move to some real economic examples. First let’s consider an economic unit, such as a firm , in a dynamic stochastic setting. Its state at time $t$ is given by a state variable $x_{t}$ that follows a Brownian motion with exogenous parameters $\mu$ and $\sigma$. There is a net flow payoff $f(x_{t})$ , such as profit or dividend, that depends on the state $x_{t}$. The expected present value $F(x)$ of the payoff starting at a given initial position $x_{0}=x,$and using an exogenously specified discout rate $\rho$, is defined by</p><script type="math/tex; mode=display">F(x)=E\{\int_{0}^{\infty}f(x_{t})e^{-\rho t}dt|x_{0}=x\} \ \ (11)</script><p>Ultimately we will be interested in controlling or regulating the motion of $x_{t}$to optimize such expected present values net of the cost of control. To this end, we begin by evaluating $F(x)$ explicitly when $f(x)$ has some particularly simple functional forms such as exponentials and polynomial. Then we can get power series expression for $F(x)$ when $f(x)$ is any analytic function.</p><h2 id="Prensent-value-for-exponential-and-polynomials"><a href="#Prensent-value-for-exponential-and-polynomials" class="headerlink" title="Prensent value for exponential and polynomials"></a>Prensent value for exponential and polynomials</h2><p>First we conside the special case when the flow payoff has the form</p><script type="math/tex; mode=display">f(x)=\exp(\lambda x)</script><p>The discounted present value $F(x)$ will be finite when $\lambda$ is in a certain range. Starting from the initial value $x_{0}=x$ , $x_{t}$ at time $t$ has a normal distribution with mean $(x+\mu t)$ and variance $\sigma^{2}t$. Then</p><script type="math/tex; mode=display">E[exp(\lambda x_{t})|x_{0}=x]=\exp[\lambda(x+\mu t)+\frac{1}{2}\lambda^{2}\sigma^{2}t]</script><p>How to get the above expression, Here is the illustrative example. Suppose a random variable $x$ is normal with mean$m$and std $s$</p><script type="math/tex; mode=display">\begin{aligned}E[\exp(\lambda x)] & =\frac{1}{s\sqrt{2\pi}}\int_{-\infty}^{\infty}\exp(\lambda x)\exp\left[-\frac{(x-m)^{2}}{2s^{2}}\right]dx\nonumber \\ & =\frac{\exp(\lambda m)}{s\sqrt{2\pi}}\int_{-\infty}^{\infty}\exp(\lambda y-\frac{y^{2}}{2s^{2}})dy\ y=x-m\nonumber \\ & =\frac{\exp(\lambda m+\frac{1}{2}\lambda^{2}s^{2})}{s\sqrt{2\pi}}\int_{-\infty}^{\infty}\exp\left[-\frac{(y-\lambda s^{2})^{2}}{2s^{2}}\right]dy\nonumber \\ & =\exp[\lambda m+\frac{1}{2}\lambda^{2}s^{2}]  \ \ (12) \end{aligned}</script><p>Now we have the present value of$F(x)$</p><script type="math/tex; mode=display">\begin{aligned}F(x) & =\int{0}^{\infty}E[exp(\lambda x{t})|x_{0}=x]\exp(-\rho t)dt\nonumber \\ & =\exp(\lambda x)\int_{0}^{\infty}\exp[\lambda\mu t+\frac{1}{2}\lambda^{2}\sigma^{2}t]dt\nonumber \\ & =\exp(\lambda x)/(\rho-\lambda\mu-\frac{1}{2}\lambda^{2}\sigma^{2}) \ \ (13) \end{aligned}</script><p>The intergal converges provided the denominator is positive. To describe the convergence property, it is useful to give a uniforma notation and interpretation at the outset.</p><script type="math/tex; mode=display">\phi(\xi)=\rho-\xi\mu-\frac{1}{2}\xi^{2}\sigma^{2} \ \ (14)</script><p>Labed as the Fundamental Quadratic of Brownian Motion</p><p><img src="/pic/continue_time/fig3.png" alt="image"></p><p>The condition for the convergence of the integral in (11) amounts to requiring that $\lambda$lies in the interval $(-\alpha,\beta)$ This includes $\lambda=0$ .</p><p>We can use the formula 11 to derive an expression for $F(x)$ when $f(x)$ in any integer power $x^{n}$. For exponential flow function</p><script type="math/tex; mode=display">\begin{matrix}F(x) & =E[\int_{0}^{\infty}\sum_{n=0}^{\infty}\frac{1}{n!}(\lambda x{t})^{n}e^{-\rho t}dt|x_{0}=x]\\ & =\sum_{n=0}^{\infty}\frac{\lambda^{n}}{n!}E[\int_{0}^{\infty}x{t}^{n}e^{-\rho t}dt|x_{0}=x] \end{matrix}</script><script type="math/tex; mode=display">\begin{aligned}\exp(\lambda x) & =\sum_{k=0}^{\infty}\frac{1}{n!}\lambda^{n}x^{n}\\[\rho-\mu\lambda-\frac{1}{2}\sigma^{2}\lambda^{2}]^{-1} & =\frac{1}{\rho}\sum_{n=0}^{\infty}\rho^{-n}(\mu\lambda+\frac{1}{2}\sigma^{2}\lambda^{2})^{n}\end{aligned}</script><p>For each power of $x​$ we write out first two, and rest follows same tedious calcualtion</p><script type="math/tex; mode=display">\begin{aligned}E\{\int_{0}^{\infty}x{t}e^{-\rho t}dt \} & =\frac{\mu}{\rho^{2}}+\frac{x}{\rho} \ \ (15)  \\ E\{ \int_{0}^{\infty}x{t}^{2}e^{-\rho t}dt \} & =[\frac{\sigma^{2}}{\rho^{2}}+\frac{2\mu^{2}}{\rho^{3}}]+\frac{2\mu x}{\rho^{2}}+\frac{x^{2}}{\rho} \ \ (16)\end{aligned}</script><p>Finally consider any analytic $f(x)$ with the power series representation</p><script type="math/tex; mode=display">f(x)=\sum_{n=0}^{\infty}f_{n}(x^{n})</script><p>assumed uniformly convergent for all $x$. Having found the expected present values of all integer powers, we can integrate term by term to find the $F(x)$ corresponding to this analytic $f(x)$. Thus we can in-principle complete the calculation of present values for most common functions of Brownian motion.</p><h2 id="Present-values-for-powers-of-geometric-Brownian-motion"><a href="#Present-values-for-powers-of-geometric-Brownian-motion" class="headerlink" title="Present values for powers of geometric Brownian motion"></a>Present values for powers of geometric Brownian motion</h2><p>Next suppose $X$ follows the geometric brownian motion,</p><script type="math/tex; mode=display">dX/X=vdt+\sigma dw</script><p>We want to find the expected present value when flow payoff is $g(X)=X^{\lambda}$. Note that $x=\ln(X)$ follows the Brownian motion</p><script type="math/tex; mode=display">dx=(v-\frac{1}{2}\sigma^{2})dt+\sigma dw</script><p>and $X^{\lambda}=\exp(\lambda x)$ , we have</p><script type="math/tex; mode=display">\begin{aligned}E{\int_{0}^{\infty}X_{t}^{\lambda}e^{-\rho t}dt} & =\exp(\lambda x)/[\rho-(v-\frac{1}{2}\sigma^{2})\lambda-\frac{1}{2}\sigma^{2}\lambda^{2}]\\ & =X^{\lambda}/[\rho-v\lambda-\frac{1}{2}\sigma^{2}\lambda(\lambda-1)]  \ \ (17) \end{aligned}</script><p>The above will converge as long as denominator is positive. So the convergence condition is now defined as</p><script type="math/tex; mode=display">\psi(\xi)=\rho-v\xi-\frac{1}{2}\sigma^{2}\xi(\xi-1) \ \ (18)</script><p>two economically natural assumption that $\rho&gt;0$ and $\rho&gt;v$ guarantee the roots of above equation $-\gamma<0$ and="" $\delta="">1$ . Similarly, $\lambda$ should lie in the interval $(-\gamma,\delta)$.</0$></p><p>For $Y=X^{\lambda}$, we have</p><script type="math/tex; mode=display">dY/Y=[\lambda v+\frac{1}{2}\lambda(\lambda-1)\sigma^{2}]dt+\lambda\sigma dw</script><p>For the convergence of the expected present value of $Y$, the discount rate must exceed the trend growth rate of $Y$ which is $\psi(\lambda)&gt;0$ And for the relation between absolute and geometric Brownian motion, if $x=\ln X$, we have that $\mu=v-\frac{1}{2}\sigma^{2}$</p><script type="math/tex; mode=display">\begin{aligned}\psi(\xi) & =\rho-(\mu+\frac{1}{2}\sigma^{2})\xi-\frac{1}{2}\sigma^{2}\xi(\xi-1)\\ & =\rho-\mu\xi-\frac{1}{2}\sigma^{2}\xi^{2} \\ & =\phi(\xi)\end{aligned}</script><p>And then the roots will also correspond ,with $\alpha=\gamma$ and $\beta=\delta$</p><h2 id="A-basic-differential-equation-for-present-value"><a href="#A-basic-differential-equation-for-present-value" class="headerlink" title="A basic differential equation for present value"></a>A basic differential equation for present value</h2><p>Now let us return to absolute Brownian motion $x$ and the flow payoff $f(x)$ , and consider an alternative characterization of the expected present value $F(x)$. Here we just want to use an alternative method to split the $F(x)$ integral into the contribution over the initial infinitesimal time interval from $0$ to $dt$ and the integral from $dt$ to $\infty$. Why we want to do this? Because through this we can get basic differential equation for $F(x)$</p><p>Note that start from $x+dx$ we need take discount value back to time $t=0$ . So we have</p><script type="math/tex; mode=display">F(x)=f(x)dt+e^{-\rho dt}E[F(x+dx)]</script><p>Note that this is already an approximation in regarding $f(x)$ as constant over the small interval $dt$. the resulting error in $f(x)dt$ is of order $dt^{2}$. We further simplify the expression and get</p><script type="math/tex; mode=display">\begin{aligned}F(x) & =f(x)dt+(1-\rho dt)(F(x)+[E[F(x+dx)]-F(x)])\\ & =f(x)dt+F(x)-\rho F(x)dt+[E[F(x+dx)]-F(x)] \end{aligned}</script><p>Therefore</p><script type="math/tex; mode=display">\begin{aligned}\rho F(x)dt & =f(x)dt+[E[F(x+dx)]-F(x)]\nonumber \\ & =f(x)dt+E[dF] \ \ (19) \end{aligned}</script><p>The above is the <strong>arbitrary equation.</strong> Think of the entitlement to the flow payoffs as a capital asset; $F(x)$ is its value. Contemplate holding this asset over the period $(t,t+dt)$. This yields a dividend $f(x)dt$, and an expected capital gain $E[dF]$. The sum of these two should equal the normal return $\rho F(x)dt$</p><p>By Ito Lemma, (previous) <script type="math/tex">E[dF]=\mu F^{'}(x)dt+\frac{1}{2}\sigma^{2}F^{''}(x)dt</script></p><p>Substituting into (15) and dividing by $dt$, we get</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}F^{''}(x)+\mu F^{'}(x)-\rho F(x)+f(x)=0 \ \ (20)</script><h2 id="Derivation-by-discrete-approximation"><a href="#Derivation-by-discrete-approximation" class="headerlink" title="Derivation by discrete approximation"></a>Derivation by discrete approximation</h2><p>We regarded Brownian motion as the limit of a discrete random walk, and we can also derive the differential equation (16) by that approach.</p><p>Label the discrete points in the $x$ space by $i$ , and the discrete time periods by $j$. Let $i_{j}$ denote the position of the particle at time $j$; future positions are of course random variables given our initial information at $j=0$. Then the expected present value can be written as</p><script type="math/tex; mode=display">F(i)=E\left\{ \sum_{j=0}^{\infty}f(i_{j})\bigtriangleup te^{-j\rho\bigtriangleup t}|i_{0}=i\right\}</script><p>After the first step, the same problem restarts with a new initial state $i_{1}$, which from the time $0$ perspective can be either $(i+1)$ with probability $p$ or $(i-1)$ with probability $q$. Thus the expectation on the right hand side becomes</p><script type="math/tex; mode=display">F(i)=f(i)\bigtriangleup t+e^{-\rho\bigtriangleup t}[pF(i+1)+qF(i-1)]</script><p>Now expand the right hand side, ignoring terms of higher order than $\bigtriangleup t.$ Note that</p><script type="math/tex; mode=display">e^{-\rho\bigtriangleup t}=1-\rho\bigtriangleup t+...</script><p>Next , we reuse the definite of (5) of $p$ and $q$ and the relation (4) between the stepsize $\bigtriangleup h$ and the time interval $\bigtriangleup t$ we can get</p><script type="math/tex; mode=display">\begin{aligned}pF(i+1)+qF(i-1) & =\frac{1}{2}[1+(\mu/\sigma)\sqrt{\bigtriangleup t}]F(x+\bigtriangleup h)\\ & \ \ +\frac{1}{2}[1-(\mu/\sigma)\sqrt{\bigtriangleup t}]F(x-\bigtriangleup h)\\ & =\frac{1}{2}[1+(\mu/\sigma)\sqrt{\bigtriangleup t}][F(x)+F^{'}(x)\bigtriangleup h\\ & \ \ +F^{''}(x)(\bigtriangleup h)^{2}+... ] \\ & =\frac{1}{2}[1+(\mu/\sigma)\sqrt{\bigtriangleup t}][F(x)-F^{'}(x)\bigtriangleup h+\\ & \ \ +F^{''}(x)(\bigtriangleup h)^{2}+... ] \\ & =F(x)+\mu F^{'}(x)\bigtriangleup t+\frac{1}{2}\sigma^{2}F^{''}(x)\bigtriangleup t+...\end{aligned}</script><p>Substituting and simplifying yield the same equation (the above equation) as (16)</p><script type="math/tex; mode=display">F(i)=f(i)\bigtriangleup t+e^{-\rho\bigtriangleup t}+[1-\rho\bigtriangleup t][...]</script><h2 id="The-general-solution"><a href="#The-general-solution" class="headerlink" title="The general solution"></a>The general solution</h2><p>This part tells how to solve the second order differential equation. The differential equation (16) is linear. Therefore its general solution is the sum of two parts: any solution of the equation as a whole (particular integral) and the general solution of the homogeneous part of the equation with the term $f(x)$ omitted (the complementary function)<sup><a href="#fn_1" id="reffn_1">1</a></sup>.</p><p>To find the complementary function, write the homogeneous part of the equation:</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}F^{''}(x)+\mu F^{'}(x)-\rho F(x)=0</script><p>Its general solution can be expressed as a linear combination of two independent solution. For instance, if we try solutions ofthe form $\exp(\xi x),$we get <script type="math/tex">\exp(\xi x)[\frac{1}{2}\sigma^{2}\xi^{2}+\mu\xi-\rho]=0</script></p><p>Since the exponential is always positive, this holds if and only if</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}\xi^{2}+\mu\xi-\rho=0</script><p>This is just $\phi(\xi)$ introduced above. So $\xi$ must equal $-\alpha$ or $\beta$ the two roots. The two roots are distinct. They have opposite signs. The two solutions $e^{-\alpha x}$and $e^{\beta x}$ are independent and the general solution is</p><script type="math/tex; mode=display">Ae^{-\alpha x}+Be^{\beta x} \ \ (21)</script><p>where $A$ and $B$ are undetermined constants.</p><p>Finding a particular solution to the full equation (16) is often an art (with lucky) , but for the exponential and polynomial forms we tried before, there are obvious choice.</p><p>Begin with the exponential case. When $f(x)=exp(\lambda x)$ the form $F(x)=K\exp(\lambda x)$ suggest itself</p><script type="math/tex; mode=display">K(\frac{1}{2}\sigma^{2}\lambda^{2}+\mu\lambda-\rho)\exp(\lambda x)+\exp(\lambda x)=0</script><p>we get <script type="math/tex">K=1/\phi(\lambda)</script></p><p>Combining this particular solution and the earlier complementary function, the general solution for the expected present value in the exponential case becomes</p><script type="math/tex; mode=display">F(x)=\frac{1}{\phi(\lambda)}e^{\lambda x}+Ae^{-\alpha x}+Be^{\beta x} \ \ (22)</script><p>In fact, a simple argument shows that when the flow $f(x)$ is the exponential $exp(\lambda x)$ the expected present values $F(x)$ must be a multiple of $\exp(\lambda x)$. To give a formal argument, define $y_{t}=x_{t}-h$ and consider the stochastic process $y_{t}$</p><script type="math/tex; mode=display">dy=dx=\mu dt+\sigma dw</script><p>and the initial position $y_{0}=(x+h)-h=x$. The flow benefit can be written</p><script type="math/tex; mode=display">F(x+h)=e^{\lambda x_{t}}=e^{\lambda h}e^{\lambda y_{t}}=e^{\lambda h}f(y_{t})</script><p>Integrating over time and taking expectation, we get</p><script type="math/tex; mode=display">F(x+h)=e^{\lambda h}E\left\{ \int_{0}^{\infty}f(y_{t})e^{-\rho t}dt|y_{0}=x\right\}</script><p>Subtracting $F(x)$ from both side, dividing by $h$, and letting $h$ go to zero, we get</p><script type="math/tex; mode=display">\lim_{h\rightarrow0}\frac{F(x+h)-F(x)}{h}=\lim_{h\rightarrow0}\frac{\exp(\lambda h)-1}{h}F(x)</script><p>or</p><script type="math/tex; mode=display">F^{'}(x)=\lambda F(x)</script><p>As we can see the genral solution above was a combination of three terms, of which only the first, corresponding to the particular solution we guessed initially, had the right exponential form. Both $A$ and $B$ are zero. In the same way we can guess similar form of functions.</p><p>Now consider the polynomial case. When $f(x)=x^{n}$ for a positive integer $n$ , a natural guess for the particular integral is</p><script type="math/tex; mode=display">F(x)=\sum_{m=0}^{n}a_{m}x^{m} \ \ (23)</script><p>Substituting this in $16$ we can get</p><script type="math/tex; mode=display">\begin{aligned}\frac{1}{2}\sigma^{2}\sum_{m=2}^{n}m(m-1)a_{m}x^{m-2}+\mu\sum_{m=1}^{n}ma_{m}x^{m-1} \\-\rho\sum_{m=0}^{n}a_{m}x^{m}+x^{m} & =0\end{aligned}</script><p>Collecting like powers of $x​$ together and equating the coefficient of each separately to zero since the equation must hold as an identity in $x​$ , we find</p><script type="math/tex; mode=display">a_{n}=\frac{1}{\rho},a_{n-1}=n\mu/\rho^{2}</script><p>and for $m=0,1,2,…(n-2)$ the recursive relation</p><script type="math/tex; mode=display">\rho a_{m}=(m+1)\mu a_{m+1}+\frac{1}{2}(m+1)(m+2)\sigma^{2}a_{m+2} \ \ (24)</script><p>This determines all the coefficients $a_{m}​$. Once again we can verify that the expected present value cannot have any contribution from the exponential of the complementary function. So (18) is the full solution.</p><h2 id="Differential-equation-for-the-geometric-Brownian-motion"><a href="#Differential-equation-for-the-geometric-Brownian-motion" class="headerlink" title="Differential equation for the geometric Brownian motion"></a>Differential equation for the geometric Brownian motion</h2><p>Now we turn again to geometric Brownian motion. Given a flow cost function $g(X)$, we want to find</p><script type="math/tex; mode=display">G(X)=E\left\{ \int_{0}^{\infty}g(X_{t})e^{-\rho t}dt|X_{0}=X\right\} \ \ (25)</script><p>Proceeding exactly as before, we get the arbitrage equation</p><script type="math/tex; mode=display">pG(X)dt=g(X)dt+E[dG]</script><p>and Ito Lemma gives</p><script type="math/tex; mode=display">E[dG]=vXG'(X)dt+\frac{1}{2}(\sigma X)^{2}G^{''}(X)dt</script><p>Therefore the basic differential equation for the case of geometric Brownian motion is</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}X^{2}G^{''}(X)+vXG^{'}(X)-\rho G(X)+g(X)=0 \ \ (26)</script><p>The complementary function is easily seen to be</p><script type="math/tex; mode=display">CX^{-\gamma}+DX^{\delta} \ \ (27)</script><p>The same argument as before. Once agian the particular integral must be guessed. Previously we considered $g(X)=X^{\lambda}$ and natural guess for this is $G(X)=KX^{\lambda}$. Substituting into (20) we find</p><script type="math/tex; mode=display">K=1/\psi(\lambda)</script><p>where $\psi(\lambda)$ is the fundamental quadratic for the geometric case. An argument similar to what we made above, the full solution is jsut the particular integral we guessed ; $C$ and $D$ are both zero.</p><p>We can change variables to transform geometric Brownian motion into an absolute one, and this gives an alternative way to find expected present values. Define $x=\ln X$ and $\mu=v-\frac{1}{2}\sigma^{2}$ . Let $f(x)=g(e^{x})$ $G(X)=F(\ln(X))$ . We will</p><script type="math/tex; mode=display">F'(x)=e^{x}G'(e^{x})=XG'(X)</script><p>and</p><script type="math/tex; mode=display">F^{''}(x)=(e^{x})^{2}G^{''}(e^{x})+e^{x}G^{'}(e^{x})=X^{2}G^{''}(X)+XG^{'}(X)</script><p>Substitution in (16) we find</p><script type="math/tex; mode=display">0=\frac{1}{2}\sigma^{2}X^{2}G^{''}(X)+vXG^{'}(X)-\rho G(X)+g(X)</script><p>which is just (20). The two approaches are mutually consistent.</p><h2 id="General-diffusion-process"><a href="#General-diffusion-process" class="headerlink" title="General diffusion process"></a>General diffusion process</h2><p>If X follows the general diffusion process (9) rather than the simple Brownian motion (1), the expected value function $F(x)$ and the flow function $f(x)$ are linked by a differential equation that is a natural generalization of (16) namely</p><script type="math/tex; mode=display">\frac{1}{2}\sigma(x)^{2}F^{''}(x)+\mu(x)F^{'}(x)-\rho F(x)+f(x)=0 \ \ (28)</script><p>Unfortunately, this time the solution is not the corresponding simple. The complementary function is specific to each case depending on the functional form of $\mu(x)$ and $\sigma(x)$. Analytical solution is possible only in very special cases. The geometric case was discussed above. for linearly mean-reverting motion (10) a power series solution related to the Confluent Hypergeometric function is avaibale; an example is developed in 5.1 .</p><p>If $x$ follows the Ito process (9) whose parameters depend on time as well as the state $x$, or if the flow payoff is a function $f(x,t)$ like wise, or the process ends at a given time $T$ so the time remaining to the end of the horizon matters, then we must allow the expected present value to depend on time too. The basic equation becomes a partial differential equation</p><script type="math/tex; mode=display">\frac{1}{2}\sigma(x,t)^{2}F_{xx}(x,t)+\mu(x,t)F_{x}(x,t)-\rho F(x,t)+F_{t}(x,t)+f(x,t) \ \ (29)</script><p>The solution of this is much hard, and typically needs numerical methods.</p><h1 id="Barriers"><a href="#Barriers" class="headerlink" title="Barriers"></a>Barriers</h1><p>The above discussion assumed that the Brownian motion particle $x$ (absolute case) was free to range over the entire real line $(-\infty,+\infty)$. Similarly, in the case of geometric Brownian motion $X$ could range over $(0,\infty)$. In practice there are restrictions on the range. For example the output price facing one firm in a competitive industry is bounded above, because <strong>new firm will enter if the price rises beyond a certain point</strong>. Other cases the restrictions are exogenously imposed, as in the case of <strong>a government-imposed agricultural price floor</strong>. Finally, and most important for our purpose here, the restrictions arise endogenously through <strong>purposive optimal control of the stochastic propose</strong>.</p><p>In this section, the book will start with some specified restrictions on the process, and show how their effects on expected present values can be computed. The restrictions are called <em>barriers</em>. They can constrain upward or downward movement of $x$ , and are of two types, <em>absorbing</em> and <em>reflecting</em>.</p><p>at $b$ means that the process $(1)$ is allowed to proceed unhindered so long as $x_{t}&lt;b$, but if ever $x_{t}=b$, the process is terminated. That might be the end of our planning horizon, or merely the end of the movement of $x$, <strong>so that it remains at $b$ for ever after</strong>. Sometimes such an absorbed process might be immediately restarted at a point $c&lt;b$. Lower and two sided absorbing barriers are defined in obvious ways.</p><p>at $b$ means that the process $(1)$ is allowed to proceed unhindered so long as $x_{t}&lt;b$, but if ever $x_{t}=b$, and the next increment $dx$ is positive, then the sign of this increment is reversed, as if the particle were reflected in a mirror placed at $b$. Once again, lower and two-sided barriers are defined analogously. We can even have an absorbing barrier on one side and a reflecting barrier on the other side.</p><p>Now consider a process with barriers for $x$, take a flow payoff function $f(x)$, and define the expected present value function $F(x)$ as in (20). When there wre no barriers, we took two approaches to finding $F(x)$. The first approach was direct. The distribution of $x_{t}$ given $x_{0}$ was known and simple, namely normal, so expected values of functions of $x_{t}$ could be found relatively easily. When there are barriers, between the starting time $0$ and the instant in question $t$ the particle might have been reflected at barriers any numer of times, or been absorbed with positive probability. The distribution of $x_{t}$ conditional on $x_{0}$ is much more complicated. This would be discussed in section 6.3. The second and indirect approach proves simpler. We show that $F(x)$ satisfies the same basic differential equation in the interior of the region of variation of $x$, and certain end-point conditions at the barriers. Finding $F(x)$ then amounts to solving the differential equations subject to the end-point conditions.</p><h2 id="Basic-differential-equation"><a href="#Basic-differential-equation" class="headerlink" title="Basic differential equation"></a>Basic differential equation</h2><p>Suppose the process moves between barriers located at $a$ and $b$. For the moment it makes no difference whether the barriers are reflecting or absorbing, and $a=-\infty,b=\infty$ are permissible. Choosing the initial point $x_{0}=x$ in the interior of the range $[a,b]$. Over an infinitesimal time interval $dt$ , the probability of $x_{t}$, reaching either barrier is negligible. Therefore the arbitrage argument of section 2.3 remains valid, and the basic differential equation (20) holds. The derivation of section 2.4, based on discretization of the $x$ space, is also valid so long as the length of each step $\bigtriangleup h$ is chosen sufficiently small.</p><p>Even when the process has barriers, the flow function $f(x)$ is genrally defined over the full unrestricted range $(-\infty,+\infty)$ of the $x$ space. Even if it is not, we can extend its definition in some simpleway over the full range. Let $F_{0}(x)$ denote the expected present value of $f(x_{t})$ as defined in 2.1 above, and computed ignoring the barriers. Then we can follow previous procedure to calculate $F_{0}(x)$ for any analytic functions $f(x)$.</p><p>Our choice of $F_{0}(x)$, the expected present value ignoring barriers, as the particular integral gives a very nnice economic interpretation to the solution. Since the particular integral is what the expected present value would have been in the absence of barriers, the remaining part, n<strong>amely the complementary function, must equal the effect of the barriers</strong>. For example, a price ceiling cuts off the upside profit potential of a firm; its effect is simply captured by the appropriate term in the complementary function. This actually tells us that it is the complementary function that exercise such control.</p><p>Recalling the form (21) of the complementary function.</p><script type="math/tex; mode=display">F(x)=F_{0}(x)+Ae^{-\alpha x}+Be^{\beta x} \ \ (30)</script><p>The constants $A$ and $B$ must be determined using some other conditions on the problem. This is where the barriers come into play.</p><p>If $x$ is free to range over the entire line $(-\infty,+\infty)$ , we already know that $F(x)=F_{0}(x)$. Then $A$ and $B$ must both be zero.</p><p>If $x$ is not restricted on the lower side, but has an upper barrier at $b$, then we can get some information by considering what happens for very large negative values of $x$. Starting from such a value, the particle is unlikely to reach $b$ in any reasonable future time. Then the unrestricted expected present value $F_{0}(x)$ should be a good approximation for $F(X)$. But with $\alpha&gt;0,\ e^{-\alpha x}$ goes to $\infty$ as x goes to $-\infty$. This would spoil the desired approximation unless $A=0$. Thus we have determined one of the constants. The other, $B$, is fixed using end-point conditions at the barrier $b$, which we will examine shortly.</p><p>Similarly, if $x$ has a only lower barrier at $a$, then the inspection of $F(x)$ as $x$ goes to $\infty$gives $B=0$, while $A$ is fixed by conditions at the barrier. If there are barriers on both sides, then both $A$ and $B$ are fixed by the end-point conditions at the barriers.</p><h2 id="Geometric-Brownian-motion"><a href="#Geometric-Brownian-motion" class="headerlink" title="Geometric Brownian motion"></a>Geometric Brownian motion</h2><p>Now suppose the underling variable is $X$, and it follows the proportional or geometric Brownian motion 1.8, with barriers at $c$ and $d$. Let the flow function be $g(X)$. Extending its definition outside the bariers to the full range $(0,\infty)$ of $X$ if necessary, following the similar setup as above 3.1, let $G_{0}(X)$ satisfies the basic differential equation 2.16 for geometic Brownian motion, and serves as a particular integral over the restricted range $(c,d)$ Then general solution is</p><script type="math/tex; mode=display">G(X)=G_{0}(X)+CX^{-\gamma}+DX^{\delta} \ \ (31)</script><p>$-\gamma$ and $\delta$ are the roots of the fundamental quadratic (27), and $C,D$ are constants to be determined by conditions that apply at the barriers .</p><h2 id="Stopping"><a href="#Stopping" class="headerlink" title="Stopping"></a>Stopping</h2><p>Now let us return to the case of absolute Brownian motion, and begin the analysis of barriers, starting with an upper absorbing barrier.Suppose the barrier is placed at $b$. To set the stage for subsequent analysis of control, allow an exogenous terminal payoff $W(b)$. If x stays for ever at b after absorption, $W(b)$ may simply be the capitalized value of the constant flow payoff, $f(b)/\rho$. But other interpretations are also possible. If a cost $k$ must be paid at the instant of absorption, we simply subtract if from $W(b)$ to make it $W(b)-k$.</p><p>The expression (2.1) for the expected present value must be modified to take account of the barrier and the terminal payoff.</p><script type="math/tex; mode=display">F(X)=E\left\{ \int_{0}^{t(b)}f(x_{t})e^{-\rho t}dt+e^{-\rho(b)}W(b)|x_{0}=x\right\} \ \ (32)</script><p>where $t(b)$ is the first time the process reaches $b$ starting at $x$, and of course it is a random variable given the initial information.</p><p>To find the conditions that hold at the barrier, we repeat the arbitrage calculation, but now starting at or near the barrier rather than at an interior point. Revert to the discrete approximation to Brownian motion, with time intervals $\bigtriangleup t$ and steps of length $\bigtriangleup h$. Starting at $(b-\bigtriangleup h)$, we have</p><script type="math/tex; mode=display">F(b-\bigtriangleup h)=f(b-\bigtriangleup h)\bigtriangleup t+(1-\rho\bigtriangleup t)[pW(b)+qF(b-2\bigtriangleup h)]</script><p>Expanding the Taylor series, we get</p><script type="math/tex; mode=display">\begin{aligned}F(b)-F'(b)\bigtriangleup h+... & =f(b)\bigtriangleup t+...+\frac{1}{2}W(b)[1-\rho\bigtriangleup t+...]\\ & +\frac{1}{2}(1-\rho\bigtriangleup t)[F(b)-2F'(b)\bigtriangleup h+...]\end{aligned}</script><p>Collecting terms, dividing by $\bigtriangleup h$ and taking limits, we find</p><script type="math/tex; mode=display">F(b)=W(b) \ \ (33)</script><p>This is sometimes called the Value Matching condition.</p><h2 id="Resetting"><a href="#Resetting" class="headerlink" title="Resetting"></a>Resetting</h2><p>Here the process is allowed to follow (1.1) so long as $x&lt;b$, but the instant $x$ hits $b$, it is reset at $x=c&lt;b$, and the process is restarted. The calculation is as above, except that $F(c)$ replace $W(b)$, and we get a value matching condition $F(c)$ replaces $W(b)$, and we get a value matching condition $F(b)=F(c)$ . If the resetting entailed a cost $k$, this would become $F(b)=F(c)-k$</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>Finally, suppose the process is reflected at an upper barrier $b$. Now starting at $b$ we are sure to go to $(b-\bigtriangleup h)$, so</p><script type="math/tex; mode=display">\begin{aligned}F(b) & =f(b)\bigtriangleup t+(1-\rho\bigtriangleup t)F(b-\bigtriangleup h)\\ & =f(b)\bigtriangleup t+(1-\rho\bigtriangleup t)[F(b)-F'(b)\bigtriangleup h+...]\end{aligned}</script><p>Cancelling $F(b)$ from both sides, the leading term on the right hand side becomes $-F’(b)\bigtriangleup h$; recall that it is of order $\sqrt{\bigtriangleup t}\geq\bigtriangleup t$. Dividing $\bigtriangleup h$ and taking limits gives</p><script type="math/tex; mode=display">F'(b)=0 \ \ (34)</script><p>To repeat the point in a slightly different way, note that starting at $b$, the next step is sure to be downward through the distance $\bigtriangleup h=\sigma\sqrt{\bigtriangleup t}$. If $F’(b)$ were non-zero, this would make $dF=-\sigma\sqrt{\bigtriangleup t}$. The capital gain term in the arbitrage equation (2.9) would be of order $\sqrt{\bigtriangleup t}$. But the normal return and dividend terms are of order $\bigtriangleup t$, and therefore relatively much smaller. Then the arbitrage equation would not hold. This contradiction proves that $F’(b)\neq0$ is impossible.</p><p>Some people call any condiiton that pertains to the first-order derivatives of an expected present value of a function of Brownian motion a Smooth Pasting Condition.</p><p>If reflection is costly, with cost $m$ per unit distance through which the particle is reflected, we substrct $m\bigtriangleup h$ from the right hand side, and the conditon becomes $F’(b)+m=0$ At a lower reflecting barrier, a, similar analysis gives $F’(a)-m=0$.</p><p>Similar conditions for geometric Brownian motion follows.</p><h2 id="Example-price-ceiling"><a href="#Example-price-ceiling" class="headerlink" title="Example: price ceiling"></a>Example: price ceiling</h2><p>Consider a firm that produces a unit of output per unit time. The cost of production is $W$. The price $P$ follows a geometric Brownian motion with parameters $v$ and $\sigma$. In this section I suppose that even when $P$ falls below $W$ so that the operating profit $(P-W)$ is negative, the firm must continue operation. This is sometimes required of public utilities or transport services.</p><p>Begin by supposing that there are no barriers on the price process. Then we can use the formula (26) for $\lambda=0$ and $1$ to get the expected present value of profits.</p><script type="math/tex; mode=display">G_{0}(P)=P/(p-v)-W/\rho \ \ (35)</script><p>Next suppose there is an upper reflecting barrier on the price process at $P=b$. This could be a ceiling imposed by the government, or the method laid out in Section 3., the expression for the expected present value of profit is easily seen to be</p><script type="math/tex; mode=display">G(P)=G_{0}(P)+DP^{\delta} \ \ (36)</script><p>Note that the other term in the complementary function, $CP^{-\gamma}$, must be zero to ensure a finite expected value as $P$ goes to zero. To determine the constant $D$, we use the condition (34), so</p><script type="math/tex; mode=display">G'(b)=\delta Db^{\delta-1}+1/(\rho-v)=0</script><p>Then</p><script type="math/tex; mode=display">D=-b^{1-\delta}/[\delta(\rho-v)]<0</script><p>Comparing the expression (3.6) and (3.7). we see how the ceilling reduces the expected present value of profits by cutting off the upside potential. Substituting for $D$ in (36), we get</p><script type="math/tex; mode=display">G(P)=-\frac{P^{\delta}b^{1-\delta}}{\delta(\rho-v)}+\frac{P}{\rho-v}-\frac{W}{\rho} \ \ (37)</script><h2 id="Example-exchange-rate-target-zones"><a href="#Example-exchange-rate-target-zones" class="headerlink" title="Example: exchange rate target zones"></a>Example: exchange rate target zones</h2><p>The following reduced form model is often used in exchange rate theory. Let $s$ denote the logarithm of the exchange rate, and $x$ the logarithm of the fundamental determinant of it, typically a variable such as money supply or the velocity of circulation of money. Then arbitrage- type considerations establish</p><script type="math/tex; mode=display">s=x+\lambda E[ds]/dt</script><p>where $\lambda$ can be interpreted as the semi-elasticity of money demand. Let $\rho=1/\lambda$. If an explosive bubble path is ruled out, we can integrate (38) to write</p><script type="math/tex; mode=display">s_{0}=\rho\int_{0}^{\infty}x_{t}e^{-\rho t}dt</script><p>This is formally very like theexpected present value expression (20). Suppose $x_{t}$ is a Brownian motion with parameters $\mu=0$ and $\sigma$. Then, using (24), the right hand side of (39) becomes simply $x_{0}$ . In the absence of any bariiers of controls, the exchange rate jsut tracks the fundamentals.</p><p>Next suppose we wish to keep the exchange rate confined to the interval $(-z,z)$. We do this by confining the fundamental process to $(-b,b)$ by means of reflecting barriers at both ends. To see what this does to $s$, write $s=S(x)$ and substitute in (3.9). Using Ito’s Lemma, we get</p><script type="math/tex; mode=display">s=x+\frac{1}{2}\lambda\sigma^{2}S^{''}(x)</script><p>or</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}S^{''}(x)-\rho S(x)+\rho x=0</script><p>This can be solved by familiar methods. The fundamental quadratic is</p><script type="math/tex; mode=display">\phi(\xi)=\rho-\frac{1}{2}\sigma^{2}\xi^{2}=0</script><p>with roots $\pm\beta=\pm\sqrt{2\rho}/\sigma$. The general solution is</p><script type="math/tex; mode=display">S(x)=x+Ae^{-\beta x}+Be^{\beta x}</script><p>The two constants are determined using the “smooth pasting ” conditions at the two reflecting barriers: <script type="math/tex">S'(-b)=0=S'(b)</script></p><p>The result is</p><script type="math/tex; mode=display">S(x)=x-\frac{1}{\beta}\frac{e^{\beta x}-e^{-\beta x}}{e^{\beta b}-e^{-\beta b}}</script><p>Finally, $b$ must be chosen to attain the desired limits on $s$, so $S(b)=z$ defines $b$ in terms of given $z$. We do not need the explicit expression. The result is an S-shaped curve, with slope</p><script type="math/tex; mode=display">S'(x)=1-\frac{e^{\beta x}-e^{-\beta x}}{e^{\beta b}-e^{-\beta b}}</script><p><img src="/pic/continue_time/fig3.eps" alt="image"></p><p>Note that the function $\exp(\beta x)+\exp(-\beta x)$ is symmetric and convex. Its minimum occurs at $x=0$, the minimum value being 2. Therefore (i) $S’(0)$ lies between $0$ and $1$, and (ii) $S’(x)$ goes to $0$ as $x$ goes to $\pm b$. Then the function $S(x)$ giving the exchange rate in terms of the fundamental is S-shaped, and everywhere flatter than 1.</p><h2 id="Transitional-boundary"><a href="#Transitional-boundary" class="headerlink" title="Transitional boundary"></a>Transitional boundary</h2><p>Sometimes the process encounter not a barrier, but a point of transition where either the parameters of the process, or the flow payoff function, or both, undergo a change. Let $b$ be such a point of transition, and suppose</p><script type="math/tex; mode=display">\begin{aligned}\mu & =\mu{1},\ \sigma=\sigma{1},\ f(x)=f_{1}(x)\ when\ x<b \\\mu & =\mu{2},\ \sigma=\sigma{2},\ f(x)=f_{2}(x)\ when\ x>b \\\end{aligned}</script><p>We can use separate differential equations like (19) on each side of $b$ and obtain solutions $F_{1}(x)$ and $F_{2}(x)$. The former is valid for $-\infty&lt;x&lt;b$, and the latter for $b&lt;x&lt;\infty$. Asymptotic considerations allow us to get rid of the term in $\exp(-\alpha_{1}x)$ from $F_{1}(x)$, and that in $\exp(\beta_{2}x)$ from $F_{2}(x)$, where $-\alpha,\beta$ denote the roots of the fundamental quadratic in the respective regious $i=1,2$. Note that $F_{1}(x)$ has no relevance to the right of $b$, so we cannot use the limiting consideration as $x$ goes to $\infty$ for $F_{1}(x)$. Similarly $F_{2}(x)$ cannot be made to satisfy any asymptotic regularity requirement as $x\rightarrow-\infty.$ Therefore each of $F_{1}(x)$ and $F_{2}(x)$ still contains one constant to be determined.</p><p>The condition that fixes the two remaining constants is that $F_{1}(x)$ and $F_{2}(x)$ should meet tangentially, or be ’smoothly pasted’ together, at $b$. Thus</p><script type="math/tex; mode=display">F_{1}(b)=F_{2}(b),\ F_{1}'(b)=F_{2}'(b)</script><h2 id="Example-temporary-suspension"><a href="#Example-temporary-suspension" class="headerlink" title="Example: temporary suspension"></a>Example: temporary suspension</h2><p>Return to the firm  just above, with two modifications. First, we remove the imposed pricing ceiling. Second, and more important for the current context, we now follow McDonald and Siegel (1985), and let the firm suspend operations when $P&lt;W$.</p><p>Now the flow of profits $g(P)$ ha the piecewise linear form</p><script type="math/tex; mode=display">g(P)=\begin{cases}0 & P<W\\P-W & W<P\end{cases}</script><p>The differential equation for $G(P)$ correspondingly has two different forms in the two regions. Let $G_{1}(P)$ be the solution in the region $P&lt;W$ and $G_{2}(P)$ that in the region $W&lt;P$. We have</p><script type="math/tex; mode=display">G_{1}(P)=D_{1}P^{\delta}</script><p>and</p><script type="math/tex; mode=display">G_{2}(P)=C_{2}P^{-\gamma}+P/(\rho-v)-W/\rho</script><p>Here we have used two limiting arguments: one as $P$ goes to zero to eliminate the $P^{-\gamma}$ term in $G_{1}(P)$ and the other as $P$ goes to $\infty$ to eliminate the $P^{\delta}$ term in $G_{2}(P)$.</p><p>That still leaves two unkown constants. To determine them, we have the value matching and smooth pasting conditions of (3.12) namely</p><script type="math/tex; mode=display">\begin{aligned}D{1}W^{\delta} & =C{2}W^{-\gamma}+W/(\rho-v)-W/\rho\\\delta D{1}W^{\delta-1} & =-\gamma C{2}W^{-\gamma-1}+1/(\rho-v)\end{aligned}</script><p>These are two simple linear equations for $D_{1}$ and $C_{2}$, which yield</p><script type="math/tex; mode=display">D_{1}=\frac{(\rho+\gamma v)W^{1-\delta}}{\rho(\rho-v)(r+\delta)},\ \ C_{2}=\frac{(\rho-\delta v)W^{1+\gamma}}{\rho(\rho-v)(\gamma+\delta)}</script><p>To find the sign of $C_{2}​$, observe that</p><script type="math/tex; mode=display">\begin{aligned}\psi(\rho/v) & =\rho-v(\rho/v)-\frac{1}{2}\sigma^{2}(\rho/v)(\rho/v-1)\\ & =-\frac{1}{2}\sigma^{2}\rho(\rho-v)/v^{2}<0\end{aligned}</script><p>Therefore $\rho/v$ lies to the right of the root $\delta$ of the fundamental quadratic, or $(\rho-\delta v)$ is positive. Then $C_{2}$ is positive. (A similar calculation shows that $D_{1}$ is positive;). Now we can compare $C_{2}(P)$ in (43) with $G_{0}(P)$ in (35). The latter was the expected present value of the firm’s profits when it was forbidden to shut down. We see how the added term in $G_{2}(P)$ reflects the added benefit of the ability to suspend operations. The benefit is positive even when $P&gt;W$, that is even when the suspension option is not currently being used, becaue there is a positive probability that it will be invoked in the future. But the added value goes to $0$ as $P$ goes to $\infty$, because the nshutdown becomes a remote and unlikely event.</p><blockquote id="fn_1"><sup>1</sup>. Just recall math textbook introduction of the general solution for ordinary differential equation<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt; This notes is about the study of continuous time dynamic model based on “The Art of Smooth Pasting”&lt;/p&gt;
    
    </summary>
    
      <category term="Economics" scheme="http://xiaofeima1990.github.io/categories/Economics/"/>
    
    
      <category term="continuous time" scheme="http://xiaofeima1990.github.io/tags/continuous-time/"/>
    
  </entry>
  
  <entry>
    <title>Python下微信公共号开发如何从网络url上传素材</title>
    <link href="http://xiaofeima1990.github.io/2017/01/29/python-upload%20pic%20to%20wechat/"/>
    <id>http://xiaofeima1990.github.io/2017/01/29/python-upload pic to wechat/</id>
    <published>2017-01-30T04:20:53.000Z</published>
    <updated>2018-05-19T01:13:25.809Z</updated>
    
    <content type="html"><![CDATA[<p>微信上传图片的接口定义非常不友好，一般情况只能从local上传图片。当我们想通过云端存储介质上传或者url链接上传时，很难有有效的方法来处理。网上寥寥无几提出了一些利用php语言修改文件参数什么的来上传。但对于python来说，一直没有有效的办法。这里我找到一种极为简单方便的方法来上传文件</p><a id="more"></a><p>为了实现自己微信公众号自动回复图片消息，我被微信蛋疼无比的素材接口折磨疯掉了。但老天眷顾，一次偶然的机会我发现了可以利用request package 极为简单的实现上传功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">access_token=&quot;your access_token&quot;</span><br><span class="line">cc = &quot;f(x)+1&quot;  # the string </span><br><span class="line">pp=requests.get(&quot;http://latex.codecogs.com/png.latex?\dpi&#123;300&#125; \huge %s&quot; % cc).content  # get the online png data (binary data)</span><br><span class="line">files = &#123;&apos;media&apos;: (&apos;temp2.png&apos;,pp)&#125; </span><br><span class="line"># the first item &quot;temp2.png&quot; is the file name, the second one is the file data</span><br><span class="line">upload_url=&quot;https://api.weixin.qq.com/cgi-bin/media/upload?access_token=&quot;+access_token+&quot;&amp;type=image&quot; # set your access_token</span><br><span class="line">r =requests.post(upload_url, files=files) # upload </span><br><span class="line">media_id=json.loads(r.content)[&apos;media_id&apos;] # if it is success, you get media id</span><br></pre></td></tr></table></figure></p><p>当然这里可以将<br><code>iles = {&#39;media&#39;: (&#39;temp2.png&#39;,pp)}</code><br>pp 换成 新浪sae storage 中的 get_object(“filename”) 将storage 存储的图片上传到微信上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信上传图片的接口定义非常不友好，一般情况只能从local上传图片。当我们想通过云端存储介质上传或者url链接上传时，很难有有效的方法来处理。网上寥寥无几提出了一些利用php语言修改文件参数什么的来上传。但对于python来说，一直没有有效的办法。这里我找到一种极为简单方便的方法来上传文件&lt;/p&gt;
    
    </summary>
    
      <category term="Data Science" scheme="http://xiaofeima1990.github.io/categories/Data-Science/"/>
    
    
      <category term="wechat" scheme="http://xiaofeima1990.github.io/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>Academic Assistance From Apple Device</title>
    <link href="http://xiaofeima1990.github.io/2017/01/19/academic-assistant-from-Apple/"/>
    <id>http://xiaofeima1990.github.io/2017/01/19/academic-assistant-from-Apple/</id>
    <published>2017-01-20T00:27:40.000Z</published>
    <updated>2018-05-19T00:13:01.133Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要介绍和记载如何更好利用各种电脑、电子设备以及软件、应用等帮助更好的工作、学习和研究<br><a id="more"></a></p><h2 id="ipad-iphone-照片互传功能"><a href="#ipad-iphone-照片互传功能" class="headerlink" title="ipad iphone 照片互传功能"></a>ipad iphone 照片互传功能</h2><p>开始我并不知道apple设备存在着icloud share 可以把照片在各个设备共享互传。现在发现了这一功能，并且大概摸清楚了怎么个情况。我发现可以利用这个功能来进行高效率的娱乐分享，学习以及工作。<br>苹果设备上的照片、相册存在如下几个默认文件夹：<br>Camera Roll<br>My Photo Stream<br>Favorite<br>Selfies<br>Screenshots<br>Recently Deleted<br>你自己定义的</p><p>从名字中可以大致判断出后面各个文件夹的功能。这里介绍第一个和第二个文件夹。第一个Camera Roll 存储了在本地设备上所有的拍照照片和截图啥的，但凡你在本设备上的照片截图下载图片啥的都在这个文件夹内。如果这个文件夹的照片被删掉了，那么除了My Photo Stream 中的照片，所有的文件夹都会受到影响。比如照片A在我自己定义的temp中，我从Camera Roll中删掉A 那么temp中也没有A了。</p><p>在有wifi情况下，各个apple设备会互传最新拍摄的照片，并且储存在My Photo Stream 下。My Photo Stream 独立于Camera Roll 。 删掉My Photo Stream 不会影响Camera Roll 中的照片，反之亦然。</p><p>而若想把My Photo Stream 再转存到本地，select照片后 点向上的方框那个东东，选择save image 即可。 </p><p>因此，我可以通过ipad 画图，然后保存在相册中，通过My Photo Stream 同步啥的同步到其他设备上，假如我买了mac 那么可以打开icould phoe share 功能 把照片都同步起来。 旧的照片给备份好。</p><h2 id="画图的同步"><a href="#画图的同步" class="headerlink" title="画图的同步"></a>画图的同步</h2><p>一般来说，我做笔记需要画图啥的，用电脑画图太蛋疼了，可以利用ipad 画图软件（找一个好点的）来画图。然后通过dropbox 还是啥的同步到电脑上作为图片插入lyx或者其他书写软件中！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要介绍和记载如何更好利用各种电脑、电子设备以及软件、应用等帮助更好的工作、学习和研究&lt;br&gt;
    
    </summary>
    
      <category term="Skills" scheme="http://xiaofeima1990.github.io/categories/Skills/"/>
    
    
      <category term="guide" scheme="http://xiaofeima1990.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>How to Turn Latex Formula to Word</title>
    <link href="http://xiaofeima1990.github.io/2017/01/16/how%20to%20turn%20latex%20formula%20to%20word/"/>
    <id>http://xiaofeima1990.github.io/2017/01/16/how to turn latex formula to word/</id>
    <published>2017-01-16T18:10:43.000Z</published>
    <updated>2018-05-19T01:22:43.116Z</updated>
    
    <content type="html"><![CDATA[<p>This article introduce a little technic to assist research work.</p><a id="more"></a><p>sometimes it is really frustrated to use word type math formula. by the converience and beautiful display of formula, latex is usually our first choice to write formula. But we usually encounter the case that we need to translate the formula from latex file into word document. Here I introduce a technic to help us save time and translate the formula smoothly from latex to word.</p><p>First of all, we need to download the <strong>MathType</strong> software, (6.00 later). Then open the software and find the options for copy and paste.<br><img src="/pic/copy_option.png" alt="copy option"></p><p>And then, click that option find Math_format of MathML 2.0 (namespace attr).<br><img src="/pic/math_format.png" alt="math_format"></p><p>Then, we can just open our latex file or lyx file, to copy the formula into the MathType, and then copy it again into the Word. </p><p>When copy into the word, we do not need to insert a new math formula area. <strong>Just Copy Directly</strong> is fine!</p><p><img src="/pic/word_sample.png" alt="word_sample"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article introduce a little technic to assist research work.&lt;/p&gt;
    
    </summary>
    
      <category term="Skills" scheme="http://xiaofeima1990.github.io/categories/Skills/"/>
    
    
      <category term="latex" scheme="http://xiaofeima1990.github.io/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>Django Learning -1</title>
    <link href="http://xiaofeima1990.github.io/2016/12/25/django-learning-1/"/>
    <id>http://xiaofeima1990.github.io/2016/12/25/django-learning-1/</id>
    <published>2016-12-26T02:24:15.000Z</published>
    <updated>2018-05-19T00:13:37.283Z</updated>
    
    <content type="html"><![CDATA[<p>These series of article record my learning process of Django Web Development</p><a id="more"></a><h1 id="Introduction-to-Django"><a href="#Introduction-to-Django" class="headerlink" title="Introduction to Django"></a>Introduction to Django</h1><p>Django loosely follows a model-viewcontroller design pattern,which greatly helps in building clean and maintainable web applications</p><h2 id="MVC-pattern-in-Web-Development"><a href="#MVC-pattern-in-Web-Development" class="headerlink" title="MVC pattern in Web Development"></a>MVC pattern in Web Development</h2><p>A few years ago, the <strong>model-view-controller</strong> pattern came for web-based applications was introduced. This software engineering pattern separates data (model), user interface (view), and data handling logic (controller), so that one can be changed without affecting the others. </p><p><img src="/pic/django-1mvc.png" alt="mvc"></p><h2 id="advantages-of-Django"><a href="#advantages-of-Django" class="headerlink" title="advantages of Django"></a>advantages of Django</h2><p>The standard features expected of a web framework are all available in Django, which include:</p><ul><li>supporting MVC </li><li>A template and text filtering engine with simple but extensible syntax.</li><li>A form generation and validation API.</li><li>An extensible authentication system.</li><li>A caching system for speeding up the performance of applications.</li><li>A feed framework for generating RSS feeds.</li></ul><p>Apart from those above features, Django also have the following advantages:</p><p><strong>Tight Integration between Components</strong> </p><p>First of all, Django provides a set of tightly integrated components; all of these components have been developed by the Django team themselves. Django was originally developed as an in-house framework for managing a series of news-oriented websites. Later its code was released on the Internet and the Django team continued its development using the Open Source model. Because of its roots, Django’s components were designed for integration, reusability and speed from the start.</p><p><strong>Object-Relational Mapper</strong></p><p>Django’s database component, the Object-Relational Mapper (ORM), provides a bridge between the data model and the database engine. It supports a large set of database systems, and switching from one engine to another is a matter of changing a configuration file. This gives the developer great flexibility if a decision is made to change from one database engine to another.</p><p><strong>Clean URL Design</strong></p><p>The URL system in Django is very flexible and powerful; it lets you define patterns for the URLs in your application, and define Python functions to handle each pattern. This enables developers to create URLs that are both user and search engine friendly.</p><p><strong>Automatic Administration Interface</strong> </p><p>Django comes with an administration interface that is ready to be used. This interface makes the management of your application’s data a breeze. It is also highly flexible and customizable.</p><p><strong>Advanced Development Environment</strong></p><p>In addition, Django provides a very nice development environment. It comes with a lightweight web server for development and testing. When the debugging mode is enabled, Django provides very thorough and detailed error messages with a lot of debugging information. All of this makes isolating and fixing bugs very easy.</p><p><strong>Multi-Lingual Support</strong></p><p>Django supports multi-lingual websites through its built-in internationalization system. This can be very valuable for those working on websites with more than one language. The system makes translating the interface a very simple task</p><h1 id="start-a-new-Django-Project"><a href="#start-a-new-Django-Project" class="headerlink" title="start a new Django Project"></a>start a new Django Project</h1><p>open a terminal (or command prompt for Windows users), type the following command, and hit enter:<br><code>django-admin.py startproject new_project</code></p><p>This command will make a folder named django_bookmarksin the current directory, and create the initial directory structure inside it. Let’s see what kinds of files are created:</p><pre><code>new_project/    __init__.py    manage.py    setting.py    urls.py</code></pre><p>The explanation of the four main files are :</p><ul><li><p><strong><strong>init</strong>.py</strong> Django projects are Python packages, and this file is required to tell<br>Python that the folder is to be treated as a package. A package in Python’s terminology is a collection of modules, and they are used to group similar files together and prevent naming conflicts.</p></li><li><p><strong>manage.py</strong> This is another utility script used to manage your project. You can think of it as your project’s version of django-admin.py. Actually, both django-admin.pyand manage.pyshare the same back-end code. manage.py is used to control the demand of Django.</p></li><li><p><strong>settings.py</strong> This is the main configuration file for your Django project. In this file you can specify a variety of options, including the database settings, site languages, which Django features are to be enabled, and so on. Various sections of this file will be explained as we build our application during the next chapters, but in this chapter, we will only see how to enter the database settings. </p></li><li><p><strong>url.py</strong> This is another configuration file. You can think of it as a mapping between URLs and Python functions that handle them. This file is one of Django’s powerful features, and we will see how to utilize it in the next chapter.</p></li></ul><p>When we start writing code for our application, we will create new files inside the project’s folder. So the folder also serves as a container for our code.</p><p>In the following case, I try to use the soical bookmark to illustrate how to ceate a simple webapp from scratch. This include the setup of database(qulite3), setup MVC framework, establishment of Registration, tag Voting,Commenting functions, be familar with the User Interface with Ajax,  the setup of Administration Interface, searching, user network and finally Deploying the web app.  </p><h2 id="setup-the-database"><a href="#setup-the-database" class="headerlink" title="setup the database"></a>setup the database</h2><p>open the <strong>settings.py</strong> file, we can see that the following information for the setup of database:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="keyword">True</span></span><br><span class="line">TEMPLATE_DEBUG = DEBUG</span><br><span class="line"></span><br><span class="line">ADMINS = (</span><br><span class="line">    <span class="comment"># ('Your Name', 'your_email@example.com'),</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">MANAGERS = ADMINS</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.'</span>, <span class="comment"># Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">''</span>,                      <span class="comment"># Or path to database file if using sqlite3.</span></span><br><span class="line">        <span class="comment"># The following settings are not used with sqlite3:</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>,                      <span class="comment"># Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,                      <span class="comment"># Set to empty string for default.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we use the sqlite3 as the default database to implement the app. So it is simple to just setup the “ENGINE” and “NAME” :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">DEBUG = <span class="keyword">True</span></span><br><span class="line">TEMPLATE_DEBUG = DEBUG</span><br><span class="line"></span><br><span class="line">MANAGERS = ADMINS</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>, <span class="comment"># Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'book_markdb'</span>,                      <span class="comment"># Or path to database file if using sqlite3.</span></span><br><span class="line">        <span class="comment"># The following settings are not used with sqlite3:</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>,                      <span class="comment"># Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,                      <span class="comment"># Set to empty string for default.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To create the database and initialize the tables in the database, we can use the following command:<br><code>$ python manage.py syncdb</code></p><pre><code>Note: there maybe an error **No module named &#39;sqlite3.base&#39;**</code></pre><h2 id="Launching-the-Development-Server"><a href="#Launching-the-Development-Server" class="headerlink" title="Launching the Development Server"></a>Launching the Development Server</h2><h2 id="Launching-the-Development-Server-1"><a href="#Launching-the-Development-Server-1" class="headerlink" title="Launching the Development Server"></a>Launching the Development Server</h2><p>As discussed before, Django comes with a lightweight web server for developing and testing applications. This server is pre-configured to work with Django, and more importantly, it restarts whenever you modify the code.<br>To start the server, run the following command:<br><code>$ python manage.py runserver</code><br>according to the instruction of the server, we can open the browser to see our web app.</p><h2 id="build-the-basic-web-application"><a href="#build-the-basic-web-application" class="headerlink" title="build the basic web application"></a>build the basic web application</h2><p>In this part, I am intended to learn MVC framework and templates. First of all, we need to create our own main page(index) </p><h3 id="URLs-and-Views-Creating-the-Main-Page"><a href="#URLs-and-Views-Creating-the-Main-Page" class="headerlink" title="URLs and Views: Creating the Main Page"></a>URLs and Views: Creating the Main Page</h3><p>To create our own welcome page, we need to define an entry point to our application in the form of a URL (URL), and tell Django to call a particular Python function when a visitor accesses this URL. (VIEW)</p><h4 id="VIEW"><a href="#VIEW" class="headerlink" title="VIEW"></a>VIEW</h4><p>A view in Django terminology is a regular Python function that responds to a page request by generating the corresponding page. To write the main page (any functions of Django), we we first need to create a <strong>Django application</strong> inside our project.</p><p>To create it, issue the following command within our folder: </p><p><code>$ python manage.py startapp bookmarks</code></p><p>After running this command, Django will create a folder named bookmarksinside the project folder with these three files:</p><ul><li><strong><strong>init</strong>.py</strong>: This file tells Python that bookmarksis a Python package. </li><li><strong>views.py</strong>: This file will contain our views.</li><li><strong>models.py</strong>: This file will contain our data models.</li></ul><p>Open the file bookmarks/views.pyin your code editor and enter the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    output = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;&lt;title&gt;%s&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;%s&lt;/h1&gt;&lt;p&gt;%s&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">    '''</span> % (</span><br><span class="line">    <span class="string">'Django Bookmarks'</span>,</span><br><span class="line">    <span class="string">'Welcome to Django Bookmarks'</span>,</span><br><span class="line">    <span class="string">'Where you can store and share bookmarks!'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure><ul><li>We import the class HttpResponsefrom django.http. We need this class in order to generate our response page.</li><li>We define a Python function that takes one parameter named request; this parameter contains user input and other information. For example, request. GET, request.POSTand request.COOKIESare dictionaries that contain get, post and cookie data respectively.</li><li>We build the HTML code of the response page, wrap it within an HttpResponseobject and return it.</li></ul><p><em>relation about request and response</em><br><img src="/pic/django-1request.jpg" alt="request and response"></p><p>httprequest 表示来自某客户端的一个单独的HTTP请求。HttpRequest对象是Django自动创建的。</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>As you may recall from the previous chapter, a file named urls.pywas created when we started our project. This file contains valid URLs for our application, and maps each URL to a view that is a Python function.<br>As you can probably tell, the file contains a table of URLs and their corresponding Python functions (or views). The table is called urlpatterns, and it initially contains example entries that are commented out. Each entry is a Python tuple that consists of a URL and its view.</p><p>The Django use <em>URL</em> to allocate each url address to each view and do different tasks. </p><p>Let’s start by removing the comments and adding an entry for the main page:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> patterns, include, url</span><br><span class="line"><span class="keyword">from</span> bookmarks.views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = patterns(<span class="string">''</span>,</span><br><span class="line">(<span class="string">r'^$'</span>, main_page),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><ul><li>The file imports patterns, include, url from the module django.conf.urls. This module provides the necessary * functions to define URLs.</li><li>We import everything from bookmarks.views. This is necessary to access our views, and connect them to URLs.<br>The patterns function is used to define the URL table. It contains only one mapping for now — from r’^$’to our view main_page.</li></ul><p>the synax in URL expression need some knowledge from regix. For more detail, please see the documentation online at: <a href="http://docs.python.org/lib/module-re.html" target="_blank" rel="noopener">http://docs.python.org/lib/module-re.html</a></p><div class="table-container"><table><thead><tr><th>Symbol / Expression</th><th>Matched String</th></tr></thead><tbody><tr><td>. (Dot)</td><td>Any character.</td></tr><tr><td>^ (Caret)</td><td>Start of string.</td></tr><tr><td>$</td><td>End of string.</td></tr><tr><td>*</td><td>0 or more repetitions.</td></tr><tr><td>+</td><td>1 or more repetitions.</td></tr><tr><td>?</td><td>0 or 1 repetitions.</td></tr><tr><td>A \ B</td><td>means A or B.</td></tr><tr><td>[a-z]</td><td>Any lowercase character.</td></tr><tr><td>\w</td><td>Any alphanumeric character or _.</td></tr><tr><td>\d</td><td>Any digit.</td></tr></tbody></table></div><h3 id="the-Database-and-Models"><a href="#the-Database-and-Models" class="headerlink" title="the Database and Models"></a>the Database and Models</h3><p>If you are used to dealing with the database directly through SQL queries, then you may find Django’s approach to database access a bit different. Loosely speaking, Django abstracts access to database tables through Python classes. To store, manipulate and retrieve objects from the database, the developer uses a Python-based<br>API. In order to do this, SQL knowledge is useful but not required.</p><p>This technique is best explained by example. For our bookmarking application, we need to store three types of data in the database:</p><ul><li>Users (ID, username, password, email)</li><li>Links (ID, URL)</li><li>Bookmarks (ID, title, user_id, link_id)</li></ul><p>Each user will have their own entry in the Users table. This entry stores the username, password and email. Similarly, each link will have a corresponding entry in the links table. We will only store the link’s URL for now.<br>As for the Bookmarks table, you can think of it as the joining table between Users and Links. When a user adds a bookmark, an entry for the bookmark’s URL is added to the links table if it doesn’t already exist, and then a joining entry is added to the Bookmarks table. This entry connects the user with the link, and stores the title that the user entered for their bookmark.</p><p>To use and define the model,  we first need to activate it in our Django project. This is done by<br>editing settings.py, looking for the INSTALLED_APPSvariable, and adding our<br>application name (django_bookmarks.bookmarks) to it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line"><span class="string">'django.contrib.auth'</span>,</span><br><span class="line"><span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line"><span class="string">'django.contrib.sessions'</span>,</span><br><span class="line"><span class="string">'django.contrib.sites'</span>,</span><br><span class="line"><span class="string">'django_bookmarks.bookmarks'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>For all three database:</p><p><strong>Link Data Model</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    url = models.URLField(unique=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>User Data Model</strong></p><p><code>from django.contrib.auth.models import User</code></p><p>use the default user model in django</p><p><strong>Bookmark Data Model</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bookmark</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    user = models.ForeignKey(User)</span><br><span class="line">    link = models.ForeignKey(Link)</span><br></pre></td></tr></table></figure><pre><code>**many to many relation**A bookmark belongs to one user and one link. However, one user may have many bookmarks, and one link may be bookmarked by many users. In database language we say there is a many-to-many relationship between users and links. However, there is no way to actually represent a many-to-many relationship such as this one using a standard database system. In our particular case, we will invent the concept of a bookmark to break up this many-to-many relationship into its constituent one-to-many relationships.The first of these is the one-to-many relationship between the user and their bookmarks. One user can have many bookmarks, but each bookmark is associated with only one user. That is to say, each user can bookmark a particular link once.The second of these is the one-to-many relationship between a link and its bookmarks. One link can have many bookmarks associated with it if multiple users have bookmarked it, but each bookmark is associated with only one link.</code></pre><p>as we set up the Model.py and then, run the following command <strong>manage.py syncdb</strong> in order to create its corresponding table.</p><p>Let’s examine the SQL query generated by Django to see how it automatically<br>handles foreign keys. Again, issue the following command:</p><p><code>$ python manage.py sql bookmarks</code></p><p>And the result is :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">CREATE TABLE &quot;bookmarks_link&quot; (</span><br><span class="line">    &quot;id&quot; integer NOT NULL PRIMARY KEY,</span><br><span class="line">    &quot;url&quot; varchar(200) NOT NULL UNIQUE</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line">CREATE TABLE &quot;bookmarks_bookmark&quot; (</span><br><span class="line">    &quot;id&quot; integer NOT NULL PRIMARY KEY,</span><br><span class="line">    &quot;title&quot; varchar(200) NOT NULL,</span><br><span class="line">    &quot;user_id&quot; integer NOT NULL REFERENCES &quot;auth_user&quot; (&quot;id&quot;),</span><br><span class="line">    &quot;link_id&quot; integer NOT NULL REFERENCES &quot;bookmarks_link&quot; (&quot;id&quot;)</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>Now that the data models are ready, we have the facilities to store and manage our data. Django offers an elegant and straightforward Python API to store Python objects in the database, thus sparing the developer the burden of working with SQL and converting between SQL and Python types and idioms.</p><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><p>The next thing we need concern is the templates. It is a very important part in Django and all web app for python. Because handling the html code directly in python may have many disadvantages: </p><ul><li>Good software engineering practices always emphasize the separation between UI and business logic, because it enhances reusability. However, embedding HTML within Python code clearly violates this rule.</li><li>Editing HTML embedded within Python requires Python knowledge, but this is impractical for many development teams whose web designers do not know Python.</li><li>Handling HTML code within Python code is a tedious and error-prone task. For example, quotation marks in HTML may need to be escaped in Python string literals, and the overall result may be unclean and unreadable code.</li></ul><h4 id="some-synax-for-the-templates"><a href="#some-synax-for-the-templates" class="headerlink" title="some synax for the templates"></a>some synax for the templates</h4><p>Checking whether a variable is empty or not in a template is done using the following syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if variable %&#125;</span><br><span class="line">&lt;p&gt;variable contains data.&lt;/p&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&lt;p&gt;variable is empty&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>This ‘if’ condition works as expected. If the variable contains data, only the first line is printed to the browser. On the other hand, if the variable is indeed empty, only the second line is printed.</p><p>To iterate through a list and print its items, we use the following syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in list %&#125;</span><br><span class="line">&#123;&#123; item &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>Finally, if a variable has attributes, you can access them in a way similar to Python:</p><p><code></code></p><h3 id="Combining-Templates-and-View"><a href="#Combining-Templates-and-View" class="headerlink" title="Combining Templates and View"></a>Combining Templates and View</h3><p>If we want tansfer some variable or character from URL to the web server (eg: into View), how do we do it? For example, an URL of a User page will have such form : <em>user/username</em>，where usernameis the owner of the bookmarks that we want to see.where usernameis the owner of the bookmarks that we want to see.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = patterns(<span class="string">''</span>,</span><br><span class="line">(<span class="string">r'^$'</span>, main_page),</span><br><span class="line">(<span class="string">r'^user/(\w+)/$'</span>, user_page),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>We have surrounded this portion of the regular expression with parentheses; this will cause Django to capture the string that matches this portion, and pass it to the view, as we will see later.</p><p>and we modify the View.py for <strong>user_page</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, Http404</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_page</span><span class="params">(request, username)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">user = User.objects.get(username=username)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">raise</span> Http404(<span class="string">'Requested user not found.'</span>)</span><br><span class="line">bookmarks = user.bookmark_set.all()</span><br><span class="line">template = get_template(<span class="string">'user_page.html'</span>)</span><br><span class="line">variables = Context(&#123;</span><br><span class="line"><span class="string">'username'</span>: username,</span><br><span class="line"><span class="string">'bookmarks'</span>: bookmarks</span><br><span class="line">&#125;)</span><br><span class="line">output = template.render(variables)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure><p>There are several features need to be mentioned here:</p><ul><li>Unlike our first view, user_pagetakes an extra parameter in addition to the familiar request object. Remember that the pattern for this URL contains capturing parentheses? Strings captured by URL patterns are passed as parameters to views. The captured string in this URL is passed as the username parameter. </li><li>We used User.objects.get to obtain the user object whose username is requested. We can use a similar technique to query any table by a unique column. This method throws an exception if there are no records that match the query, or if the matched record is not unique. <strong>The reason we can use User.objects.get is that we directly use default User Model to define our database table</strong></li><li>If the requested username is not available in the database, we generate a 404 “Page Not Found” error by raising an exception of the type Http404. </li><li>To obtain the list of bookmarks for a particular user object, we can conveniently use the <em>bookmark_set</em> <code>bookmarks = user.bookmark_set.all()</code> attribute available in the user object. <strong>Django detects relations between data models and automatically generates such attributes.</strong> There is no need to worry about constructing SQL JOIN queries ourselves to obtain user bookmarks for example. See more detail in stack overflow <a href="http://stackoverflow.com/questions/22338965/user-object-has-no-attribute-bookmark-set" target="_blank" rel="noopener">user-object-has-no-attribute-bookmark-set</a>, And <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/" target="_blank" rel="noopener">Django reference</a> under “Following relationships “backward””</li><li></li></ul><h2 id="User-Registration-and-Management"><a href="#User-Registration-and-Management" class="headerlink" title="User Registration and Management"></a>User Registration and Management</h2><ul><li>Creating a login page.</li><li>Enabling logout functionality.</li><li>Creating a registration form.</li><li>Enabling users to update their account information.</li></ul><p>Django has its own Authentication module. The Django authentication system is available in the django.contrib.<br>authpackage. It is installed by default as part of Django, and projects created with<br>the django-admin.pyutility have it enabled by default.</p><p>Before we start using the authentication system, let’s have a quick look at the features<br>that it provides:</p><ul><li>Users: A comprehensive User data model with fields commonly required by web applications.</li><li>Permissions: Yes/No flags that indicate whether a user may access a certain feature or not.</li><li>Groups: A data model for grouping more than one user together and applying the same set of permissions to them.</li><li>Messages: Provides the functionality for displaying information and error messages to the user.</li></ul><h3 id="Creating-the-Login-Page"><a href="#Creating-the-Login-Page" class="headerlink" title="Creating the Login Page"></a>Creating the Login Page</h3><p>Open the file in your editor and change it so that the URL table looks like the following snippet:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = patterns(&apos;&apos;,</span><br><span class="line">(r&apos;^$&apos;, main_page),</span><br><span class="line">(r&apos;^user/(\w+)/$&apos;, user_page),</span><br><span class="line">(r&apos;^login/$&apos;, &apos;django.contrib.auth.views.login&apos;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The <strong>login</strong> view requires the availability of a template called registration/login.<br>html. It loads this template and passes an object that represents the login form to<br>it. We will learn about form objects in detail when we create a user registration<br>form, but for now, we only need to know that this object is called formand has the<br>following attributes: form.username, form.passwordand form.has_errors. When<br>printed, the first two attributes generate HTML code for the username and password<br>text fields, whereas form.has_errorsis a Boolean attribute that is set to true if<br>logging-in fails after submitting the form.</p><h4 id="Improving-Template-Structure"><a href="#Improving-Template-Structure" class="headerlink" title="Improving Template Structure"></a>Improving Template Structure</h4><p>We see lots of templates have similar structure. Wouldn’t it be great if we could factor out the shared sections into a single file so that, if we want to modify all the pages in future, we need only edit one file?</p><p>Fortunately, the Django template system already provides such a feature-template inheritance. The idea is simple; we create a <strong>base</strong> template that contains the structure shared by all templates in the system. We also declare certain blocksof the base template to be modifiable by <strong>child</strong> templates. Next, we create a template that<br>extendsthe base template and modifies its blocks. The idea is very similar to class inheritance in object-oriented programming.</p><p>the base file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Django Bookmarks | &#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&#123;% block head %&#125;&#123;% endblock %&#125;&lt;/h1&gt;</span><br><span class="line">&#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>The template utilizes a new template tag called block. This tag is used to define sections that are modifiable by child templates. Our base template contains three blocks, one for the title, one for the page heading and one for the body. </p><p>To be continued </p><p>how to apply crob job to do some thing </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;These series of article record my learning process of Django Web Development&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="http://xiaofeima1990.github.io/categories/develop/"/>
    
    
      <category term="python" scheme="http://xiaofeima1990.github.io/tags/python/"/>
    
      <category term="Django" scheme="http://xiaofeima1990.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>PhantomJS and Selenium -- Headless Browser Spider</title>
    <link href="http://xiaofeima1990.github.io/2016/12/19/PhantomJS-and-Selenium-headless-brower-spider/"/>
    <id>http://xiaofeima1990.github.io/2016/12/19/PhantomJS-and-Selenium-headless-brower-spider/</id>
    <published>2016-12-19T20:07:39.000Z</published>
    <updated>2018-05-19T01:06:10.334Z</updated>
    
    <content type="html"><![CDATA[<p>This article introduce how to use PhantomJS and Selenium to do headless Browser Testing and web spider</p><a id="more"></a><p>For the webspider, many times we encounter some annoying websites and found it is hard to crawler the data easily. So we need to simulate browser to do it. Selenium is a very powerful tool to help us crawling data. But Selenium also have some shortcomings, for example in linux and other cloud system, it is not easy to install a browser to do it. Another thing is that usually starting a browser is much less efficient to do the scrapy things. This article is intended to introduce PhantomJS and Selenium , which will help developer to do the browser testing quickly and web spider efficiently.</p><h2 id="intall-the-required-software"><a href="#intall-the-required-software" class="headerlink" title="intall the required software"></a>intall the required software</h2><p>first is to install selenium<br><code>pip intall selenium</code></p><p>for phantomJS, we can use <a href="http://brew.sh/" target="_blank" rel="noopener">brew</a> or use npm (Node.js) to install:<br><code>npm -g install phantomjs-prebuilt</code></p><p>Note my node module is in “C:\Users\username\AppData\Roaming\npm\node_modules”</p><p>Once we are done with this, we can use PhantomJS freely in selenium</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## python 3.5</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.PhantomJS() <span class="comment">## put PhantomJS.exe in the same directory </span></span><br><span class="line">driver.set_window_size(<span class="number">1120</span>, <span class="number">550</span>)</span><br><span class="line">driver.get(<span class="string">"https://realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/"</span>)</span><br><span class="line">temp=driver.find_element_by_xpath(<span class="string">"//h3/following-sibling::p"</span>) <span class="comment">## find the following sibling haha</span></span><br><span class="line">driver.save_screenshot(<span class="string">'screen.png'</span>) <span class="comment"># save a screenshot to disk</span></span><br><span class="line">print(temp.text)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>We can see it is headless browser and give us results directly. (personally speaking, I do not think it is very fast. It seems still spend long time)</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="http://selenium-python.readthedocs.io/" target="_blank" rel="noopener">selenium</a></li><li><a href="http://stackoverflow.com/questions/28046706/how-to-find-element-next-to-another-element" target="_blank" rel="noopener">find nex element</a></li><li><a href="https://realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/" target="_blank" rel="noopener">selenium + PhantomJS</a></li><li><a href="/files/PhantomJS_selenium.py">source code</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article introduce how to use PhantomJS and Selenium to do headless Browser Testing and web spider&lt;/p&gt;
    
    </summary>
    
      <category term="Data Science" scheme="http://xiaofeima1990.github.io/categories/Data-Science/"/>
    
    
      <category term="webspider" scheme="http://xiaofeima1990.github.io/tags/webspider/"/>
    
  </entry>
  
  <entry>
    <title>Extract Text From Sanned PDF With Python</title>
    <link href="http://xiaofeima1990.github.io/2016/12/19/extract-text-from-sanned-pdf/"/>
    <id>http://xiaofeima1990.github.io/2016/12/19/extract-text-from-sanned-pdf/</id>
    <published>2016-12-19T18:10:31.000Z</published>
    <updated>2018-05-19T00:17:15.100Z</updated>
    
    <content type="html"><![CDATA[<p>This article introduces how to setup the denpendicies and environment for using OCR technic to extract data from scanned PDF or image.</p><a id="more"></a><p>extracting normal pdf is easy and convinent, we can just use <a href="https://pypi.python.org/pypi/pdfminer/" target="_blank" rel="noopener">pdfminer</a> and <a href="https://pypi.python.org/pypi/pdfminer.six/20160614" target="_blank" rel="noopener">pdfminer.six</a> (for python2 and python3 respectively) and follow the instruction to get text content. But for those scanned pdf, it is actually the image in essence. To extract the text from it, we need a little bit more complicated setup. In addition, it is easy for linux system but hard for windows system. </p><h2 id="Basic-package-and-software-needed"><a href="#Basic-package-and-software-needed" class="headerlink" title="Basic package and software needed"></a>Basic package and software needed</h2><p>We want to use <a href="https://pypi.python.org/pypi/pyocr" target="_blank" rel="noopener">pyocr</a> to extract what we need. And in order to use if correctly, we need the following important denpendencies</p><ul><li><a href="http://www.pythonware.com/products/pil/" target="_blank" rel="noopener">Python Imaging Library (PIL)</a></li><li><a href="https://pypi.python.org/pypi/Wand" target="_blank" rel="noopener">Wand</a></li><li><a href="https://github.com/tesseract-ocr" target="_blank" rel="noopener">tesseract-ocr</a></li><li><a href="https://ghostscript.com/" target="_blank" rel="noopener">ghostscript</a></li><li><p><a href="https://www.imagemagick.org/script/binary-releases.php" target="_blank" rel="noopener">ImageMagick</a></p><p>Note that PIL could use <strong>conda install pil</strong>.  And also we need to setup the environment and path.<br>First of all, do not change the default name of the folder, you can change the directory. But if you change the directory, you need to change some path setup from <strong>tesseract.py.py</strong> in pyocr package. </p><p>For the system path and environment, you need to add the directory of ghostscript, ImageMagick, tesseract-ocr into system path:</p></li><li><p>create a new name MAGICK_HOME and set ImageMagick,ghostscript as  E:\system\ImageMagick-6.9.7-Q8; E:\system\gs9.20\bin</p></li><li>add them into the <strong>path</strong> E:\system\ImageMagick-6.9.7-Q8; E:\system\gs9.20\bin</li><li>create a new name TESSDATA_PREFIX and set tesseract directory E:\system\Tesseract-OCR</li><li><p>change the <strong>tesseract.py</strong> as </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># CHANGE THIS IF TESSERACT IS NOT IN YOUR PATH, OR IS NAMED DIFFERENTLY</span><br><span class="line">TESSERACT_CMD = os.environ[&quot;TESSDATA_PREFIX&quot;]+ os.sep +&apos;tesseract.exe&apos; if os.name == &apos;nt&apos; else &apos;tesseract&apos;</span><br><span class="line"></span><br><span class="line">TESSDATA_EXTENSION = &quot;.traineddata&quot;</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure></li></ul><p><img src="/pic/pdfocr1.png" alt="environment"></p><p>when you successfully setup, you can open the cmd, and input :<br><code>convert filename.pdf filename.jpg</code><br>to see whether it can operate correctly.</p><h2 id="python-OCR-stript"><a href="#python-OCR-stript" class="headerlink" title="python OCR stript"></a>python OCR stript</h2><p>When all those are done. We are able to write the python script : </p><ul><li>importing the required libraries:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wand.image <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> PI</span><br><span class="line"><span class="keyword">import</span> pyocr</span><br><span class="line"><span class="keyword">import</span> pyocr.builders</span><br><span class="line"><span class="keyword">import</span> io</span><br></pre></td></tr></table></figure><ul><li>get the handle of the OCR library (tesseract) </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tool = pyocr.get_available_tools()[<span class="number">0</span>]</span><br><span class="line">lang = tool.get_available_languages()[<span class="number">0</span>]  <span class="comment"># you need to check what the language is in the list, in my computer it is eng for [0]</span></span><br></pre></td></tr></table></figure><p>If your tesseract does not setup correctly, you will encount null value in this part, please carefully check the environment path setup. </p><ul><li>setup two lists to store the images and final_text</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req_image = []</span><br><span class="line">final_text = []</span><br></pre></td></tr></table></figure><ul><li>open the PDF file using wand and convert it to jpeg </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image_pdf = Image(filename=<span class="string">"path/filename.pdf"</span>, resolution=<span class="number">300</span>)</span><br><span class="line">image_jpeg = image_pdf.convert(<span class="string">'jpeg'</span>)</span><br></pre></td></tr></table></figure><p>If the ghostscript does not setup correctly, this part will raise the error, usually I encounter <em>798</em> : the system could not find the file. Here you need not only check the environment path but also do not change the folder’s name, because I change the folder’s name at the beginning, It tooks me a long time to fix this problem.</p><p>wand has converted all the separate pages in the PDF into separate image blobs. We can loop over them and append them as a blob into the req_image list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> image_jpeg.sequence:</span><br><span class="line">    img_page = Image(image=img)</span><br><span class="line">    req_image.append(img_page.make_blob(<span class="string">'jpeg'</span>))</span><br></pre></td></tr></table></figure><ul><li>run OCR to get the text </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> req_image: </span><br><span class="line">    txt = tool.image_to_string(</span><br><span class="line">        PI.open(io.BytesIO(img)),</span><br><span class="line">        lang=lang,</span><br><span class="line">        builder=pyocr.builders.TextBuilder()</span><br><span class="line">    )</span><br><span class="line">    final_text.append(txt)</span><br></pre></td></tr></table></figure><p>It will take a few minuite to finsih the converting. </p><h2 id="Full-code"><a href="#Full-code" class="headerlink" title="Full code"></a>Full code</h2><p>The Full code is </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">python <span class="number">27</span></span><br><span class="line">required package pyocr, PIL, wand</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wand.image <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> PI</span><br><span class="line"><span class="keyword">import</span> pyocr</span><br><span class="line"><span class="keyword">import</span> pyocr.builders</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">path = <span class="string">"your path directory\demo.pdf"</span></span><br><span class="line">tool = pyocr.get_available_tools()[<span class="number">0</span>]</span><br><span class="line">lang = tool.get_available_languages()[<span class="number">0</span>] // <span class="number">0</span> <span class="keyword">is</span> eng</span><br><span class="line"></span><br><span class="line">req_image = []</span><br><span class="line">final_text = []</span><br><span class="line"></span><br><span class="line">image_pdf = Image(filename=path, resolution=<span class="number">300</span>)</span><br><span class="line">image_jpeg = image_pdf.convert(<span class="string">'jpeg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> image_jpeg.sequence:</span><br><span class="line">    img_page = Image(image=img)</span><br><span class="line">    req_image.append(img_page.make_blob(<span class="string">'jpeg'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> req_image: </span><br><span class="line">    txt = tool.image_to_string(</span><br><span class="line">        PI.open(io.BytesIO(img)),</span><br><span class="line">        lang=lang,</span><br><span class="line">        builder=pyocr.builders.TextBuilder()</span><br><span class="line">    )</span><br><span class="line">    final_text.append(txt)</span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://pythontips.com/2016/02/25/ocr-on-pdf-files-using-python/" target="_blank" rel="noopener">OCR on PDF files using Python</a></li><li><a href="http://stackoverflow.com/questions/26494211/extracting-text-from-a-pdf-file-using-pdfminer-in-python" target="_blank" rel="noopener">extracting normal PDF using pdfminer</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article introduces how to setup the denpendicies and environment for using OCR technic to extract data from scanned PDF or image.&lt;/p&gt;
    
    </summary>
    
      <category term="Data Science" scheme="http://xiaofeima1990.github.io/categories/Data-Science/"/>
    
    
      <category term="python" scheme="http://xiaofeima1990.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Data Visualization For GIS Info With Python</title>
    <link href="http://xiaofeima1990.github.io/2016/07/28/data-visualization-for-GIS-info-with-python/"/>
    <id>http://xiaofeima1990.github.io/2016/07/28/data-visualization-for-GIS-info-with-python/</id>
    <published>2016-07-28T20:05:04.000Z</published>
    <updated>2018-05-19T00:15:04.894Z</updated>
    
    <content type="html"><![CDATA[<p>This post breifly records my learning on how to visualiza the GIS info on the map by python. I attempted different ways to visualize my gis data by python. I was very luck to find two powerful package to deal with data visualization:</p><ul><li>vincent <a href="http://vincent.readthedocs.org/en/latest/" target="_blank" rel="noopener">link</a> </li><li>folium  <a href="https://pypi.python.org/pypi/folium" target="_blank" rel="noopener">link</a></li></ul><p>The two package offers different ways to visualize gis info on the map. And most importantly, it is easy to get started! </p><a id="more"></a><h2 id="what-is-folium"><a href="#what-is-folium" class="headerlink" title="what is folium"></a>what is folium</h2><p>folium is a package aimed at making beautiful maps with Leaflet.js &amp; Python. Just with a few codes, you can generate a beautiful map to visualize your data and help you doing analysis. folium supports python2 and python3. If you install the anaconda IDE environment, you won’t face any trouble to install it. the installation is simple and easy with pip: </p><p><code>pip install folium</code>  </p><h2 id="get-started-to-create-the-first-simple-map"><a href="#get-started-to-create-the-first-simple-map" class="headerlink" title="get started to create the first simple map"></a>get started to create the first simple map</h2><p>with a few code, we can get the traditional map immediately:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> folium</span><br><span class="line">map_osm = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">## output to a html file</span></span><br><span class="line">map_osm.create_map(path=<span class="string">'osm.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="Different-types-of-map"><a href="#Different-types-of-map" class="headerlink" title="Different types of map"></a>Different types of map</h2><p>As far as I know, folium has at least three types of map form (tiles), which are “default”,”Stamen Toner”,”Stamen Terrain”. In the following are the examples: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map_demo1 = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>])</span><br><span class="line">map_demo2 = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>], tiles=<span class="string">'Stamen Toner'</span>,</span><br><span class="line">                    zoom_start=<span class="number">13</span>)</span><br><span class="line">map_demo3 = folium.Map(location=[<span class="number">45.372</span>, <span class="number">-121.6972</span>], tiles=<span class="string">'Stamen Terrain'</span>,</span><br><span class="line">zoom_start=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>custom tiles: </p><pre><code>tiles: str, default &#39;OpenStreetMap&#39;    Map tileset to use. Can choose from this list of built-in tiles:        - &quot;OpenStreetMap&quot;        - &quot;MapQuest Open&quot;        - &quot;MapQuest Open Aerial&quot;        - &quot;Mapbox Bright&quot; (Limited levels of zoom for free tiles)        - &quot;Mapbox Control Room&quot; (Limited levels of zoom for free tiles)        - &quot;Stamen&quot; (Terrain, Toner, and Watercolor)        - &quot;Cloudmade&quot; (Must pass API key)        - &quot;Mapbox&quot; (Must pass API key)        - &quot;CartoDB&quot; (positron and dark_matter)</code></pre><p>Of course, you can use mapbox and Leaflet.js to design and create many other types of map style (tile)<br>Of course, you can use mapbox and Leaflet.js to design and create many other types of map style (tile)<br>For <a href="https://www.mapbox.com/studio/" target="_blank" rel="noopener">Mapbox</a>, it is very simple : all you need to do is set the <strong>tiles</strong> as ‘Mapbox’, and include <strong>API_key</strong>.(I don not know it quite well) </p><blockquote><p>Mapbox is an open source mapping platform for custom designed maps. it is very easy to use and can help designers and gis professionars to create beautiful maps instantly</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">custom = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>], tiles=<span class="string">'Mapbox'</span>,</span><br><span class="line">                    API_key=<span class="string">'wrobstory.map-12345678'</span>)</span><br><span class="line"></span><br><span class="line">tileset = <span class="string">r'https://api.mapbox.com/v4/xiaofeima.p37fkfk1/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?access_token=pk.eyJ1IjoieGlhb2ZlaW1hIiwiYSI6ImNpa2I2dTRudDBtNnV2dWtwbXh6Njg2NmcifQ.7E2eCTrl2aY5dCtTJJwXtw'</span></span><br><span class="line"></span><br><span class="line">custom2 = folium.Map(location=[<span class="number">45.372</span>, <span class="number">-121.6972</span>], zoom_start=<span class="number">2</span>,</span><br><span class="line">                 tiles=tileset, attr=<span class="string">'My Data Attribution'</span>)</span><br></pre></td></tr></table></figure><p>and with the above style, we get the following map style</p><p><img src="/pic/mgx1.png" alt="map"></p><h2 id="markers-and-popups"><a href="#markers-and-popups" class="headerlink" title="markers and popups"></a>markers and popups</h2><p>When we create the map style, the next thing we want to do is to mark the information on the map, folium offers us multiple methods to make marker icon and popups: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">map_demo2 = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>], tiles=<span class="string">'Stamen Toner'</span>,</span><br><span class="line">                   zoom_start=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># custom simple </span></span><br><span class="line">map_demo2.simple_marker(location=[<span class="number">45.5244</span>, <span class="number">-122.6699</span>], popup=<span class="string">'The Waterfront'</span>)</span><br><span class="line"><span class="comment"># draw a circle</span></span><br><span class="line">map_demo2.circle_marker(location=[<span class="number">45.5215</span>, <span class="number">-122.6261</span>], radius=<span class="number">500</span>,</span><br><span class="line">                    popup=<span class="string">'Laurelhurst Park'</span>, line_color=<span class="string">'#3186cc'</span>,</span><br><span class="line">                    fill_color=<span class="string">'#3186cc'</span>)</span><br><span class="line"><span class="comment">#  Polygon marker</span></span><br><span class="line"></span><br><span class="line">map_demo4 = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>], zoom_start=<span class="number">13</span>)</span><br><span class="line">map_demo4.polygon_marker(location=[<span class="number">45.5012</span>, <span class="number">-122.6655</span>], popup=<span class="string">'Ross Island Bridge'</span>,</span><br><span class="line">                     fill_color=<span class="string">'#132b5e'</span>, num_sides=<span class="number">3</span>, radius=<span class="number">10</span>)</span><br><span class="line">map_demo4.polygon_marker(location=[<span class="number">45.5132</span>, <span class="number">-122.6708</span>], popup=<span class="string">'Hawthorne Bridge'</span>,</span><br><span class="line">                     fill_color=<span class="string">'#45647d'</span>, num_sides=<span class="number">4</span>, radius=<span class="number">10</span>)</span><br><span class="line">map_demo4.polygon_marker(location=[<span class="number">45.5275</span>, <span class="number">-122.6692</span>], popup=<span class="string">'Steel Bridge'</span>,</span><br><span class="line">                     fill_color=<span class="string">'#769d96'</span>, num_sides=<span class="number">6</span>, radius=<span class="number">10</span>)</span><br><span class="line">map_demo4.polygon_marker(location=[<span class="number">45.5318</span>, <span class="number">-122.6745</span>], popup=<span class="string">'Broadway Bridge'</span>,</span><br><span class="line">                     fill_color=<span class="string">'#769d96'</span>, num_sides=<span class="number">8</span>, radius=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lively icon </span></span><br><span class="line">map_demo1.simple_marker([<span class="number">45.3288</span>, <span class="number">-121.6625</span>], popup=<span class="string">'Mt. Hood Meadows'</span>,marker_icon=<span class="string">'cloud'</span>)</span><br><span class="line">map_demo1.simple_marker([<span class="number">45.3311</span>, <span class="number">-121.7113</span>], popup=<span class="string">'Timberline Lodge'</span>,marker_color=<span class="string">'green'</span>)</span><br><span class="line">map_demo1.simple_marker([<span class="number">45.3300</span>, <span class="number">-121.6823</span>], popup=<span class="string">'Some Other Location'</span>,marker_color=<span class="string">'red'</span>,marker_icon=<span class="string">'info-sign'</span>)</span><br></pre></td></tr></table></figure><p>Moreover, folium support the Vincent/Vega markers, which means we can put data and graphs into the marker </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> vincent, json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">scatter_points = &#123;</span><br><span class="line">    <span class="string">'x'</span> : np.random.uniform(size=(<span class="number">100</span>,)),</span><br><span class="line">    <span class="string">'y'</span> : np.random.uniform(size=(<span class="number">100</span>,)),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's create the vincent chart.</span></span><br><span class="line">scatter_chart = vincent.Scatter(scatter_points,</span><br><span class="line">                                iter_idx=<span class="string">'x'</span>,</span><br><span class="line">                                width=<span class="number">600</span>,</span><br><span class="line">                                height=<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's convert it to JSON.</span></span><br><span class="line">scatter_json = scatter_chart.to_json()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's convert it to dict.</span></span><br><span class="line">scatter_dict = json.loads(scatter_json)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map_vin = folium.Map([<span class="number">43</span>,<span class="number">-100</span>], zoom_start=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's create a Vega popup based on scatter_chart.</span></span><br><span class="line">popup = folium.Popup(max_width=<span class="number">800</span>)</span><br><span class="line">folium.Vega(scatter_chart, height=<span class="number">350</span>, width=<span class="number">650</span>).add_to(popup)</span><br><span class="line">folium.Marker([<span class="number">30</span>,<span class="number">-120</span>], popup=popup).add_to(map_vin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's create a Vega popup based on scatter_json.</span></span><br><span class="line">popup = folium.Popup(max_width=<span class="number">800</span>)</span><br><span class="line">folium.Vega(scatter_json, height=<span class="number">350</span>, width=<span class="number">650</span>).add_to(popup)</span><br><span class="line">folium.Marker([<span class="number">30</span>,<span class="number">-100</span>], popup=popup).add_to(map_vin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's create a Vega popup based on scatter_dict.</span></span><br><span class="line">popup = folium.Popup(max_width=<span class="number">800</span>)</span><br><span class="line">folium.Vega(scatter_dict, height=<span class="number">350</span>, width=<span class="number">650</span>).add_to(popup)    </span><br><span class="line">folium.Marker([<span class="number">30</span>,<span class="number">-80</span>], popup=popup).add_to(map_vin)</span><br><span class="line"></span><br><span class="line">map_vin</span><br></pre></td></tr></table></figure><p>In more general case, we can put html in to the popup so that we can represet anything we want :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">m = folium.Map([<span class="number">43</span>,<span class="number">-100</span>], zoom_start=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">html=<span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;h1&gt; This is a big popup&lt;/h1&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    With a few lines of code...</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">    &lt;code&gt;</span></span><br><span class="line"><span class="string">        from numpy import *&lt;br&gt;</span></span><br><span class="line"><span class="string">        exp(-2*pi)</span></span><br><span class="line"><span class="string">    &lt;/code&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">iframe = folium.element.IFrame(html=html, width=<span class="number">500</span>, height=<span class="number">300</span>)</span><br><span class="line">popup = folium.Popup(iframe, max_width=<span class="number">2650</span>)</span><br><span class="line"></span><br><span class="line">folium.Marker([<span class="number">30</span>,<span class="number">-100</span>], popup=popup).add_to(m)</span><br><span class="line"></span><br><span class="line">m</span><br></pre></td></tr></table></figure><p>the folium also supports the Choropleth Maps. But we need to offer the Geojson files to draw the map. The folium command is simple, but how to get Geojson is difficult. we need to find GIS info and switch it into geojson format. Fortunately,We find ways to get geoJson format file: <a href="http://stackoverflow.com/questions/17267248/how-where-do-i-get-geojson-data-for-states-provinces-and-administrative-region" target="_blank" rel="noopener">source</a></p><ul><li>Install the Quantum GIS framework <a href="http://www.qgis.org/e/qgis" target="_blank" rel="noopener">http://www.qgis.org/e/qgis</a>.<ul><li>If you are on Mac OS X, you can use this version <a href="http://www.kyngchaos.com/software" target="_blank" rel="noopener">http://www.kyngchaos.com/software</a> </li><li>This will give you the ogr2ogr utility used for converting shapefiles to geoJSON</li></ul></li><li>Download the shapefiles for your country from here <a href="http://www.gadm.org/country" target="_blank" rel="noopener">http://www.gadm.org/country</a> and unzip<ul><li>For Canada, and possibly other countries, the shapefile with suffix 0 is for the country boundary and the suffix 1 is for the internal regions. Not sure if this naming is consistent across countries.</li></ul></li><li>Upload the region level shapefile to MapShaper <a href="http://mapshaper.com/test/MapShaper.swf" target="_blank" rel="noopener">http://mapshaper.com/test/MapShaper.swf</a> or <a href="http://www.mapshaper.org" target="_blank" rel="noopener">http://www.mapshaper.org</a>. <ul><li>You can skip this step if you don’t care to optimize the size of your resulting geoJSON</li><li>Set the ‘simplification level’ slider in MapShaper to the desired level and export the simplified shapefile as ‘Shapefile - Polygons’</li></ul></li><li>Download .shp and .shx file to the local directory where you unzipped the original shapefiiles, replace the original files with the simplified ones.</li><li>Navigate to the local directory and run the command below, replacing <shapefile> with the actual name of the shapefile you want to convert.<br><code>ogr2ogr -f geoJSON regions.json &lt;shapefile&gt;.shp</code></shapefile></li><li>You should now have the regions for your country in geoJSON format. Check to make sure there are paths defined in regions.json and that property fields were maintained (ex. region name).</li></ul><p>Then we should have the Choropleth maps:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">china_geo=<span class="string">r'geojson/chn_adm1_2.json'</span></span><br><span class="line"></span><br><span class="line">csv_data = <span class="string">r'data/CN-gdp-2014.csv'</span></span><br><span class="line">state_data = pd.read_csv(csv_data,encoding=<span class="string">'gbk'</span>)</span><br><span class="line">map_ch = folium.Map(location=[<span class="number">50</span>, <span class="number">120</span>], zoom_start=<span class="number">3</span>)</span><br><span class="line">map_ch.geo_json(geo_path=china_geo, data=state_data,</span><br><span class="line">             columns=[<span class="string">'province'</span>, <span class="string">'GDP-2014'</span>],</span><br><span class="line">             <span class="comment">#threshold_scale=[6, 7, 8, 9, 10,11,12,13],</span></span><br><span class="line">             key_on=<span class="string">'feature.properties.HASC_1'</span>,</span><br><span class="line">             fill_color=<span class="string">'BuPu'</span>, fill_opacity=<span class="number">0.7</span>, line_opacity=<span class="number">0.5</span>,</span><br><span class="line">             legend_name=<span class="string">'GDP Rate (%)'</span>,reset=<span class="keyword">True</span>)</span><br><span class="line">map_ch.create_map(<span class="string">'cn_states.html'</span>)</span><br></pre></td></tr></table></figure><p>download the <a href="/files/folium_Choropleth.rar">source code</a></p><p><a href="https://github.com/amueller/word_cloud" target="_blank" rel="noopener">word_cloud</a><br><a href="https://github.com/aaren/notedown" target="_blank" rel="noopener">ipynb to md</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post breifly records my learning on how to visualiza the GIS info on the map by python. I attempted different ways to visualize my gis data by python. I was very luck to find two powerful package to deal with data visualization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vincent &lt;a href=&quot;http://vincent.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;folium  &lt;a href=&quot;https://pypi.python.org/pypi/folium&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The two package offers different ways to visualize gis info on the map. And most importantly, it is easy to get started! &lt;/p&gt;
    
    </summary>
    
      <category term="Data Science" scheme="http://xiaofeima1990.github.io/categories/Data-Science/"/>
    
    
      <category term="GIS" scheme="http://xiaofeima1990.github.io/tags/GIS/"/>
    
      <category term="python" scheme="http://xiaofeima1990.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Pandas Techniques</title>
    <link href="http://xiaofeima1990.github.io/2016/05/07/pandas-snippets/"/>
    <id>http://xiaofeima1990.github.io/2016/05/07/pandas-snippets/</id>
    <published>2016-05-07T14:05:09.000Z</published>
    <updated>2018-05-19T00:15:29.851Z</updated>
    
    <content type="html"><![CDATA[<p>Python Pandas Data Analysis </p><a id="more"></a><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>source from <a href="https://gist.github.com/bsweger/e5817488d161f37dcbd2" target="_blank" rel="noopener">pandas snippets</a> </p><p>the following is cited from online sources<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#List unique values in a DataFrame column</span></span><br><span class="line">pd.unique(df.column_name.ravel())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Convert Series datatype to numeric, getting rid of any non-numeric values</span></span><br><span class="line">df[<span class="string">'col'</span>] = df[<span class="string">'col'</span>].astype(str).convert_objects(convert_numeric=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Grab DataFrame rows where column has certain values</span></span><br><span class="line">valuelist = [<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'value3'</span>]</span><br><span class="line">df = df[df.column.isin(value_list)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Grab DataFrame rows where column doesn't have certain values</span></span><br><span class="line">valuelist = [<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'value3'</span>]</span><br><span class="line">df = df[~df.column.isin(value_list)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Delete column from DataFrame</span></span><br><span class="line"><span class="keyword">del</span> df[<span class="string">'column'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Select from DataFrame using criteria from multiple columns</span></span><br><span class="line">newdf = df[(df[<span class="string">'column_one'</span>]&gt;<span class="number">2004</span>) &amp; (df[<span class="string">'column_two'</span>]==<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Rename several DataFrame columns</span></span><br><span class="line">df = df.rename(columns = &#123;</span><br><span class="line">    <span class="string">'col1 old name'</span>:<span class="string">'col1 new name'</span>,</span><br><span class="line">    <span class="string">'col2 old name'</span>:<span class="string">'col2 new name'</span>,</span><br><span class="line">    <span class="string">'col3 old name'</span>:<span class="string">'col3 new name'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#lower-case all DataFrame column names</span></span><br><span class="line">df.columns = map(str.lower, df.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment">#even more fancy DataFrame column re-naming</span></span><br><span class="line"><span class="comment">#lower-case all DataFrame column names (for example)</span></span><br><span class="line">df.rename(columns=<span class="keyword">lambda</span> x: x.split(<span class="string">'.'</span>)[<span class="number">-1</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Loop through rows in a DataFrame</span></span><br><span class="line"><span class="comment">#(if you must)</span></span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="keyword">print</span> index, row[<span class="string">'some column'</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#Next few examples show how to work with text data in Pandas.</span></span><br><span class="line"><span class="comment">#Full list of .str functions: http://pandas.pydata.org/pandas-docs/stable/text.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Slice values in a DataFrame column (aka Series)</span></span><br><span class="line">df.column.str[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Lower-case everything in a DataFrame column</span></span><br><span class="line">df.column_name = df.column_name.str.lower()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get length of data in a DataFrame column</span></span><br><span class="line">df.column_name.str.len()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Sort dataframe by multiple columns</span></span><br><span class="line">df = df.sort([<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>],ascending=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#get top n for each group of columns in a sorted dataframe</span></span><br><span class="line"><span class="comment">#(make sure dataframe is sorted first)</span></span><br><span class="line">top5 = df.groupby([<span class="string">'groupingcol1'</span>, <span class="string">'groupingcol2'</span>]).head(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Grab DataFrame rows where specific column is null/notnull</span></span><br><span class="line">newdf = df[df[<span class="string">'column'</span>].isnull()]</span><br><span class="line"></span><br><span class="line"><span class="comment">#select from DataFrame using multiple keys of a hierarchical index</span></span><br><span class="line">df.xs((<span class="string">'index level 1 value'</span>,<span class="string">'index level 2 value'</span>), level=(<span class="string">'level 1'</span>,<span class="string">'level 2'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Change all NaNs to None (useful before</span></span><br><span class="line"><span class="comment">#loading to a db)</span></span><br><span class="line">df = df.where((pd.notnull(df)), <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get quick count of rows in a DataFrame</span></span><br><span class="line">len(df.index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Pivot data (with flexibility about what what</span></span><br><span class="line"><span class="comment">#becomes a column and what stays a row).</span></span><br><span class="line"><span class="comment">#Syntax works on Pandas &gt;= .14</span></span><br><span class="line">pd.pivot_table(</span><br><span class="line">  df,values=<span class="string">'cell_value'</span>,</span><br><span class="line">  index=[<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>], <span class="comment">#these stay as columns</span></span><br><span class="line">  columns=[<span class="string">'col4'</span>]) <span class="comment">#data values in this column become their own column</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#change data type of DataFrame column</span></span><br><span class="line">df.column_name = df.column_name.astype(np.int64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get rid of non-numeric values throughout a DataFrame:</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> refunds.columns.values:</span><br><span class="line">  refunds[col] = refunds[col].replace(<span class="string">'[^0-9]+.-'</span>, <span class="string">''</span>, regex=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Set DataFrame column values based on other column values</span></span><br><span class="line">df[<span class="string">'column_to_change'</span>][(df[<span class="string">'column1'</span>] == some_value) &amp; (df[<span class="string">'column2'</span>] == some_other_value)] = new_value</span><br><span class="line"></span><br><span class="line"><span class="comment">#Clean up missing values in multiple DataFrame columns</span></span><br><span class="line">df = df.fillna(&#123;</span><br><span class="line">    <span class="string">'col1'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col2'</span>: <span class="string">'99.999'</span>,</span><br><span class="line">    <span class="string">'col3'</span>: <span class="string">'999'</span>,</span><br><span class="line">    <span class="string">'col4'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col5'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col6'</span>: <span class="string">'99'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Concatenate two DataFrame columns into a new, single column</span></span><br><span class="line"><span class="comment">#(useful when dealing with composite keys, for example)</span></span><br><span class="line">df[<span class="string">'newcol'</span>] = df[<span class="string">'col1'</span>].map(str) + df[<span class="string">'col2'</span>].map(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Doing calculations with DataFrame columns that have missing values</span></span><br><span class="line"><span class="comment">#In example below, swap in 0 for df['col1'] cells that contain null</span></span><br><span class="line">df[<span class="string">'new_col'</span>] = np.where(pd.isnull(df[<span class="string">'col1'</span>]),<span class="number">0</span>,df[<span class="string">'col1'</span>]) + df[<span class="string">'col2'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Split delimited values in a DataFrame column into two new columns</span></span><br><span class="line">df[<span class="string">'new_col1'</span>], df[<span class="string">'new_col2'</span>] = zip(*df[<span class="string">'original_col'</span>].apply(<span class="keyword">lambda</span> x: x.split(<span class="string">': '</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Collapse hierarchical column indexes</span></span><br><span class="line">df.columns = df.columns.get_level_values(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Convert Django queryset to DataFrame</span></span><br><span class="line">qs = DjangoModelName.objects.all()</span><br><span class="line">q = qs.values()</span><br><span class="line">df = pd.DataFrame.from_records(q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a DataFrame from a Python dictionary</span></span><br><span class="line">df = pd.DataFrame(list(a_dictionary.items()), columns = [<span class="string">'column1'</span>, <span class="string">'column2'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># create panel data </span></span><br><span class="line">concated = pd.concat(list_of_frames)</span><br><span class="line">items = [<span class="string">'age'</span>, <span class="string">'weight'</span>, <span class="string">'score'</span>]</span><br><span class="line">pd.Panel(dict(zip(items, [concated.pivot(index=<span class="string">'date'</span>, columns=<span class="string">'id'</span>, values=i) <span class="keyword">for</span> i <span class="keyword">in</span> items])))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python Pandas Data Analysis &lt;/p&gt;
    
    </summary>
    
      <category term="Data Science" scheme="http://xiaofeima1990.github.io/categories/Data-Science/"/>
    
    
      <category term="python" scheme="http://xiaofeima1990.github.io/tags/python/"/>
    
  </entry>
  
</feed>
