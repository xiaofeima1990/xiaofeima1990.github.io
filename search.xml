<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Understanding Convolutional Neural Network</title>
      <link href="/2018/09/13/understand_CNN/"/>
      <url>/2018/09/13/understand_CNN/</url>
      <content type="html"><![CDATA[<p>Convolutional Neural Network 由两部分组成：convolution 和 neural network。想要深入了解CNN，我们首先需要了解什么事convolution，以及如何将convolution引入到neural network中。</p><h2 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h2><p>在数学上，convolution 定义为：</p><blockquote><p>In mathematics (and, in particular, functional analysis) convolution is a mathematical operation on two functions (f and g) to produce a third function that expresses how the shape of one is modified by the other</p></blockquote><p>卷积可以看作是两个函数 $f$ 和 $g$ 生成第三个函数的一种数学算子，表征函数（不动的）$f$ 与经过反转或者平移 $g$ 的乘积所生成的新函数围成的曲边梯形面积。上述文字的确很难理解，我们首先观察convolution的数学表达式：</p><script type="math/tex; mode=display">\int^{\infty}_{-\infty} f(\tau)g(x-\tau)d\tau = (f*g)(x) = h(x)</script><p>简单来说，我们固定一个“不动”的函数$f$ , 我们想要知道如果另一个函数$g$“路过”这个$f$函数，这两个相互作用会发生什么奇怪的行为。真实的例子比如我们想从一段音频中，提取出一些对我们有用的音频信息。</p><p><img src="\pic\pig\Convolution_of_box_signal_with_itself2.gif" alt="onvolution_of_box_signal_with_itself"> </p><p>简单来说，就是让 $g$ “走过整”个 $f$ (用某种滤波函数遍历音频资料)，看两者交叠地方的面积变化情况，不同的$g$ 作用在 $f$ 上会有不同的结果。某种程度上来说，我用不同的滤波函数 $g$ 可以从 $f$ 中提取不同方面的信息或特点。比如，上图所展示的就是用正方形 $g$ 来遍历 $f$，得到的是一个新的三角形卷积函数。如果我们用三角形，或者半圆形，那么我们得到的自然是不同的卷积函数。</p><p>接下来的问题可能是为何新的卷积函数是三角形的呢？而且为何是从”-1”这个点开始的呢？为回答上述问题，我们首先 从卷积的定义出发，卷积相当于两个函数相乘得到一个新的函数，但不是简单的 $f(3)<em>g(2)$, 而是给定某个点，比如 $5$ , 看所有能够到达5的新函数($f(\tau)g(5-\tau)$)乘积加总，从而构成新函数在$5$的上面的值，即：$(f</em>g)(5)=\int^{\infty}_{-\infty} f(\tau)g(5-\tau)d\tau $。如果上述解释还是过于抽象，那么下面扔球的小例子可能更有助于理解：</p><p>当我们扔一个球到地上的时候，球到地面的运动距离就是一个简单一维的运动情况。但假如我们固定让小球要运动$c$ 距离，但允许我们扔两次，并且第二次从第一次触碰地方开始扔。我们标记第一次运动落点的密度函数为$f(a)$，第二次落点的密度函数为$g(b)$。</p><p><img src="\pic\pig\ProbConv-fagb.png" alt="robConv-fag"></p><p>那么其两次加起来移动$c$ 距离可以有多种可能。因为如果固定$c=3$,那么 a 和 b 的选择可以是 $a=2,b=1; a=1,b=2; a=0,b=3; … $ </p><p><img src="\pic\pig\ProbConv-OnePath.png" alt="robConv-OnePat"></p><p>因此为了找到所有的可能，我们需要把其全部加总。所以，两次合起来小球移动距离$c$的密度函数应当表达为：</p><script type="math/tex; mode=display">\sum_{a+b=c} f(a)\cdot g(b) \ \ \text{or} \ \ \int^{\infty}_{-\infty} f(\tau)g(c-\tau)d\tau</script><p><img src="\pic\pig\ProbConv-SumPaths.png" alt="robConv-SumPath"></p><p>上述讨论的是一维的情况，高维的情况遵循同样的原理，比如一个球落地时我们不仅考虑在一条直线上的运动，进一步，我们考虑在一个平面上的落点：</p><p><img src="\pic\pig\ProbConv-TwoDim.png" alt="robConv-TwoDi"></p><p>而计算convolution还是跟之前一样：</p><script type="math/tex; mode=display">(f*g) (c) = \sum_{a+b=c} f(a)\cdot g(b)</script><p>些许不同的地方在于现在 $a$ 和 $b$ 是向量形式， 即：</p><script type="math/tex; mode=display">(f*g)(c_1,c_2) = \sum_{a_1, a_2} f(a_1,a_2) \cdot g(c_1 - a_1, c_2 - a_2)</script><p>当我们加总后，从落点$a$出发，到最终$c$位置的密度函数的convolution，可以表示为：</p><p><img src="\pic\pig\ProbConv-Intermediate.png" alt="robConv-Intermediat"></p><p>那么不同位置的新函数可以表示为（第一个为较为稠密的新convolution，第二个为较为稀疏的新convolution）：</p><p><img src="\pic\pig\ProbConv-Intermediate-Align.png" alt="robConv-Intermediate-Alig"></p><p><img src="\pic\pig\ProbConv-Intermediate-Sep.png" alt="robConv-Intermediate-Se"></p><h3 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h3><p>convolution 一个主要应用领域就是图像识别。因为图像可以被简单看作二维函数(矩阵)（当然还有不同的色彩），而进行图像的各种变换就是利用可中过滤(filter or kernel)函数来对图像进行各种convolution处理。</p><p><img src="\pic\pig\RiverTrain-ImageConvDiagram.png" alt="iverTrain-ImageConvDiagra"></p><p>例如，对图像进行虚化，我们可以通过平均kernel矩阵上面的像素(pixel)来做到，通过kernel 作用到原图像上，进而生成新图像，我们得到：</p><p><img src="\pic\pig\RiverTrain-ImageConvDiagram.png" alt="iverTrain-ImageConvDiagra"></p><p> 我们同样可以侦测图像的形状边缘，通过设定-1 和 1 在两个相邻像素(pixel)上并且其他位置设定为0，这构成来用来侦测边缘的过滤矩阵。</p><p><img src="\pic\pig\Gimp-Edge.png" alt="imp-Edg"></p><h2 id="Convolutional-Neural-Network"><a href="#Convolutional-Neural-Network" class="headerlink" title="Convolutional Neural Network"></a>Convolutional Neural Network</h2><p>接下来的问题就是convolution如何跟convolutional neural network 联系上的？ </p><p>现在考虑一个一维的convolutional layer, 输入$x_n$，输出$y_n$ ，$A$ 代表着neurons，而neuron在neural network可以被表示为：</p><script type="math/tex; mode=display">\sigma(\omega_0 x_0 + \omega_1 x_1 + \omega_2 x_2 + ... + b)</script><p>权重系数$\omega_0, \omega_1, …, $ 描述了每个neuron如何与输入数据进行联系的。值得注意的是权重系数$\omega$是神经网络的核心，控制着每一层神经网络的表现。注意，当我们说每一层中若干个neurons一样，相当于这些neurons 的权重系数（矩阵）都相同。</p><p>用图像表示一般情况下的neural network 则是：</p><p><img src="\pic\pig\Conv-9-Conv2-XY.png" alt="onv-9-Conv2-X"></p><p>但在convolutional neural network 中， 有许多相同的neuron作用于不同的输入数据上，因此，许多相同的权重矩阵重复出现在不同的neuron上。</p><p><img src="\pic\pig\Conv-9-Conv2-XY-W.png" alt="onv-9-Conv2-XY-"></p><p>简单来说，正常的neural network中，权重矩阵用不同的权重系数连接不同的输入数据和输出位置。</p><script type="math/tex; mode=display">W = \left[\begin{array}{ccccc} W_{0,0} & W_{0,1} & W_{0,2} & W_{0,3} & ...\\W_{1,0} & W_{1,1} & W_{1,2} & W_{1,3} & ...\\W_{2,0} & W_{2,1} & W_{2,2} & W_{2,3} & ...\\W_{3,0} & W_{3,1} & W_{3,2} & W_{3,3} & ...\\...     &   ...   &   ...   &  ...    & ...\\\end{array}\right]</script><p>但在convolutional layer 中，同样的权重重复出现在不同的位置，而且每一个neuron不是连接所有的输入数据，因此，其权重矩阵表现为：</p><script type="math/tex; mode=display">W = \left[\begin{array}{ccccc} w_0 & w_1 &  0  &  0  & ...\\ 0  & w_0 & w_1 &  0  & ...\\ 0  &  0  & w_0 & w_1 & ...\\ 0  &  0  &  0  & w_0 & ...\\... & ... & ... & ... & ...\\\end{array}\right]</script><p>当输入数据（向量）与该矩阵相乘时，就相当于被某个函数在进行convolution操作一样。</p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Practical Problems in Applied Econometrics</title>
      <link href="/2018/09/12/Problems%20in%20Ecocomectrics/"/>
      <url>/2018/09/12/Problems%20in%20Ecocomectrics/</url>
      <content type="html"><![CDATA[<p>This post summarize some practical problems in applied econmetrics</p><ul><li>Incidental parameter problem</li></ul><a id="more"></a><h3 id="Incidental-parameter-problem"><a href="#Incidental-parameter-problem" class="headerlink" title="Incidental parameter problem"></a>Incidental parameter problem</h3><p> the fixed effects estimators of nonlinear panel data models can be severely biased because of the “well-known” incidental parameter problem.<br> In FE models of the type</p><script type="math/tex; mode=display">y_{it}=\alpha_i+\beta X_{it}+u_{it}</script><p>$\alpha$ is the incidental parameter, because theoretically speaking, it is of a secondary importance. Usually, $\beta$ is the important parameter, statistically speaking. But in essence, $\alpha$ is important because it provides useful information on the individual intercept.</p><p>Most of the panels are short, i.e., T is relatively small. In order to illustrate the incidental parameter problem I will disregard $\beta$ for simplicity. So the model is now:</p><script type="math/tex; mode=display">y_{it}=\alpha_i+u_{it},\ \ u_{it} \sim N(0,\sigma^2)</script><p>So by using deviations from means method we have $\hat{u}_{it}=y_{it}−\bar{y}_i$ and that’s how we can get $\alpha$. Lets have a look on the estimate for $\sigma^2$:</p><script type="math/tex; mode=display">\sigma^2=\frac{1}{NT} \sum_{i} \sum{t}(y_{it}-\bar{y}_i)  \sum_i \sum_t (y_{it}−\bar{y}_i)^2=\sigma^2 \frac{\xi^2_N(T−1)}{NT}=\sigma^2 \frac{N(T−1)}{NT}= \sigma^2 \frac{T−1}{T}</script><p>You can see that if $T$ is “large” then the term \frac{T−1}{T} disappears, BUT, if $T$ is small (which is the case in most of the panels) then the estimate of σ2 will be inconsistent. This makes the FE estimator to be inconsistent.</p><p>The reason \beta is usually consistent because usually $N$ is indeed sufficiently large and therefore has the desired asymptotic requirements.</p><p>Note that in spatial panels for example, the situation is opposite - $T$ is usually considered large enough, but $N$ is fixed. So the asymptotics comes from $T$. Therefore in spatial panels you need a large $T$!</p>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> econometric </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>understanding decorator</title>
      <link href="/2018/08/16/understanding-decorator/"/>
      <url>/2018/08/16/understanding-decorator/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="Decorator-in-Python"><a href="#Decorator-in-Python" class="headerlink" title="Decorator in Python"></a>Decorator in Python</h1><p>Many times when you read the code, you will find some annoying synax like <code>@somefunction</code>. What does that mean? That is the decorator in python. The synax for the decorator has the following definition and function: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line">var = some_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># which would be the same as</span></span><br><span class="line"></span><br><span class="line">var = decorator(some_value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># and can be chained as well:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="meta">@decorator_2</span></span><br><span class="line">var = some_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># which would be</span></span><br><span class="line"></span><br><span class="line">var = decorator(decorator_2(some_value))</span><br></pre></td></tr></table></figure><p>the main advantage is that you can use the decorator as a standardized way to create variables that have the same behaviour, instead<br>of havng to do that using methods. I think that a lot can be gained by specifying a decorator that can decorate variables or properties.</p><p><strong>BUT</strong>, just look at the synax again, the decorator actually help developer to initialize the variable before the invoke of the function. for example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">list_function=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_function_lists</span><span class="params">(f)</span>:</span></span><br><span class="line">list_function.append(f)</span><br><span class="line">print(<span class="string">"this is decorator"</span>)</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_function_lists</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"this is function a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_function_lists</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"this is function b"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">The above code has no initilization or instance to call the function. But can you guess the result when we codpy the code into the python complier? </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">this <span class="keyword">is</span> decorator</span><br><span class="line">this <span class="keyword">is</span> decorator</span><br></pre></td></tr></table></figure><p>if we check the <code>list_function</code>, we will find </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list_function</span><br><span class="line">&gt;&gt;&gt;[&lt;function __main__.a&gt;, &lt;function __main__.b&gt;]</span><br></pre></td></tr></table></figure><p>In order to have a deeper understanding of the decorator, remember that functions are objects in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> word.capitalize()+<span class="string">"!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> shout()</span><br><span class="line"><span class="comment"># outputs : 'Yes!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># As an object, you can assign the function to a variable like any</span></span><br><span class="line"><span class="comment"># other object </span></span><br><span class="line"></span><br><span class="line">scream = shout</span><br><span class="line"></span><br><span class="line"><span class="comment"># Notice we don't use parentheses: we are not calling the function, we are</span></span><br><span class="line"><span class="comment"># putting the function "shout" into the variable "scream". </span></span><br><span class="line"><span class="comment"># It means you can then call "shout" from "scream":</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> scream()</span><br><span class="line"><span class="comment"># outputs : 'Yes!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># More than that, it means you can remove the old name 'shout', and</span></span><br><span class="line"><span class="comment"># the function will still be accessible from 'scream'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> shout</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> shout()</span><br><span class="line"><span class="keyword">except</span> NameError, e:</span><br><span class="line">    <span class="keyword">print</span> e</span><br><span class="line">    <span class="comment">#outputs: "name 'shout' is not defined"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> scream()</span><br><span class="line"><span class="comment"># outputs: 'Yes!'</span></span><br></pre></td></tr></table></figure><p>Another interesting property of Python functions is they can be defined… inside another function!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># You can define a function on the fly in "talk" ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whisper</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> word.lower()+<span class="string">"..."</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... and use it right away!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> whisper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># You call "talk", that defines "whisper" EVERY TIME you call it, then</span></span><br><span class="line"><span class="comment"># "whisper" is called in "talk". </span></span><br><span class="line">talk()</span><br><span class="line"><span class="comment"># outputs: </span></span><br><span class="line"><span class="comment"># "yes..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># But "whisper" DOES NOT EXIST outside "talk":</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> whisper()</span><br><span class="line"><span class="keyword">except</span> NameError, e:</span><br><span class="line">    <span class="keyword">print</span> e</span><br><span class="line">    <span class="comment">#outputs : "name 'whisper' is not defined"*</span></span><br></pre></td></tr></table></figure><p>Usually, people use decorator to define a insider functions for invoke. The following is the example without decorator<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># A decorator is a function that expects ANOTHER function as parameter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_shiny_new_decorator</span><span class="params">(a_function_to_decorate)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Inside, the decorator defines a function on the fly: the wrapper.</span></span><br><span class="line">    <span class="comment"># This function is going to be wrapped around the original function</span></span><br><span class="line">    <span class="comment"># so it can execute code before and after it.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">the_wrapper_around_the_original_function</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Put here the code you want to be executed BEFORE the original </span></span><br><span class="line">        <span class="comment"># function is called</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Before the function runs"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Call the function here (using parentheses)</span></span><br><span class="line">        a_function_to_decorate()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Put here the code you want to be executed AFTER the original </span></span><br><span class="line">        <span class="comment"># function is called</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"After the function runs"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># At this point, "a_function_to_decorate" HAS NEVER BEEN EXECUTED.</span></span><br><span class="line">    <span class="comment"># We return the wrapper function we have just created.</span></span><br><span class="line">    <span class="comment"># The wrapper contains the function and the code to execute before</span></span><br><span class="line">    <span class="comment"># and after. It's ready to use!</span></span><br><span class="line">    <span class="keyword">return</span> the_wrapper_around_the_original_function</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now imagine you create a function you don't want to ever touch again.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_stand_alone_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I am a stand alone function, don't you dare modify me"</span></span><br><span class="line"></span><br><span class="line">a_stand_alone_function() </span><br><span class="line"><span class="comment">#outputs: I am a stand alone function, don't you dare modify me</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Well, you can decorate it to extend its behavior.</span></span><br><span class="line"><span class="comment"># Just pass it to the decorator, it will wrap it dynamically in </span></span><br><span class="line"><span class="comment"># any code you want and return you a new function ready to be used:</span></span><br><span class="line"></span><br><span class="line">a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)</span><br><span class="line">a_stand_alone_function_decorated()</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#Before the function runs</span></span><br><span class="line"><span class="comment">#I am a stand alone function, don't you dare modify me</span></span><br><span class="line"><span class="comment">#After the function runs</span></span><br></pre></td></tr></table></figure></p><p>When we start using decorator, the world becomes simple:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@my_shiny_new_decorator</span><br><span class="line">def another_stand_alone_function():</span><br><span class="line">    print &quot;Leave me alone&quot;</span><br><span class="line"></span><br><span class="line">another_stand_alone_function()  </span><br><span class="line">#outputs:  </span><br><span class="line">#Before the function runs</span><br><span class="line">#Leave me alone</span><br><span class="line">#After the function runs</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to Use Pandoc</title>
      <link href="/2018/06/01/pandoc_start/"/>
      <url>/2018/06/01/pandoc_start/</url>
      <content type="html"><![CDATA[<p>About <a href="http://pandoc.org/installing.html" target="_blank" rel="noopener">pandoc</a></p><p>If you need to convert files from one markup format into another, pandoc is your swiss-army knife. Pandoc can convert documents in markdown, reStructuredText, textile, HTML, DocBook, LaTeX, MediaWiki markup, TWiki markup, OPML, Emacs Org-Mode, Txt2Tags, Microsoft Word docx, LibreOffice ODT, EPUB, or Haddock markup to</p><ul><li>HTML formats: XHTML, HTML5, and HTML slide shows using Slidy, reveal.js, Slideous, S5, or DZSlides.</li><li>Word processor formats: Microsoft Word docx, OpenOffice/LibreOffice ODT, OpenDocument XML</li><li>Ebooks: EPUB version 2 or 3, FictionBook2</li><li>Documentation formats: DocBook, TEI Simple, GNU TexInfo, Groff man pages, Haddock markup</li><li>Page layout formats: InDesign ICML</li><li>Outline formats: OPML</li><li>TeX formats: LaTeX, ConTeXt, LaTeX Beamer slides</li><li>PDF via LaTeX</li><li>Lightweight markup formats: Markdown (including CommonMark), reStructuredText, AsciiDoc, MediaWiki markup, DokuWiki markup, Emacs Org-Mode, Textile</li><li>Custom formats: custom writers can be written in lua.</li></ul><h2 id="installing"><a href="#installing" class="headerlink" title="installing"></a>installing</h2><p>you can install pandoc from its <a href="https://github.com/jgm/pandoc/releases/tag/1.17.0.2" target="_blank" rel="noopener">website</a></p><h2 id="geting-started"><a href="#geting-started" class="headerlink" title="geting started"></a>geting started</h2><p>for example, if you want to convert latex file (demo.tex )into md, then you can : </p><ol><li>change path into the file directory </li><li>use the command <code>pandoc demo.tex -f latex -t markdown -s -o demo.md</code>  convert latex to markdown</li><li>use the commond <code>pandoc demo.md -f markdown -t html -s -o demo.html</code>  convert markdown to html</li></ol><p>pretty simple right ?! </p><p>for more information, you can see from <a href="http://pandoc.org" target="_blank" rel="noopener">http://pandoc.org</a></p>]]></content>
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>US Airline Flight Route Map</title>
      <link href="/2018/05/19/airline%20flight%20route%20map/"/>
      <url>/2018/05/19/airline%20flight%20route%20map/</url>
      <content type="html"><![CDATA[<p>In this post, I try to summarize the the construction of US Airline Flight Map. The data source comes from <a href="https://www.transtats.bts.gov/Tables.asp?DB_ID=125" target="_blank" rel="noopener">Bureau of Transportation Statistics</a>. The first thing is to obtain the local airport information. For example, the GIS location, the carrier’s market share and market construction, and the distance from the near HUB. Secondly, I want to draw the flight route map. </p><a id="more"></a><h2 id="Airport-Information"><a href="#Airport-Information" class="headerlink" title="Airport Information"></a>Airport Information</h2><p>To get the local airport information, we can extract from the data and use gis information to calculate distance. The whole process can be divided by three steps. </p><ol><li>extract all the flight routes flying into the particular airport</li><li>use airport address to get GIS information</li><li>organize the information and output the local airport information.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> geocoder</span><br><span class="line"><span class="keyword">from</span> geopy <span class="keyword">import</span> distance</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">DICT_HUB=&#123;</span><br><span class="line">        <span class="string">"PA"</span>:<span class="string">'PHL'</span>,</span><br><span class="line">        <span class="string">"MI"</span>:<span class="string">'DTW'</span>,</span><br><span class="line">        <span class="string">"WV"</span>:<span class="string">"DCA"</span>,</span><br><span class="line">        <span class="string">"IL"</span>:<span class="string">"ORD"</span>,</span><br><span class="line">        <span class="comment"># and we can also add other hubs in different States</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">path=<span class="string">"your path directory"</span></span><br><span class="line">STATE=input(<span class="string">"input the state you want "</span>)</span><br><span class="line">Year= input(<span class="string">"input the year and quarter you want"</span>)</span><br><span class="line"><span class="comment"># load the data</span></span><br><span class="line">market_pd=pd.read_csv(path+STATE+Year+<span class="string">".csv"</span>) <span class="comment"># like this </span></span><br><span class="line"></span><br><span class="line">airport_pd=pd.read_csv(path+<span class="string">"airport_statistics.csv"</span>) </span><br><span class="line">col=list(market_pd.columns)</span><br><span class="line">market_pd.drop(col[<span class="number">-1</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>) <span class="comment">#drop a columns </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## first let me focus on only one routes from other state to PA</span></span><br><span class="line">market_pd_1=market_pd.loc[market_pd[<span class="string">'DEST_STATE_ABR'</span>]==STATE,]</span><br><span class="line">STATE_airports=list(market_pd_1[<span class="string">'DEST'</span>].unique())</span><br><span class="line">year=list(market_pd_1[<span class="string">'YEAR'</span>].unique())[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## gropuby airports from origin to dest </span></span><br><span class="line">group_airport=market_pd_1.groupby([<span class="string">'ORIGIN'</span>,<span class="string">'DEST'</span>])</span><br><span class="line">routes_list=group_airport.groups.keys()</span><br><span class="line">col_info=[<span class="string">'code'</span>,<span class="string">'year'</span>,<span class="string">'name'</span>,<span class="string">'address'</span>,<span class="string">'lat'</span>,<span class="string">'lgt'</span>,<span class="string">'dis_to_hub0'</span>,<span class="string">'carriers'</span>,<span class="string">'major_airline'</span>,<span class="string">'ratio_1'</span>]</span><br><span class="line">State_airport_info=pd.DataFrame(index=STATE_airports,columns=col_info)</span><br><span class="line"></span><br><span class="line"><span class="comment">## HUB airport in State</span></span><br><span class="line">add_HUB=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==DICT_HUB[STATE],<span class="string">'add'</span>].values[<span class="number">0</span>]</span><br><span class="line">geo_info_HUB= geocoder.google(add_HUB)</span><br><span class="line"></span><br><span class="line"><span class="comment">## return GIS information and calculate the distance </span></span><br><span class="line"><span class="keyword">for</span> nn_airport <span class="keyword">in</span> STATE_airports:</span><br><span class="line">    </span><br><span class="line">    new_gb = pd.concat( [ group_airport.get_group(name) <span class="keyword">for</span> name,group <span class="keyword">in</span> group_airport <span class="keyword">if</span> name[<span class="number">1</span>]==nn_airport ] )</span><br><span class="line">    new_gb.drop_duplicates([<span class="string">'ORIGIN'</span>],keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## get carrier information from different routes</span></span><br><span class="line">    new_gb[<span class="string">'last_carrier'</span>]=new_gb[<span class="string">'TK_CARRIER_GROUP'</span>].str.strip(<span class="string">"-|:"</span>)</span><br><span class="line">    new_gb[<span class="string">'last_carrier'</span>]=new_gb[<span class="string">'last_carrier'</span>].str[<span class="number">-2</span>:]</span><br><span class="line">    new_gb = new_gb[new_gb[<span class="string">'last_carrier'</span>] != <span class="string">''</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## get market ratio</span></span><br><span class="line">    carr_pd=new_gb.groupby(<span class="string">"last_carrier"</span>)</span><br><span class="line">    carr_pd=pd.DataFrame(carr_pd[<span class="string">'ITIN_ID'</span>].count())</span><br><span class="line">    carr_pd[<span class="string">'ratio'</span>]=carr_pd[<span class="string">'ITIN_ID'</span>]/sum(carr_pd[<span class="string">'ITIN_ID'</span>])</span><br><span class="line">    carr_pd.sort_values(by=<span class="string">'ratio'</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    carriers=list(zip(carr_pd.index, carr_pd.ratio))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## rest is the geographic infomation and population </span></span><br><span class="line">    <span class="comment">## use goocode to calculate the distance </span></span><br><span class="line">    add_temp=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==nn_airport,<span class="string">'add'</span>].values[<span class="number">0</span>]</span><br><span class="line">    geo_info_temp= geocoder.google(add_temp)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> geo_info_temp.ok:</span><br><span class="line">        </span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        geo_info_temp= geocoder.google(nn_airport)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    airport_name=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==nn_airport,<span class="string">'name'</span>].values[<span class="number">0</span>]</span><br><span class="line">    dis_hub=distance.distance(geo_info_temp.latlng, geo_info_HUB.latlng).miles</span><br><span class="line">    </span><br><span class="line">    s=pd.Series([nn_airport,year,airport_name,add_temp,geo_info_temp.lat,geo_info_temp.lng,dis_hub,carriers,carriers[<span class="number">-1</span>][<span class="number">0</span>],carriers[<span class="number">-1</span>][<span class="number">1</span>]],index=col_info)</span><br><span class="line">    </span><br><span class="line">    State_airport_info.loc[nn_airport,]=s</span><br><span class="line"></span><br><span class="line">State_airport_info.reset_index(level=<span class="number">0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## output to airport information</span></span><br><span class="line">State_airport_info.to_csv(path+STATE+<span class="string">"_airport_info.csv"</span>,index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h2 id="Draw-the-airport-location-map"><a href="#Draw-the-airport-location-map" class="headerlink" title="Draw the airport location map"></a>Draw the airport location map</h2><p>Once we get airport infromation in different State, we can construct GIS information table and draw the map. (Currently, I just use all <code>airport_info.csv</code> to construct <code>airport_gis.csv</code> manually) The <code>airport_gis.csv</code> includes the airport information, i.e. gis information, major carriers and market ratio for the major carriers. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">path =<span class="string">"your data path "</span></span><br><span class="line">data_airport_gis=pd.read_csv(path+<span class="string">"airport_gis.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the focus location of the map</span></span><br><span class="line">map_1 = folium.Map(location=[<span class="number">40.8499873</span>,<span class="number">-77.8486889</span>], tiles=<span class="string">"Mapbox Bright"</span>, zoom_start=<span class="number">4</span>) <span class="comment"># focus location can be anywhere</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add gis info into the folium </span></span><br><span class="line"><span class="comment">## no major </span></span><br><span class="line">temp_pd=data_airport_gis[data_airport_gis[<span class="string">'Major'</span>]==<span class="number">0</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(temp_pd)):</span><br><span class="line">    folium.Marker([temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]], popup=temp_pd.iloc[i][<span class="string">'code'</span>],</span><br><span class="line">                  icon = folium.Icon(color=<span class="string">'green'</span>,prefix=<span class="string">"fa"</span>, icon=<span class="string">"plane"</span>),).add_to(map_1)</span><br><span class="line">    </span><br><span class="line"><span class="comment">## no major </span></span><br><span class="line">temp_pd=data_airport_gis[data_airport_gis[<span class="string">'Major'</span>]==<span class="number">1</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(temp_pd)):   </span><br><span class="line">    print(temp_pd.iloc[i][<span class="string">'code'</span>])</span><br><span class="line">    folium.Marker([temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]], popup=temp_pd.iloc[i][<span class="string">'code'</span>],</span><br><span class="line">                  icon = folium.Icon(color=<span class="string">'blue'</span>,prefix=<span class="string">"glyphicon"</span>, icon=<span class="string">"plane"</span>),).add_to(map_1)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># draw the circles </span></span><br><span class="line">    folium.Circle(</span><br><span class="line">      location=[temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]],</span><br><span class="line">      radius=<span class="number">1609</span>*<span class="number">200</span>,</span><br><span class="line">      popup=<span class="string">"200 miles"</span>,</span><br><span class="line">      color=<span class="string">'crimson'</span>,</span><br><span class="line">      fill=<span class="keyword">True</span>,</span><br><span class="line">      fill_color=<span class="string">'crimson'</span></span><br><span class="line">   ).add_to(map_1)</span><br><span class="line"></span><br><span class="line">    folium.Circle(</span><br><span class="line">      location=[temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]],</span><br><span class="line">      radius=<span class="number">1609</span>*<span class="number">300</span>,</span><br><span class="line">      popup=<span class="string">"300 miles"</span>,</span><br><span class="line">      color=<span class="string">'#32aaff'</span>,</span><br><span class="line">      fill=<span class="keyword">True</span>,</span><br><span class="line">      fill_color=<span class="string">'#32aaff'</span></span><br><span class="line">   ).add_to(map_1)</span><br><span class="line">    </span><br><span class="line">    folium.Circle(</span><br><span class="line">      location=[temp_pd.iloc[i][<span class="string">'lat'</span>], temp_pd.iloc[i][<span class="string">'lgt'</span>]],</span><br><span class="line">      radius=<span class="number">1609</span>*<span class="number">450</span>,</span><br><span class="line">      popup=<span class="string">"450 miles"</span>,</span><br><span class="line">      color=<span class="string">'#7f8eff'</span>,</span><br><span class="line">      fill=<span class="keyword">True</span>,</span><br><span class="line">      fill_color=<span class="string">'#7f8eff'</span></span><br><span class="line">   ).add_to(map_1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map_1.save(path+<span class="string">'map.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="Construct-flight-route-data"><a href="#Construct-flight-route-data" class="headerlink" title="Construct flight route data"></a>Construct flight route data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> geocoder</span><br><span class="line"><span class="keyword">from</span> geopy <span class="keyword">import</span> distance</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">DICT_HUB=&#123;</span><br><span class="line">        <span class="string">"PA"</span>:<span class="string">'PHL'</span>,</span><br><span class="line">        <span class="string">"MI"</span>:<span class="string">'DTW'</span>,</span><br><span class="line">        <span class="string">"WV"</span>:<span class="string">"DCA"</span>,</span><br><span class="line">        <span class="string">"IL"</span>:<span class="string">"ORD"</span>,</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">path =<span class="string">"your data path"</span></span><br><span class="line"><span class="comment">#STATE=input("input the state you want ")</span></span><br><span class="line"><span class="comment">#Year=input("time period ")</span></span><br><span class="line">STATE=<span class="string">"PA"</span></span><br><span class="line">Year=<span class="string">"2000Q1"</span></span><br><span class="line"></span><br><span class="line">market_pd=pd.read_csv(path+STATE+Year+<span class="string">".csv"</span>)</span><br><span class="line"></span><br><span class="line">airport_pd=pd.read_csv(path+<span class="string">"airport_statistics.csv"</span>) </span><br><span class="line">col=list(market_pd.columns)</span><br><span class="line">market_pd.drop(col[<span class="number">-1</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>) <span class="comment">#drop a columns </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## first let me focus on only one routes from other state to PA</span></span><br><span class="line">market_pd_1=market_pd.loc[market_pd[<span class="string">'DEST_STATE_ABR'</span>]==STATE,]</span><br><span class="line">STATE_airports=list(market_pd_1[<span class="string">'DEST'</span>].unique())</span><br><span class="line">year=list(market_pd_1[<span class="string">'YEAR'</span>].unique())[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#,'ORIGIN','ORIGIN_STATE_ABR','DEST','DEST_STATE_ABR'</span></span><br><span class="line">col_map=[<span class="string">'ITIN_ID'</span>, <span class="string">'MKT_ID'</span>,<span class="string">'AIRPORT_GROUP'</span>,<span class="string">'TK_CARRIER_GROUP'</span>,<span class="string">'MARKET_FARE'</span>,<span class="string">'MARKET_DISTANCE'</span>, <span class="string">'DISTANCE_GROUP'</span>,<span class="string">'MKT_GEO_TYPE'</span>]</span><br><span class="line"></span><br><span class="line">market_pd_map=market_pd_1[col_map]</span><br><span class="line"></span><br><span class="line"><span class="comment"># deal with the aiprot info </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">air_cat1</span><span class="params">(x)</span>:</span></span><br><span class="line">    xx=str(x).split(<span class="string">":"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(xx)==<span class="number">2</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> xx[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> xx[<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">air_cat2</span><span class="params">(x)</span>:</span></span><br><span class="line">    xx=str(x).split(<span class="string">":"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(xx)==<span class="number">2</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> xx[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> xx[<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">market_pd_map[<span class="string">'pos1'</span>]=market_pd_map[<span class="string">'AIRPORT_GROUP'</span>].apply(air_cat1)</span><br><span class="line">market_pd_map[<span class="string">'pos2'</span>]=market_pd_map[<span class="string">'AIRPORT_GROUP'</span>].apply(air_cat2)</span><br><span class="line"></span><br><span class="line">airport_list=list(pd.unique(market_pd_map[<span class="string">'pos1'</span>]))+list(pd.unique(market_pd_map[<span class="string">'pos2'</span>]))</span><br><span class="line">col_info = [<span class="string">'Code'</span>,<span class="string">'name'</span>,<span class="string">'address'</span>,<span class="string">'lat'</span>,<span class="string">'lng'</span>]</span><br><span class="line">airport_gis_pd=pd.DataFrame(columns=col_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># GIS process: use address to convert gis</span></span><br><span class="line"><span class="keyword">for</span> nn_airport <span class="keyword">in</span> airport_list:</span><br><span class="line">    add_temp=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==nn_airport,<span class="string">'add'</span>].values[<span class="number">0</span>]</span><br><span class="line">    airport_name=airport_pd.loc[airport_pd[<span class="string">'Code'</span>]==nn_airport,<span class="string">'name'</span>].values[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    geo_info_temp= geocoder.google(add_temp)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> geo_info_temp.ok:</span><br><span class="line">        </span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        geo_info_temp= geocoder.google(airport_name+<span class="string">", "</span>+STATE)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    s=pd.Series([nn_airport,airport_name,add_temp,geo_info_temp.lat,geo_info_temp.lng],index=col_info)</span><br><span class="line"></span><br><span class="line">    airport_gis_pd=airport_gis_pd.append(s,ignore_index=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">airport_gis_pd.to_csv(path+<span class="string">"airport_PA00Q1_gis.csv"</span>,index=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># save the results</span></span><br><span class="line">group_airport=market_pd_map.groupby([<span class="string">'pos1'</span>,<span class="string">'pos2'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">airport_m_pd=group_airport[<span class="string">'ITIN_ID'</span>].count()</span><br><span class="line">airport_m_pd=pd.DataFrame(airport_m_pd)</span><br><span class="line">airport_m_pd = airport_m_pd.rename(columns=&#123;<span class="string">'ITIN_ID'</span>: <span class="string">'num_flights'</span>,&#125;)</span><br><span class="line"></span><br><span class="line">airport_m_pd.reset_index(level=<span class="number">0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line">airport_m_pd.reset_index(level=<span class="number">0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># marge the result from origin cities to destination cities</span></span><br><span class="line">merg_fligh_od=pd.merge(airport_m_pd,airport_gis_pd[[<span class="string">'Code'</span>,<span class="string">'lat'</span>,<span class="string">'lng'</span>]],left_on=<span class="string">'pos1'</span>, right_on=<span class="string">'Code'</span>,how=<span class="string">"left"</span>)</span><br><span class="line">merg_fligh_od = merg_fligh_od.rename(columns=&#123;<span class="string">'lat'</span>: <span class="string">'lat_1'</span>, <span class="string">'lng'</span>: <span class="string">'lng_1'</span>&#125;)</span><br><span class="line">merg_fligh_od=pd.merge(merg_fligh_od,airport_gis_pd[[<span class="string">'Code'</span>,<span class="string">'lat'</span>,<span class="string">'lng'</span>]],left_on=<span class="string">'pos2'</span>, right_on=<span class="string">'Code'</span>,how=<span class="string">"left"</span>)</span><br><span class="line">merg_fligh_od = merg_fligh_od.rename(columns=&#123;<span class="string">'lat'</span>: <span class="string">'lat_2'</span>, <span class="string">'lng'</span>: <span class="string">'lng_2'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">merg_fligh_od.to_csv(path+<span class="string">"flight_routes.csv"</span>,index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="Create-Flight-Map-with-plotly"><a href="#Create-Flight-Map-with-plotly" class="headerlink" title="Create Flight Map with plotly"></a>Create Flight Map with plotly</h3><p>Finally, with all the gis information, I can construct the flight route map. After searching for different data visualization tools, I finally decide to use plotly to do the graph. The following is the simple example for a basic route map. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">path =<span class="string">"your data path"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#load the data</span></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">df_airports = pd.read_csv(path+<span class="string">'airport_PA00Q1_gis.csv'</span>)</span><br><span class="line"></span><br><span class="line">df_airports.head()</span><br><span class="line"></span><br><span class="line">df_flight_paths = pd.read_csv(path+<span class="string">"flight_routes.csv"</span>)</span><br><span class="line">df_flight_paths.head()</span><br><span class="line"></span><br><span class="line"><span class="comment">## initialization</span></span><br><span class="line">airports = [ dict(</span><br><span class="line">        type = <span class="string">'scattergeo'</span>,</span><br><span class="line">        locationmode = <span class="string">'USA-states'</span>,</span><br><span class="line">        lon = df_airports[<span class="string">'lng'</span>],</span><br><span class="line">        lat = df_airports[<span class="string">'lat'</span>],</span><br><span class="line">        hoverinfo = <span class="string">'text'</span>,</span><br><span class="line">        text = df_airports[<span class="string">'name'</span>],</span><br><span class="line">        mode = <span class="string">'markers'</span>,</span><br><span class="line">        marker = dict( </span><br><span class="line">            size=<span class="number">2</span>, </span><br><span class="line">            color=<span class="string">'rgb(255, 0, 0)'</span>,</span><br><span class="line">            line = dict(</span><br><span class="line">                width=<span class="number">3</span>,</span><br><span class="line">                color=<span class="string">'rgba(68, 68, 68, 0)'</span></span><br><span class="line">            )</span><br><span class="line">        ))]</span><br><span class="line"></span><br><span class="line"><span class="comment">## add gis info</span></span><br><span class="line">flight_paths = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range( len( df_flight_paths ) ):</span><br><span class="line">    flight_paths.append(</span><br><span class="line">        dict(</span><br><span class="line">            type = <span class="string">'scattergeo'</span>,</span><br><span class="line">            locationmode = <span class="string">'USA-states'</span>,</span><br><span class="line">            lon = [ df_flight_paths[<span class="string">'lng_1'</span>][i], df_flight_paths[<span class="string">'lng_2'</span>][i] ],</span><br><span class="line">            lat = [ df_flight_paths[<span class="string">'lat_1'</span>][i], df_flight_paths[<span class="string">'lat_2'</span>][i] ],</span><br><span class="line">            mode = <span class="string">'lines'</span>,</span><br><span class="line">            line = dict(</span><br><span class="line">                width = <span class="number">1</span>,</span><br><span class="line">                color = <span class="string">'red'</span>,</span><br><span class="line">            ),</span><br><span class="line">            opacity = float(df_flight_paths[<span class="string">'num_flights'</span>][i])/float(df_flight_paths[<span class="string">'num_flights'</span>].max()),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"><span class="comment">## write down the map description     </span></span><br><span class="line">layout = dict(</span><br><span class="line">        title = <span class="string">'2000 Q1 flight paths&lt;br&gt;(PA)'</span>,</span><br><span class="line">        showlegend = <span class="keyword">False</span>, </span><br><span class="line">        geo = dict(</span><br><span class="line">            scope=<span class="string">'north america'</span>,</span><br><span class="line">            projection=dict( type=<span class="string">'azimuthal equal area'</span> ),</span><br><span class="line">            showland = <span class="keyword">True</span>,</span><br><span class="line">            landcolor = <span class="string">'rgb(243, 243, 243)'</span>,</span><br><span class="line">            countrycolor = <span class="string">'rgb(204, 204, 204)'</span>,</span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># use plotly to draw the map</span></span><br><span class="line">fig = dict( data=flight_paths + airports, layout=layout )</span><br><span class="line">plotly.offline.plot( fig, filename=path+<span class="string">'d3-flight-paths.html'</span> )</span><br></pre></td></tr></table></figure><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><p>airport map<br><a href="/files/map-airport.html">airport</a></p></li><li><p>flight routes map<br><a href="/files/d3-flight-paths.html">flight route</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Typora for Math Formula</title>
      <link href="/2018/05/19/Use%20Typora%20for%20Math%20Formula/"/>
      <url>/2018/05/19/Use%20Typora%20for%20Math%20Formula/</url>
      <content type="html"><![CDATA[<p><strong>How to number the equations</strong></p><p>As far as I can see, in mac system, Typora automatically number the equations in <em>Math block</em> . But in windows system, there is no automatically numbering function. whether it has automatically or not, we can always choose to use <code>\tag{}</code> and <code>\nonumber</code> to number or remove the number for certain equations.</p><p><strong>How to cite the equations</strong></p><p>If we want to cite the equations later, we can use <code>\label{name}</code> and <code>\ref{label_name}</code> to cite the particular equation. Of course, we need to add <code>$ $</code> outsides. </p>]]></content>
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/18/hello-world/"/>
      <url>/2018/05/18/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Economics Important Data and Tools</title>
      <link href="/2018/05/18/Economics-Important-Data-and-Tools/"/>
      <url>/2018/05/18/Economics-Important-Data-and-Tools/</url>
      <content type="html"><![CDATA[<p>This script lists some importance data source and tools for economic research and study<br><a id="more"></a></p><p><strong>NBER Recession Period</strong></p><p><a href="/files/NBER recession date.xlsx">NBER recession date</a></p><p><strong>Value Function Iteration Example</strong><br>The example is written in matlab:</p><p><a href="/files/VFI/VFI.m">main</a><br><a href="/files/VFI/valfun2.m">fuction</a></p>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> economic source </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mechanism Design and Contract Theory Introduction</title>
      <link href="/2018/05/18/mechanism%20design%20contract%20theory/"/>
      <url>/2018/05/18/mechanism%20design%20contract%20theory/</url>
      <content type="html"><![CDATA[<h2 id="Mechanism-Design"><a href="#Mechanism-Design" class="headerlink" title="Mechanism Design"></a>Mechanism Design</h2><blockquote><p>Mechanism design is a field in economics and game theory that takes an engineering approach to designing economic mechanisms or incentives, toward desired objectives, in strategic settings, where players act rationally.</p><p>Participants in the Mechanism design understand that they are playing a non-cooperative game. <strong>Game theory takes the rules of the game as given. The theory of mechanism design is about the optimal choice of the rules of the game</strong></p><p>Because it starts at the end of the game, then goes backwards, it is also called reverse game theory. Mechanism design studies solution concepts for a class of private-information games.</p></blockquote><p>Mechanism design theory provides a coherent framework for analyzing this great variety of institutions, or allocation mechanisms, with a focus on the problems associated with incentives and private information. By using game theory, mechanism design can go beyond the classical approach, and, for example, explicitly model how prices are set. The theory shows, for example, that so-called double auctions (where buyers and sellers post their bid- and ask-prices) can be efficient trading institutions when each trader has private information about his or her valuations of the goods traded.</p><a id="more"></a><p>There are at least two reasons why we study mechanism design.</p><ul><li><p>normative<br>  it aids in practice the designers of real-world mechanisms. The theory of optimal auctions, for example, is frequently invoked in discussions about the design of government and industry auctions.</p></li><li><p>positive<br>  it can explain why real-world institutions are. For example, we might seek to explain the use of auctions in some house sales, as well as the use of posted prices in other house sales by appealing to the theory of mechanism design</p></li></ul><p>One cases for the application of mechanism is that theory has been used to identify conditions under which commonly observed auction forms maximize the sellers expected revenue. Other cases such as public goods,the theory thus helps to justify governmental financing of public goods through taxation.</p><p>The development of mechanism design theory began with the work of Leonid Hurwicz (1960). <strong>He defined a mechanism as a communication system in which participants send messages to each other and/or to a message center, and where a pre-specified rule assigns an outcome (such as an allocation of goods and services) for every collection of received messages.</strong> Hurwicz (1972) introduced the key notion of <em>incentive-compatibility</em>, which allows the analysis to incorporate the incentives of self-interested participants. <strong>The incentives created by the choice of rules of games are central to the theory of mechanism design.</strong></p><p>In the 1970s, the formulation of the so-called <em>revelation principle</em> and the development of <em>implementation theory</em> led to great advances in the theory of mechanism design. revelation principle was developed by Roger Myerson. And the <em>resulting theory</em>, known as <em>implementation theory</em> was developed by Eric Maskin.</p><p><strong>distinction between the theory of mechanism design and contract theory</strong> : In contract theory, we study the optimal design of incentives for a <strong>single agent</strong>. In mechanism design, we study the optimal design of incentives for <strong>a group of agents</strong>, such as the buyers in our first example and the colleagues in the second example. Contract theory therefore, unlike the theory of mechanism design, does not have to deal with strategic interaction.</p><p>direct mechanism: the agent report their private information .</p><p>(incentive compatible) (IC) A mechanism is called incentive-compatible if every participant can achieve the best outcome to him/herself just by acting according to his/her true preferences</p><p>(participation constraint) no agent should be made worse off by participating in the mechanism.</p><h3 id="Incentive-compatibility-and-the-revelation-principle"><a href="#Incentive-compatibility-and-the-revelation-principle" class="headerlink" title="Incentive compatibility and the revelation principle"></a>Incentive compatibility and the revelation principle</h3><p>In Hurwiczs formulation, a mechanism is a <strong>communication</strong> system in which participants exchange messages with each other, messages that jointly determine the outcome. These messages may contain private information, such as an individuals (true or pretended) willingness to pay for a public good. The mechanism is like a <strong>machine</strong> that compiles and processes the received messages, thereby aggregating (true or false) private information provided by many agents. Each agent strives to maximize his or her expected payoff (utility or profit), and may decide to withhold disadvantageous information or send false information (hoping to pay less for a public good, say).</p><p>Hurwiczs (1972) notion of incentive-compatibility can now be expressed as follows: the mechanism is incentive-compatible if it is a dominant strategy for each participant to report his private information truthfully.</p><blockquote><p>In a standard exchange economy, no incentive-compatible mechanism which satisfies the participation constraint can produce Pareto-optimal outcomes.</p></blockquote><p>Private information precludes full efficiency.</p><p>This lead to the following questions :</p><ul><li><p>Can Pareto optimality be attained if we consider a wider class of mechanisms and/or a less demanding equilibrium concept than dominant-strategy equilibrium, such as Nash equilibrium or Bayesian Nash equilibrium?</p></li><li><p>If not, then we would like to know how large the unavoidable social welfare losses are, and what the appropriate standard of efficiency should be.</p></li></ul><p>The revelation principle states that any equilibrium outcome of an arbitrary mechanism can be replicated by an incentive-compatible direct mechanism. Although the set of all possible mechanisms is huge, the revelation principle implies that an optimal mechanism can always be found within the well-structured subclass consisting of <strong><em>direct mechanisms.</em></strong></p><p>Direct Mechanisms A direct revelation mechanism is one where each agent is asked to report his individual preferences. In an indirect mechanism agents are asked to send messages other than preferences.</p><p>(Incentive Efficient) A direct mechanism is said to be incentive efficient if it maximizes some weighted sum of the agents expected payoffs subject to their IC constraints.</p><h4 id="Dominant-strategy-mechanisms-for-public-goods-provision"><a href="#Dominant-strategy-mechanisms-for-public-goods-provision" class="headerlink" title="Dominant-strategy mechanisms for public goods provision"></a>Dominant-strategy mechanisms for public goods provision</h4><p>Before 1970, economists generally believed that public goods could not be provided at an efficient level, precisely because people would not reveal their true willingness to pay. But Edward Clarke (1971) and Theodore Groves (1973) shows a case if there are no income effects on the demand for public goods (technically, if utility functions are quasi-linear), then there exists a class of mechanisms in which (a) truthful revelation of ones willingness to pay is a dominant strategy, and (b) the equilibrium level of the public good maximizes the social surplus.</p><p>Each person is asked to report his or her willingness to pay for the project, and the project is undertaken if and only if the aggregate reported willingness to pay exceeds the cost of the project. If the project is undertaken, then each person pays a tax or fee equal to the difference between the cost of the project and everyone elses reported total willingness to pay. With such taxes, each person internalizes the total social surplus, and truth-telling is a dominant strategy.</p><p>But due to the drawbacks of Dominant-strategy mechanisms, focus of the literature shifted from dominantstrategy solutions to so-called Bayesian mechanism design.</p><h4 id="Bayesian-mechanisms-for-public-goods-provision"><a href="#Bayesian-mechanisms-for-public-goods-provision" class="headerlink" title="Bayesian mechanisms for public goods provision"></a>Bayesian mechanisms for public goods provision</h4><p>In a Bayesian model, the agents are expected-utility maximizers. The solution concept is typically Bayesian Nash equilibrium. Regarding Clarke-Groves dominant-strategy mechanism, Claude dAspremont and Louis- AndrGrard-Varet (1979) showed that this problem can be solved in the Bayesian version of the model. In the Bayesian model, agents are expected utility maximizers, and the IC constraints only have to hold in expectation. So it is easier to satisfy.</p><p>The fact that English villages were much earlier than French villages in deciding on public goods such as enclosure of open fields and drainage of marshlands can arguably be ascribed to the fact that French villages required unanimity on such issues whereas the English did not. (why)</p><p>Why if participation is voluntary and decisions to start the project must be taken unanimously, then the problem of free-riding becomes severe?  -<strong>bilateral trade</strong></p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>Incentive compatibility guarantees that truth-telling is an equilibrium, but not that it is the only equilibrium. Many mechanisms have multiple equilibria that produce different outcomes. In view of these difficulties, it is desirable to design mechanisms in which all equilibrium outcomes are optimal for the given goal function. The quest for this property is known as the implementation problem.</p><p>Groves and Ledyard (1977) and Hurwicz and Schmeidler (1978) showed that, in certain situations, <strong>it is possible to construct mechanisms in which all Nash equilibria are Pareto optimal,</strong> while Eric Maskin (1977) gave a general characterization of Nash implementable social-choice functions.</p><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><h4 id="Optimal-selling-and-procurement-mechanisms"><a href="#Optimal-selling-and-procurement-mechanisms" class="headerlink" title="Optimal selling and procurement mechanisms"></a>Optimal selling and procurement mechanisms</h4><p>General revenue-equivalence theorem. In particular, four well-known auction forms (the so-called English and Dutch auctions, and first-price and second-price sealed bid auctions, respectively) generate the same expected revenue. Myerson (1981) showed that if the bidders are symmetric (drawn from one and the same type pool) and if the seller sets an appropriate reserve price (a lowest price below which the object will not be sold), then all of the four well-known auction formats are in fact optimal</p><p>if the bidders types are independently drawn from a uniform distribution on the interval from zero to one hundred, then the optimal reserve price is 50, independently of the number of bidders. This reserve price induces bidders whose valuations exceed 50 to bid higher than they would otherwise have done, which raises the expected revenue. <strong>On the other hand, if it so happens that no bidder thinks the object is worth 50, then the object is not sold even if it has a positive value to some bidder and no value at all to the seller.(not understand)</strong> This outcome is clearly not Pareto efficient in the classical sense</p><p>Maskin (1992) found that, under certain conditions, an English auction maximizes social welfare even if each bidders valuation depends on other bidders private information.</p><p>One might be tempted to discount the need for the governments auction to maximize social welfare, for the following reason. Suppose there are two potential bidders, A and B, and B values the asset more than A. Then, even if the government allocates the asset to the wrong person, A, would not then B simply buy the asset from A (assuming it can be traded)? If so, then B (who values the asset the most) would always get the asset in the end - so the government should not worry too much about getting the initial allocation right. However, this argument is incorrect, because it does not take informational constraints into account. The Laffont-Maskin and Myerson-Satterthwaite impossibility results (see Section 2.4) imply that B may not buy the asset from A even if B values it the most. Therefore, getting the initial allocation of ownership right may be of the utmost importance.</p><h4 id="Regulation-and-auditing"><a href="#Regulation-and-auditing" class="headerlink" title="Regulation and auditing"></a>Regulation and auditing</h4><p>This is about monopolies and oligopolies. The situation changed dramatically with the pioneering contributions of Baron and Myerson (1982) and Sappington (1982, 1983). the regulatory process was modeled as a game of incomplete information. The regulator did not have direct access to information about the monopolists true production costs.</p><h3 id="Social-Choice-Theory"><a href="#Social-Choice-Theory" class="headerlink" title="Social Choice Theory"></a>Social Choice Theory</h3><p>In the axiomatic social-choice theory pioneered by Kenneth Arrow (1951), there is a set X of feasible alternatives and n individuals who have preferences over these. A social choice rule is a rule that selects one or several alternatives from X on the basis of the individuals preferences, for any given such preference profile</p><p>Maskin monotonicity is the following property of a social choice rule. Suppose that, for preference profile P1, the chosen alternative is A1. Consider another preference profile P2 such that, the position of A1 relative to each of the other alternatives either improves or stays the same as in P1. Then, A1 should still be chosen at P2.</p><p>plurality rule. An alternative in $X$ is said to be the plurality alternative if it is top-ranked by the greatest number of voters</p><h2 id="Asymmetric-Information"><a href="#Asymmetric-Information" class="headerlink" title="Asymmetric Information"></a>Asymmetric Information</h2><p>In 1996, the Bank of Sweden Prize in Economic Sciences in Memory of Alfred Nobel was awarded to James Mirrlees and William Vickrey for their fundamental contributions to the theory of incentives under asymmetric information, in particular its applications to the <strong>design of optimal income taxation</strong> and resource allocation through <strong>different types of auctions.</strong> The theory of markets with asymmetric information rests firmly on the work of three researchers: George Akerlof (University of California, Berkeley), Michael Spence (Stanford University) and Joseph Stiglitz (Columbia University).</p><p>Some questions like Why do people looking for a good used car typically turn to a dealer rather than a private seller? Why dofirms pay dividends even if they are taxed more heavily than capital gains? Why is it in the interest of insurance companies to offer a menu of policies with different mixes of premiums, coverage and deductibles? challenge the traditional economic theory. Those questions share a same realistic assumption : one side of the market has better information than the other.</p><p>Akerlof showed how informational asymmetries can give rise toadverse selection in markets. Spence demonstrated that informed economic agents in such markets may have incentives to take observable and costly actions to crediblysignaltheir private information to uninformed agents, so as to improve their market outcome. Stiglitz showed that poorly informed agents can indirectly extract information from those who are better informed, by offering a menu of alternative contracts for a specific transaction, so-called screening through self-selection.</p><ul><li><p><strong>Akerlof</strong> </p><p>market failure and asymmetric information. (lemon market)</p></li><li><p><strong>Michael Spence</strong></p><p>Spence’s most important work demonstrates how agents in a market can use signaling to counteract the effects of adverse selection. In this context, signaling refers to observable actions taken by economic agents to convince the opposite party of the value or quality of their products. A fundamental insight is that signaling can succeed only if the signaling cost differs sufficiently among the ’senders’.</p></li><li><p><strong>Stiglitz</strong></p><p>insurance market </p></li></ul><h2 id="Contract-Theory"><a href="#Contract-Theory" class="headerlink" title="Contract Theory"></a>Contract Theory</h2><p>An eternal obstacle to human cooperation is that people have different interests. In modern societies, conflicts of interests are often mitigated if not completely resolved by contractual arrangements. The idea that incentives must be aligned to exploit the gains from cooperation has a long history within economics. In the 1700’s, Adam Smith argued that sharecropping contracts do not give tenants sufficient incentives to improve the land. Today, incentive problems are almost universally seen through its lens. The theory has had a major impact on organizational economics and corporate finance, and it has deeply influenced other fields such as industrial organization, labor economics, public economics, political science, and law.</p><p>A <strong>classic contracting problem</strong> has the following structure. A principal engages an agent to take certain actions on the principals behalf. However, the principal cannot directly observe the agents actions, which creates a problem of moral hazard : <em>the agent may take actions that increase his own payoff but reduce the overall surplus of the relationship.</em> To be specific, suppose the principal is the main shareholder of a company and the agent is the company’s manager. As Adam Smith noted, the separation of ownership and control in a company might cause the manager to make decisions contrary to the interests of shareholders.</p><blockquote><p>Therefore <strong>contract theory</strong> has traditionally been divided into <strong>two</strong> parts: the theory of hidden information (also referred to as the theory of adverse selection) and the theory of hidden action (also referred to as the theory of moral hazard).</p></blockquote><p>To alleviate this moral-hazard problem, the principal may offer a compensation package which ties the managers income to some (observable and verifiable) performance measure. We refer to this as paying for performance. But any performance measure is likely to be imprecise and noisy, so in the end the optimal compensation schedule must trade off incentive provision against risk-sharing.</p><p>informativeness principle Formally, suppose P is considering making the transfer t a function of some signal s in addition to $\beta$. The informativeness principle implies that she should do so if and only if is not a sufficient statistic for a given ($\beta$; s).</p><p>Paying for performance requires both the ability to write sufficiently detailed contracts ex ante, as well as the ability to measure and verify performance ex post.</p><p>incomplete contracting approach</p><p>allocation of decision rights.</p><p>Decision rights are often determined by property rights, property rights generate bargaining power,which in turn determines incentives. image the company want to do R&amp;D. the researcher’s right and company’s right during the innovation of the product.</p><p>More generally, when performance-based contracts are hard to write or hard to enforce, carefully allocated decision rights may produce good incentives and thus substitute for contractually specified rewards. This insight is a cornerstone in the theory of incomplete contracts.</p><p>The theory has been highly influential within corporate finance and organizational economics,</p><ul><li><p>costs and benefits of mergers</p></li><li><p>the distribution of authority within organizations</p></li><li><p>whether or not providers of public services should be privately owned</p></li><li><p>how outside owners can control a company’s inside managers through the design of corporate governance and capital structure</p></li></ul><h3 id="Complete-Contracts-principal-agent-model"><a href="#Complete-Contracts-principal-agent-model" class="headerlink" title="Complete Contracts: principal-agent model"></a>Complete Contracts: principal-agent model</h3><p>A simple framework :</p><p>imprecise performance measure</p><h2 id="Incomplete-Contracts-Allocating-Decision-Rights"><a href="#Incomplete-Contracts-Allocating-Decision-Rights" class="headerlink" title="Incomplete Contracts: Allocating Decision Rights"></a>Incomplete Contracts: Allocating Decision Rights</h2><ul><li>Hold up problem</li><li>property right</li><li>In property-rights models of Hart and coauthors, decision rights over physical assets are the crucial source of bargaining power and incentives.</li><li>What is the connection between mechanism design, asymmetric information and contract theory?!</li><li>Screening Contract and Incentive Contract</li></ul><h4 id="Voting-Scheme-of-the-social-choice"><a href="#Voting-Scheme-of-the-social-choice" class="headerlink" title="Voting Scheme of the social choice."></a>Voting Scheme of the social choice.</h4><p>Condorcet conditions: If there is a candidate that is preferred to every other candidate in pair wise majority -rule comparisons , that candidate should be choose</p><p>$(a\succ b),\ (a\succ c)\ (a\succ d)$ $a$ is the winner. The potential candidate should win all the pairs</p><p>Arrow impossibility theorem : Any social welfare function W over three or more outcomes that is pareto efficient and independent of irrelevant alternatives is dictatorial.</p><p>Pareto Efficiency : W is Pareto efficient if for any $o_{1},\ o_{2}\in O,\ \forall i\ o_{1}\succ_{i}o_{2}$ implies that $o_{1}\succ_{W}o_{2}$</p><p>If everyone agrees $a$ better than b, social welfare function is also required that $a$ is better than <strong>$b$</strong> . If one person feels differently, this does not restrict soical welfare function at all.</p><p>Idependence of Irrelevant Alternatives : $W$ is independent of Irrelevant Alternatives if for any $o_{1},\ o_{2}\in O,$ and any two preference profiles $[\succ’],[\succ’’]\in L^{n}$ $\forall i\ (o_{1}\succ_{i}’o_{2}\ \text{iff},\ o_{1}\succ_{i}’’o_{2})$ implies that $(o_{1}\succ_{W}([\succ’])o_{2})$ iff $(o_{1}\succ_{W}([\succ’’])o_{2})$</p><p>if agent 1 likes $o_{1}$ better than $o_{2}$, in preference $\succ’$ , he must also likes $o_{1}$ better than $o_{2}$, in preference $\succ’’$ .</p><p>Non-dictatorship : $W$ does not have a dictator if $\lnot\exists i\ \forall o_{1},o_{2}(o_{1}\succ_{i}o_{2}\Rightarrow o_{1}\succ_{W}o_{2})$</p><p>given a set of agents $N=\{1,2,3…\}$a finite set of outcomes (or alternative or candidates ) $O$ and the set of preferences over outcomes $L_{NS}$</p><p>Social choice function $C:\ L_{NS}^{N}\rightarrow O$</p><p>Social welfare function $W:\ L_{NS}^{n}\rightarrow L_{NS}$</p><p>social choice function VS social welfare function</p><p>Assume that finite set of alternatives are a,b and c. social choice function can have one single output which can be a or b or c. A social welfare function can have any ranking as output such as $a &lt; b &lt; c​ $ .</p><h2 id="Tian’s-notes"><a href="#Tian’s-notes" class="headerlink" title="Tian’s notes"></a>Tian’s notes</h2><p>The <strong>incentives</strong> structure and information structure are thus two basic features of any economic system. Indeed, delegation of a task to an agent who has different objectives than the principal who delegates this task is problematic when information about the agent is imperfect. This problem is the essence of incentive questions. <strong>Thus, conflicting objectives and decentralized information are the two basic ingredients of incentive theory.</strong></p><p>The three words contracts, mechanisms and institutions are to a large extent synonymous. They all mean <strong>rules of the game</strong>, which describe what actions the parties can undertake, and what outcomes these actions would be obtained. While mechanism design theory may be able answer big questions, such as socialism vs. capitalism, contract theory is developed and useful for more manageable smaller questions, concerning specific contracting practices and mechanisms.</p><p>mechanism design is normative economics, in contrast to game theory, which is positive economics.</p><p>(normative economics) a part of economics that expresses value or normative judgments about economic fairness or what the outcome of the economy or goals of public policy ought to be.</p><p>(positive economics) is the branch of economics that concerns the description and explanation of economic phenomena. It focuses on facts and cause-and-effect behavioral relationships and includes the development and testing of economics theories.</p><h3 id="Screening-and-Signaling"><a href="#Screening-and-Signaling" class="headerlink" title="Screening and Signaling"></a>Screening and Signaling</h3><p>For the most part we will focus on the situation where the <em>Principal has no private information and the agents do</em>. This framework is called <strong>screening</strong>, because the principal will in general try to screen different types of agents by inducing them to choose different bundles.</p><p>The opposite situation, in which the <em>Principal has private information and the agents do not</em>, is called <strong>signaling</strong>, since the Principal could signal his type with the design of his contract.</p><h3 id="First-Best-and-Second-Best"><a href="#First-Best-and-Second-Best" class="headerlink" title="First Best and Second Best"></a>First Best and Second Best</h3><p>In the class, what we learned of first best is that principal can extract all the rent from agents; second best involves the incentive compatibility constraint and principal need to share some rent to agents to pay for the “information value”</p><p><strong>In Contract Theory</strong> </p><p>The first-best refers to the best you could do if you knew agent’s preferences over labor an income (i.e., if you did not have to impose the incentive compatibility constraint), and the second-best is the best you can do if agents have to reveal their preferences themselves.</p><p><strong>Difference</strong> </p><p>There is not much connection between the two notions as defined above. Every combination of the two notions is a priori possible. Both a mechanism and a contract can be</p><ol><li><p>First-best ex-post efficient (i.e., efficient when incentive compatibility constraint is <strong>not</strong> imposed and the outcome of the mechanism/contract must be deterministic)</p></li><li><p>First-best ex-ante efficient (i.e., efficient when incentive compatibility constraint is <strong>not</strong> imposed and the outcome of the mechanism/contract can be random)</p></li><li><p>Second-best ex-post efficient (i.e., efficient when incentive compatibility constraint <strong>is</strong> imposed and the outcome of the mechanism/contract must be deterministic)</p></li><li><p>Second-best ex-ante efficient (i.e., efficient when incentive compatibility constraint <strong>is</strong> imposed and the outcome of the mechanism/contract can be random)</p></li></ol><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>Quasi-linear Utility quasi-linear utility functions are linear in one argument, generally the numeraire. This utility function has the representation $u(x_{1},x_{2},\ldots,x_{n})=x_{1}+\theta(x_{2},\ldots,x_{n})$. Informally, an agent has quasi-linear utility if it can express all its preferences in terms of money and the amount of money it has will not create a <strong>wealth effect.</strong> As a practical matter in mechanism design, quasi-linear utility ensures that <strong>agents can compensate each other with side payments.</strong> In regard to surplus, quasi-linear preferences entail that Marshallian surplus will equal Hicksian surplus since there would be <strong>no wealth effect for a change in price</strong>.</p>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mechanism Design </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决next主题和mathjax下划线冲突问题</title>
      <link href="/2018/05/18/solve-mathjax-display%20in%20next/"/>
      <url>/2018/05/18/solve-mathjax-display%20in%20next/</url>
      <content type="html"><![CDATA[<p>源于网络</p><p>在markdown写技术文章时，经常会用到latex渲染公式，markdwon集成了mathjax用于渲染公式。<br>默认next主题是集成公式的，只需要在每篇博客前面加上mathjax: true即可。</p><p>Hexo默认使用hexo-renderer-marked引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线_代表斜体，会被渲染引擎处理为<em>标签。<br>因为类Latex格式书写的数学公式下划线 _ 表示下标，有特殊的含义，如果被强制转换为<em>标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，xi在开始被渲染的时候，处理为$x<em>i</em>$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。</em></em></p><a id="more"></a><p>解决办法<br>更换markdown公式渲染引擎<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p><p>hexo 默认渲染引擎是<code>hexo-renderer-marked</code>, 另一个渲染引擎 <code>hexo-renderer-kramed</code> 在默认引擎上修复了一下bug。</p><p>修改语义转义规则<br>更换引擎后，行间公式<script type="math/tex"> </script>确实可以正常渲染了，但行内公式$ $还是有一些问题，接下来到node_modules\kramed\lib\rules\inline.js下，修改第11行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><p>修改第20行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></p><p>重启hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Continuous Time Model</title>
      <link href="/2018/05/14/continous-time-model/"/>
      <url>/2018/05/14/continous-time-model/</url>
      <content type="html"><![CDATA[<p><strong>Abstract</strong> This notes is about the study of continuous time dynamic model based on “The Art of Smooth Pasting”</p><a id="more"></a><h1 id="Brownian-Motion"><a href="#Brownian-Motion" class="headerlink" title="Brownian Motion"></a>Brownian Motion</h1><p>The Brownian Motion was first formulated to represent the motion of small particles suspended in a liquid. To decribe the motion, given the initial value $x_{0}$ at time $t=0$ , the random variable $x_{t}$ for any $t&gt;0$ is normally distributed with mean $(x_{0}+\mu t)$ and variance $(\sigma^{2}t)$ . The parameter $\mu$ measures the trend , and $\sigma$ the volatility of the process. For the Brownian motion, $x_{t}$ as its ’position’, and a graph of $x_{t}$ against $t$ as its ’path’.</p><p>The infinitesimal random increment $dx$ over the infinitesimal time $dt$ having mean $\mu dt$ and variance $\sigma^{2}dt$. Just as we write normal random varible as $\mu+\sigma w$ where $w$ is a standard normal varible of $N(0,1)$, we can</p><script type="math/tex; mode=display">dx=\mu dt+\sigma dw  \tag{1}</script><p>where $w$ is a standardized Brownian motion (Wiener process) whose increment $dw$ has zeros mean and variance $dt$</p><p>The (Ito) Calculus of such infinitesimal random variables differs in some important ways from the usual non-random calculus. Since a fully rigorous treatment of ito calculus is quite difficult, a non-rigorous exposition should suffices for many economic applications. So here we can approximate Brownian motion by a discrete random walk. Then the normal distribution arises as the limit of a sum of independent binary variables $\bigtriangleup x$ over discret time intervals $\bigtriangleup t$ when these go to zero in a particular way.</p><h2 id="Random-Walk-and-Brownian-Motion"><a href="#Random-Walk-and-Brownian-Motion" class="headerlink" title="Random Walk and Brownian Motion"></a>Random Walk and Brownian Motion</h2><p>This subsection try to bridge the discrete random walk with continuous Brownian motion. To do so, we can divide time into discrete period of length $\bigtriangleup t$, and $\bigtriangleup h$ can be seen as the step-length or the distance between successive points.</p><p><img src="/pic/continue_time/fig1.png" alt="image"></p><p>Let $\bigtriangleup x$ be a random variable that follows a random walk: in one time period it moves up one step in space with probability $p$, and one step down with probability $q=1-p$. Note: $\bigtriangleup h$ is given positive number, and $\bigtriangleup x$ is a random variable that takes values $\pm\bigtriangleup h$ . Figure 1.1 illustrate this with time marching downward and position shown horizontally. So the mean and variance of $\bigtriangleup x$ are</p><script type="math/tex; mode=display">\begin{align}E[\bigtriangleup x] & =p\bigtriangleup h+q(-\bigtriangleup h)=(p-q)\bigtriangleup h    \tag{2} \\  Var[\bigtriangleup x] & =E[(\bigtriangleup h)^{2}]-(E[\bigtriangleup x])^{2}\nonumber \\ & =4pq(\bigtriangleup h)^{2} \tag{3}    \end{align}</script><p>A time interval of length $t$ has $n=t/\bigtriangleup t$ such discrete steps. Since the successive steps of the random walk are independent, the cumulated change $(x_{t}-x_{0})$ is a binominal variate with mean</p><script type="math/tex; mode=display">n(p-q)\bigtriangleup h=(p-q)\bigtriangleup h\cdot t/\bigtriangleup t</script><p>and variance</p><script type="math/tex; mode=display">4npq(\bigtriangleup h)^{2}=4pq(\bigtriangleup h)^{2}\cdot t/\bigtriangleup t</script><p>(Recall the relation between Bernoulli distribution and Binomial distribution) Remember the binomial distribution, a ’success’ in any one trial counts as 1 and occurs with probability p, while a failure counts as 0 and occurs with probability $q=1-p$. The (random) number of successes in $n$ independent trials has expectation $np$ and variance $npq$. So back to this problem, now the success counts as $\bigtriangleup h$ and failure as $-\bigtriangleup h$. Now set</p><script type="math/tex; mode=display">\bigtriangleup h=\sigma\sqrt{\bigtriangleup t} \ \ (4)​</script><p>and</p><script type="math/tex; mode=display">p=\frac{1}{2}[1+\frac{\mu}{\sigma}\sqrt{\bigtriangleup t}],\ \ q=\frac{1}{2}[1-\frac{\mu}{\sigma}\sqrt{\bigtriangleup t}] \ \ (5)</script><p>or</p><script type="math/tex; mode=display">p=\frac{1}{2}[1+\frac{\mu}{\sigma^{2}}\sqrt{\bigtriangleup t}],\ \ q=\frac{1}{2}[1-\frac{\mu}{\sigma^{2}}\sqrt{\bigtriangleup t}]</script><p>Then</p><script type="math/tex; mode=display">4pq=1-\left(\frac{\mu}{\sigma}\right)^{2}\bigtriangleup t</script><p>Substitute these into the above expression. and let $\bigtriangleup t$ go to zero. Then the Binomial distribution converges to the normal, with mean</p><script type="math/tex; mode=display">t\frac{\mu}{\sigma^{2}}\bigtriangleup h\frac{\bigtriangleup h}{\bigtriangleup t}=\mu t</script><p>and variance <script type="math/tex">t[1-\left(\frac{\mu}{\sigma}\right)^{2}\bigtriangleup t]\frac{\sigma^{2}\bigtriangleup t}{\bigtriangleup t}\rightarrow\sigma^{2}t</script></p><p>Thus we can regard Brownian motion as the limit of the random walk, when the time interval and the space step-ength go to zero together.</p><p>The mean of $(x_{t}-x_{0})$ is $\mu t$ and its standard deviation is $\sigma\sqrt{t}$. For large $t$, we have $\sqrt{t}\ll t$; in the long run, the trend is the dominant determinant of brownian motion. But for small $t$, we have $t\ll\sqrt{t}$, so volatility dominates in the short run.</p><p>Another manifestation of this volatility is seen by calculating the expected length of a path. We have</p><script type="math/tex; mode=display">E(|\bigtriangleup x|)=\bigtriangleup h</script><p>so the total expectedd length of the path over time interval from $0$ to $t$ is</p><script type="math/tex; mode=display">t\bigtriangleup h/\bigtriangleup t=t\sigma/\sqrt{\bigtriangleup t}\rightarrow\infty</script><p>as $\bigtriangleup t$ goes to zero. For small but finite $\bigtriangleup t$, the total length of almost all sample path is very large. Therefore each path must have many ups and sowns and look very jagged. Most such sample paths are not differentiable. When discussing the expected rate of change, therefore, we must write $E[dx]/dt$ not $E[dx/dt]$</p><h2 id="Ito’s-Lemma"><a href="#Ito’s-Lemma" class="headerlink" title="Ito’s Lemma"></a>Ito’s Lemma</h2><p>Suppose $x$ follows Brownian motion with parameters $(\mu,\sigma)$. Consider a stochastic process y that is related to $x$ by $y=f(x)$ where $f$ is a given non-random function. We want to related changes in y to those in x. The rules of conventional calculus suggest writing $dy=f’(x)dx$ and taking expectations. How the changes in x relate to changes in y ? The rules of conventional calculus suggest writing $dy=f’(x)dx$ and taking expectations. <strong>But this turns out to be wrong.</strong> The reason is as follows. Starting at $y_{0}=f(x_{0})$ , consider the position a small amount of time $t$ later.</p><script type="math/tex; mode=display">y_{t}-y_{0}=f'(x_{0})(x_{t}-x_{0})+\frac{1}{2}f''(x_{0})(x_{t}-x_{0})^{2}+...</script><p>Hence</p><script type="math/tex; mode=display">\begin{aligned}E[y{t}-y{0}] & =f'(x{0})E[x{t}-x{0}]+\frac{1}{2}f^{''}(x{0})E[(x{t}-x{0})^{2}]+...\\ & =f'(x{0})\mu t+\frac{1}{2}f^{''}(x{0})[\sigma^{2}t+\mu^{2}t^{2}]+...\\ & =[\mu f'(x{0})+\frac{1}{2}\sigma^{2}f^{''}(x{0})]t+...\end{aligned}</script><p>Note that the second order term in the Taylor expansion of $f(x)$ contributes a term that is not ignorable. The reason is that the variance of the increments of $x$ is linear in t. This is the feature that makes the calculus of Brownian motion so different from the usual calculus of non-random variables. A similar calculation will show that</p><script type="math/tex; mode=display">Var[y_{t}-y_{0}]=f'(x_{0})^{2}\sigma^{2}t+...</script><p>Let $x$ denote a general starting and $y=f(x)$. Consider the infinitesimal increment $dy$ over the next infinitesimal time interval $dt$. We can use the above expression replacing $t$ with $dt$ and ignoreing higher order terms in $dt$. Therefore $dy$ has mean</p><script type="math/tex; mode=display">E[dy]=[f^{'}(x)\mu+\frac{1}{2}f^{''}(x)\sigma^{2}]dt</script><p>and variance</p><script type="math/tex; mode=display">Var[dy]=f'(x)^{2}\sigma^{2}dt</script><p>So $y$ follows the general diffusion process defined by</p><script type="math/tex; mode=display">dy=[f'(x)\mu+\frac{1}{2}f^{''}(x)\sigma^{2}]dt+f'(x)\sigma dw \ \ (6)</script><p>This is Ito Lemma in the form that will prove most useful for the study. A slight generalization is easily available : if $y=f(x,t)$, the Taylor expansion has an addition term in $f_{t}$, and</p><script type="math/tex; mode=display">dy=[f_{x}(x,t)\mu+\frac{1}{2}f_{xx}(x,t)\sigma^{2}+f_{t}(x,t)]dt+f_{x}(x,t)\sigma dw \ \ (7)</script><p>For a simple intuition, return to the discrete random walk formulation, and suppose $x$ ahs zeros trend, so $p=q=\frac{1}{2}$. Now $E[\bigtriangleup x]=0$ and as time passes the distribution of $x$ merely spreads out with linearly increasing variance around an unchanging mean. From the standard intution of risk -aversion , or Jensen’s inequality, we know the sign of $E[\bigtriangleup y]$ will be negative if $f$ is concave and positive if $f$ is convex.</p><p><img src="/pic/continue_time/fig2.png" alt="image"></p><h2 id="GEometric-Brownian-motion"><a href="#GEometric-Brownian-motion" class="headerlink" title="GEometric Brownian motion"></a>GEometric Brownian motion</h2><p>Now suppose x follows the Brownian motion, and let $X=e^{x}$. Ito’s Lemma gives</p><script type="math/tex; mode=display">E[dX]=[e^{x}\mu+\frac{1}{2}e^{x}\sigma^{2}]dt=X[\mu+\frac{1}{2}\sigma^{2}]dt</script><p>and <script type="math/tex">Var(dX)=[e^{x}]^{2}\sigma^{2}dt=X^{2}\sigma^{2}dt</script></p><p>Therefore the process of $X$ can be written</p><script type="math/tex; mode=display">dX/X=[\mu+\frac{1}{2}\sigma^{2}]dt+\sigma dw</script><p>This is called the geometric or proportional Brownian motion. It provides a good first approximation of the dynamics of exchange rates, prices of natural resources, and more generally many asset prices.</p><p>Conversely, if $X$ follows the geometric Brownian motion</p><script type="math/tex; mode=display">dX/X=vdt+\sigma dz  \ \ (8)</script><p>then using Ito’s Lemma we find that $x=\ln X$ follows the ordinary or absolute Brownian motion</p><script type="math/tex; mode=display">dx=[v-\frac{1}{2}\sigma^{2}]dt+\sigma dw</script><p>Notice that $d\text{\ensuremath{\ln}}x\neq dX/X$ . Suppose $X$ follows geometric Brownian motion (8) with the known position $X_{0}$ , with the relation of $x=\ln X$ we finally can get</p><script type="math/tex; mode=display">E(X_{t})=\exp(x_{0}+\mu t+\frac{1}{2}\sigma^{2}t)=X_{0}e^{vt}</script><p>Since exponential is a convex function, therefore</p><script type="math/tex; mode=display">E[X_{t}]=E[\exp x_{t}]>\exp E[x_{t}]=\exp(x_{0}+\mu t)</script><h2 id="Some-generalizations"><a href="#Some-generalizations" class="headerlink" title="Some generalizations"></a>Some generalizations</h2><p>If the trend and volatility coefficients are functions of the current state ($x$), this is often called a <strong>diffusion process.</strong>When they are functions of time as well, it is sometimes called an <strong>Ito process</strong>.</p><script type="math/tex; mode=display">dx=\mu(x,t)dt+\sigma(x,t)dw \ \ (9)</script><p>By the defintion of diffiusion process, we can see that (8) geometric brownian motion is a special case of diffusion process</p><script type="math/tex; mode=display">dX=\mu Xdt+\sigma Xdw</script><p>In come cases, we may need processes that revert toward some central level $\bar{x}$ of the state variable</p><script type="math/tex; mode=display">dx=-\theta(x-\bar{x})dt+\sigma dw \ \ (10)</script><p>where $\theta$ is some positive constant.</p><p>Also, several variabes $x_{i}$ for $i=1,2,..m$ may follow Brownian motion, their volatility components being linear combinations of independent standard Wiener processes $w_{j}$ for $j=1,2,…n$</p><script type="math/tex; mode=display">dx_{i}=\mu_{i}dt+\sum_{j=1}^{n}a_{ij}dw_{j}</script><p>Then</p><script type="math/tex; mode=display">\begin{aligned}E[dx{i}]      & =\mu{i}dt \\Var[dx_{i}] &=\sum_{j=1}^{n}(a{ij})^{2}dt \\ Cov[dx_{i},dx_{k}]&=\sum_{j=1}^{n}a_{ij}a_{kj}dt\end{aligned}</script><p>Such multi-variable processes are important in financial economics.</p><h1 id="Discounted-Present-Values"><a href="#Discounted-Present-Values" class="headerlink" title="Discounted Present Values"></a>Discounted Present Values</h1><p>Now we can move to some real economic examples. First let’s consider an economic unit, such as a firm , in a dynamic stochastic setting. Its state at time $t$ is given by a state variable $x_{t}$ that follows a Brownian motion with exogenous parameters $\mu$ and $\sigma$. There is a net flow payoff $f(x_{t})$ , such as profit or dividend, that depends on the state $x_{t}$. The expected present value $F(x)$ of the payoff starting at a given initial position $x_{0}=x,$and using an exogenously specified discout rate $\rho$, is defined by</p><script type="math/tex; mode=display">F(x)=E\{\int_{0}^{\infty}f(x_{t})e^{-\rho t}dt|x_{0}=x\} \ \ (11)</script><p>Ultimately we will be interested in controlling or regulating the motion of $x_{t}$to optimize such expected present values net of the cost of control. To this end, we begin by evaluating $F(x)$ explicitly when $f(x)$ has some particularly simple functional forms such as exponentials and polynomial. Then we can get power series expression for $F(x)$ when $f(x)$ is any analytic function.</p><h2 id="Prensent-value-for-exponential-and-polynomials"><a href="#Prensent-value-for-exponential-and-polynomials" class="headerlink" title="Prensent value for exponential and polynomials"></a>Prensent value for exponential and polynomials</h2><p>First we conside the special case when the flow payoff has the form</p><script type="math/tex; mode=display">f(x)=\exp(\lambda x)</script><p>The discounted present value $F(x)$ will be finite when $\lambda$ is in a certain range. Starting from the initial value $x_{0}=x$ , $x_{t}$ at time $t$ has a normal distribution with mean $(x+\mu t)$ and variance $\sigma^{2}t$. Then</p><script type="math/tex; mode=display">E[exp(\lambda x_{t})|x_{0}=x]=\exp[\lambda(x+\mu t)+\frac{1}{2}\lambda^{2}\sigma^{2}t]</script><p>How to get the above expression, Here is the illustrative example. Suppose a random variable $x$ is normal with mean$m$and std $s$</p><script type="math/tex; mode=display">\begin{aligned}E[\exp(\lambda x)] & =\frac{1}{s\sqrt{2\pi}}\int_{-\infty}^{\infty}\exp(\lambda x)\exp\left[-\frac{(x-m)^{2}}{2s^{2}}\right]dx\nonumber \\ & =\frac{\exp(\lambda m)}{s\sqrt{2\pi}}\int_{-\infty}^{\infty}\exp(\lambda y-\frac{y^{2}}{2s^{2}})dy\ y=x-m\nonumber \\ & =\frac{\exp(\lambda m+\frac{1}{2}\lambda^{2}s^{2})}{s\sqrt{2\pi}}\int_{-\infty}^{\infty}\exp\left[-\frac{(y-\lambda s^{2})^{2}}{2s^{2}}\right]dy\nonumber \\ & =\exp[\lambda m+\frac{1}{2}\lambda^{2}s^{2}]  \ \ (12) \end{aligned}</script><p>Now we have the present value of$F(x)$</p><script type="math/tex; mode=display">\begin{aligned}F(x) & =\int{0}^{\infty}E[exp(\lambda x{t})|x_{0}=x]\exp(-\rho t)dt\nonumber \\ & =\exp(\lambda x)\int_{0}^{\infty}\exp[\lambda\mu t+\frac{1}{2}\lambda^{2}\sigma^{2}t]dt\nonumber \\ & =\exp(\lambda x)/(\rho-\lambda\mu-\frac{1}{2}\lambda^{2}\sigma^{2}) \ \ (13) \end{aligned}</script><p>The intergal converges provided the denominator is positive. To describe the convergence property, it is useful to give a uniforma notation and interpretation at the outset.</p><script type="math/tex; mode=display">\phi(\xi)=\rho-\xi\mu-\frac{1}{2}\xi^{2}\sigma^{2} \ \ (14)</script><p>Labed as the Fundamental Quadratic of Brownian Motion</p><p><img src="/pic/continue_time/fig3.png" alt="image"></p><p>The condition for the convergence of the integral in (11) amounts to requiring that $\lambda$lies in the interval $(-\alpha,\beta)$ This includes $\lambda=0$ .</p><p>We can use the formula 11 to derive an expression for $F(x)$ when $f(x)$ in any integer power $x^{n}$. For exponential flow function</p><script type="math/tex; mode=display">\begin{matrix}F(x) & =E[\int_{0}^{\infty}\sum_{n=0}^{\infty}\frac{1}{n!}(\lambda x{t})^{n}e^{-\rho t}dt|x_{0}=x]\\ & =\sum_{n=0}^{\infty}\frac{\lambda^{n}}{n!}E[\int_{0}^{\infty}x{t}^{n}e^{-\rho t}dt|x_{0}=x] \end{matrix}</script><script type="math/tex; mode=display">\begin{aligned}\exp(\lambda x) & =\sum_{k=0}^{\infty}\frac{1}{n!}\lambda^{n}x^{n}\\[\rho-\mu\lambda-\frac{1}{2}\sigma^{2}\lambda^{2}]^{-1} & =\frac{1}{\rho}\sum_{n=0}^{\infty}\rho^{-n}(\mu\lambda+\frac{1}{2}\sigma^{2}\lambda^{2})^{n}\end{aligned}</script><p>For each power of $x​$ we write out first two, and rest follows same tedious calcualtion</p><script type="math/tex; mode=display">\begin{aligned}E\{\int_{0}^{\infty}x{t}e^{-\rho t}dt \} & =\frac{\mu}{\rho^{2}}+\frac{x}{\rho} \ \ (15)  \\ E\{ \int_{0}^{\infty}x{t}^{2}e^{-\rho t}dt \} & =[\frac{\sigma^{2}}{\rho^{2}}+\frac{2\mu^{2}}{\rho^{3}}]+\frac{2\mu x}{\rho^{2}}+\frac{x^{2}}{\rho} \ \ (16)\end{aligned}</script><p>Finally consider any analytic $f(x)$ with the power series representation</p><script type="math/tex; mode=display">f(x)=\sum_{n=0}^{\infty}f_{n}(x^{n})</script><p>assumed uniformly convergent for all $x$. Having found the expected present values of all integer powers, we can integrate term by term to find the $F(x)$ corresponding to this analytic $f(x)$. Thus we can in-principle complete the calculation of present values for most common functions of Brownian motion.</p><h2 id="Present-values-for-powers-of-geometric-Brownian-motion"><a href="#Present-values-for-powers-of-geometric-Brownian-motion" class="headerlink" title="Present values for powers of geometric Brownian motion"></a>Present values for powers of geometric Brownian motion</h2><p>Next suppose $X$ follows the geometric brownian motion,</p><script type="math/tex; mode=display">dX/X=vdt+\sigma dw</script><p>We want to find the expected present value when flow payoff is $g(X)=X^{\lambda}$. Note that $x=\ln(X)$ follows the Brownian motion</p><script type="math/tex; mode=display">dx=(v-\frac{1}{2}\sigma^{2})dt+\sigma dw</script><p>and $X^{\lambda}=\exp(\lambda x)$ , we have</p><script type="math/tex; mode=display">\begin{aligned}E{\int_{0}^{\infty}X_{t}^{\lambda}e^{-\rho t}dt} & =\exp(\lambda x)/[\rho-(v-\frac{1}{2}\sigma^{2})\lambda-\frac{1}{2}\sigma^{2}\lambda^{2}]\\ & =X^{\lambda}/[\rho-v\lambda-\frac{1}{2}\sigma^{2}\lambda(\lambda-1)]  \ \ (17) \end{aligned}</script><p>The above will converge as long as denominator is positive. So the convergence condition is now defined as</p><script type="math/tex; mode=display">\psi(\xi)=\rho-v\xi-\frac{1}{2}\sigma^{2}\xi(\xi-1) \ \ (18)</script><p>two economically natural assumption that $\rho&gt;0$ and $\rho&gt;v$ guarantee the roots of above equation $-\gamma<0$ and="" $\delta="">1$ . Similarly, $\lambda$ should lie in the interval $(-\gamma,\delta)$.</0$></p><p>For $Y=X^{\lambda}$, we have</p><script type="math/tex; mode=display">dY/Y=[\lambda v+\frac{1}{2}\lambda(\lambda-1)\sigma^{2}]dt+\lambda\sigma dw</script><p>For the convergence of the expected present value of $Y$, the discount rate must exceed the trend growth rate of $Y$ which is $\psi(\lambda)&gt;0$ And for the relation between absolute and geometric Brownian motion, if $x=\ln X$, we have that $\mu=v-\frac{1}{2}\sigma^{2}$</p><script type="math/tex; mode=display">\begin{aligned}\psi(\xi) & =\rho-(\mu+\frac{1}{2}\sigma^{2})\xi-\frac{1}{2}\sigma^{2}\xi(\xi-1)\\ & =\rho-\mu\xi-\frac{1}{2}\sigma^{2}\xi^{2} \\ & =\phi(\xi)\end{aligned}</script><p>And then the roots will also correspond ,with $\alpha=\gamma$ and $\beta=\delta$</p><h2 id="A-basic-differential-equation-for-present-value"><a href="#A-basic-differential-equation-for-present-value" class="headerlink" title="A basic differential equation for present value"></a>A basic differential equation for present value</h2><p>Now let us return to absolute Brownian motion $x$ and the flow payoff $f(x)$ , and consider an alternative characterization of the expected present value $F(x)$. Here we just want to use an alternative method to split the $F(x)$ integral into the contribution over the initial infinitesimal time interval from $0$ to $dt$ and the integral from $dt$ to $\infty$. Why we want to do this? Because through this we can get basic differential equation for $F(x)$</p><p>Note that start from $x+dx$ we need take discount value back to time $t=0$ . So we have</p><script type="math/tex; mode=display">F(x)=f(x)dt+e^{-\rho dt}E[F(x+dx)]</script><p>Note that this is already an approximation in regarding $f(x)$ as constant over the small interval $dt$. the resulting error in $f(x)dt$ is of order $dt^{2}$. We further simplify the expression and get</p><script type="math/tex; mode=display">\begin{aligned}F(x) & =f(x)dt+(1-\rho dt)(F(x)+[E[F(x+dx)]-F(x)])\\ & =f(x)dt+F(x)-\rho F(x)dt+[E[F(x+dx)]-F(x)] \end{aligned}</script><p>Therefore</p><script type="math/tex; mode=display">\begin{aligned}\rho F(x)dt & =f(x)dt+[E[F(x+dx)]-F(x)]\nonumber \\ & =f(x)dt+E[dF] \ \ (19) \end{aligned}</script><p>The above is the <strong>arbitrary equation.</strong> Think of the entitlement to the flow payoffs as a capital asset; $F(x)$ is its value. Contemplate holding this asset over the period $(t,t+dt)$. This yields a dividend $f(x)dt$, and an expected capital gain $E[dF]$. The sum of these two should equal the normal return $\rho F(x)dt$</p><p>By Ito Lemma, (previous) <script type="math/tex">E[dF]=\mu F^{'}(x)dt+\frac{1}{2}\sigma^{2}F^{''}(x)dt</script></p><p>Substituting into (15) and dividing by $dt$, we get</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}F^{''}(x)+\mu F^{'}(x)-\rho F(x)+f(x)=0 \ \ (20)</script><h2 id="Derivation-by-discrete-approximation"><a href="#Derivation-by-discrete-approximation" class="headerlink" title="Derivation by discrete approximation"></a>Derivation by discrete approximation</h2><p>We regarded Brownian motion as the limit of a discrete random walk, and we can also derive the differential equation (16) by that approach.</p><p>Label the discrete points in the $x$ space by $i$ , and the discrete time periods by $j$. Let $i_{j}$ denote the position of the particle at time $j$; future positions are of course random variables given our initial information at $j=0$. Then the expected present value can be written as</p><script type="math/tex; mode=display">F(i)=E\left\{ \sum_{j=0}^{\infty}f(i_{j})\bigtriangleup te^{-j\rho\bigtriangleup t}|i_{0}=i\right\}</script><p>After the first step, the same problem restarts with a new initial state $i_{1}$, which from the time $0$ perspective can be either $(i+1)$ with probability $p$ or $(i-1)$ with probability $q$. Thus the expectation on the right hand side becomes</p><script type="math/tex; mode=display">F(i)=f(i)\bigtriangleup t+e^{-\rho\bigtriangleup t}[pF(i+1)+qF(i-1)]</script><p>Now expand the right hand side, ignoring terms of higher order than $\bigtriangleup t.$ Note that</p><script type="math/tex; mode=display">e^{-\rho\bigtriangleup t}=1-\rho\bigtriangleup t+...</script><p>Next , we reuse the definite of (5) of $p$ and $q$ and the relation (4) between the stepsize $\bigtriangleup h$ and the time interval $\bigtriangleup t$ we can get</p><script type="math/tex; mode=display">\begin{aligned}pF(i+1)+qF(i-1) & =\frac{1}{2}[1+(\mu/\sigma)\sqrt{\bigtriangleup t}]F(x+\bigtriangleup h)\\ & \ \ +\frac{1}{2}[1-(\mu/\sigma)\sqrt{\bigtriangleup t}]F(x-\bigtriangleup h)\\ & =\frac{1}{2}[1+(\mu/\sigma)\sqrt{\bigtriangleup t}][F(x)+F^{'}(x)\bigtriangleup h\\ & \ \ +F^{''}(x)(\bigtriangleup h)^{2}+... ] \\ & =\frac{1}{2}[1+(\mu/\sigma)\sqrt{\bigtriangleup t}][F(x)-F^{'}(x)\bigtriangleup h+\\ & \ \ +F^{''}(x)(\bigtriangleup h)^{2}+... ] \\ & =F(x)+\mu F^{'}(x)\bigtriangleup t+\frac{1}{2}\sigma^{2}F^{''}(x)\bigtriangleup t+...\end{aligned}</script><p>Substituting and simplifying yield the same equation (the above equation) as (16)</p><script type="math/tex; mode=display">F(i)=f(i)\bigtriangleup t+e^{-\rho\bigtriangleup t}+[1-\rho\bigtriangleup t][...]</script><h2 id="The-general-solution"><a href="#The-general-solution" class="headerlink" title="The general solution"></a>The general solution</h2><p>This part tells how to solve the second order differential equation. The differential equation (16) is linear. Therefore its general solution is the sum of two parts: any solution of the equation as a whole (particular integral) and the general solution of the homogeneous part of the equation with the term $f(x)$ omitted (the complementary function)<sup><a href="#fn_1" id="reffn_1">1</a></sup>.</p><p>To find the complementary function, write the homogeneous part of the equation:</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}F^{''}(x)+\mu F^{'}(x)-\rho F(x)=0</script><p>Its general solution can be expressed as a linear combination of two independent solution. For instance, if we try solutions ofthe form $\exp(\xi x),$we get <script type="math/tex">\exp(\xi x)[\frac{1}{2}\sigma^{2}\xi^{2}+\mu\xi-\rho]=0</script></p><p>Since the exponential is always positive, this holds if and only if</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}\xi^{2}+\mu\xi-\rho=0</script><p>This is just $\phi(\xi)$ introduced above. So $\xi$ must equal $-\alpha$ or $\beta$ the two roots. The two roots are distinct. They have opposite signs. The two solutions $e^{-\alpha x}$and $e^{\beta x}$ are independent and the general solution is</p><script type="math/tex; mode=display">Ae^{-\alpha x}+Be^{\beta x} \ \ (21)</script><p>where $A$ and $B$ are undetermined constants.</p><p>Finding a particular solution to the full equation (16) is often an art (with lucky) , but for the exponential and polynomial forms we tried before, there are obvious choice.</p><p>Begin with the exponential case. When $f(x)=exp(\lambda x)$ the form $F(x)=K\exp(\lambda x)$ suggest itself</p><script type="math/tex; mode=display">K(\frac{1}{2}\sigma^{2}\lambda^{2}+\mu\lambda-\rho)\exp(\lambda x)+\exp(\lambda x)=0</script><p>we get <script type="math/tex">K=1/\phi(\lambda)</script></p><p>Combining this particular solution and the earlier complementary function, the general solution for the expected present value in the exponential case becomes</p><script type="math/tex; mode=display">F(x)=\frac{1}{\phi(\lambda)}e^{\lambda x}+Ae^{-\alpha x}+Be^{\beta x} \ \ (22)</script><p>In fact, a simple argument shows that when the flow $f(x)$ is the exponential $exp(\lambda x)$ the expected present values $F(x)$ must be a multiple of $\exp(\lambda x)$. To give a formal argument, define $y_{t}=x_{t}-h$ and consider the stochastic process $y_{t}$</p><script type="math/tex; mode=display">dy=dx=\mu dt+\sigma dw</script><p>and the initial position $y_{0}=(x+h)-h=x$. The flow benefit can be written</p><script type="math/tex; mode=display">F(x+h)=e^{\lambda x_{t}}=e^{\lambda h}e^{\lambda y_{t}}=e^{\lambda h}f(y_{t})</script><p>Integrating over time and taking expectation, we get</p><script type="math/tex; mode=display">F(x+h)=e^{\lambda h}E\left\{ \int_{0}^{\infty}f(y_{t})e^{-\rho t}dt|y_{0}=x\right\}</script><p>Subtracting $F(x)$ from both side, dividing by $h$, and letting $h$ go to zero, we get</p><script type="math/tex; mode=display">\lim_{h\rightarrow0}\frac{F(x+h)-F(x)}{h}=\lim_{h\rightarrow0}\frac{\exp(\lambda h)-1}{h}F(x)</script><p>or</p><script type="math/tex; mode=display">F^{'}(x)=\lambda F(x)</script><p>As we can see the genral solution above was a combination of three terms, of which only the first, corresponding to the particular solution we guessed initially, had the right exponential form. Both $A$ and $B$ are zero. In the same way we can guess similar form of functions.</p><p>Now consider the polynomial case. When $f(x)=x^{n}$ for a positive integer $n$ , a natural guess for the particular integral is</p><script type="math/tex; mode=display">F(x)=\sum_{m=0}^{n}a_{m}x^{m} \ \ (23)</script><p>Substituting this in $16$ we can get</p><script type="math/tex; mode=display">\begin{aligned}\frac{1}{2}\sigma^{2}\sum_{m=2}^{n}m(m-1)a_{m}x^{m-2}+\mu\sum_{m=1}^{n}ma_{m}x^{m-1} \\-\rho\sum_{m=0}^{n}a_{m}x^{m}+x^{m} & =0\end{aligned}</script><p>Collecting like powers of $x​$ together and equating the coefficient of each separately to zero since the equation must hold as an identity in $x​$ , we find</p><script type="math/tex; mode=display">a_{n}=\frac{1}{\rho},a_{n-1}=n\mu/\rho^{2}</script><p>and for $m=0,1,2,…(n-2)$ the recursive relation</p><script type="math/tex; mode=display">\rho a_{m}=(m+1)\mu a_{m+1}+\frac{1}{2}(m+1)(m+2)\sigma^{2}a_{m+2} \ \ (24)</script><p>This determines all the coefficients $a_{m}​$. Once again we can verify that the expected present value cannot have any contribution from the exponential of the complementary function. So (18) is the full solution.</p><h2 id="Differential-equation-for-the-geometric-Brownian-motion"><a href="#Differential-equation-for-the-geometric-Brownian-motion" class="headerlink" title="Differential equation for the geometric Brownian motion"></a>Differential equation for the geometric Brownian motion</h2><p>Now we turn again to geometric Brownian motion. Given a flow cost function $g(X)$, we want to find</p><script type="math/tex; mode=display">G(X)=E\left\{ \int_{0}^{\infty}g(X_{t})e^{-\rho t}dt|X_{0}=X\right\} \ \ (25)</script><p>Proceeding exactly as before, we get the arbitrage equation</p><script type="math/tex; mode=display">pG(X)dt=g(X)dt+E[dG]</script><p>and Ito Lemma gives</p><script type="math/tex; mode=display">E[dG]=vXG'(X)dt+\frac{1}{2}(\sigma X)^{2}G^{''}(X)dt</script><p>Therefore the basic differential equation for the case of geometric Brownian motion is</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}X^{2}G^{''}(X)+vXG^{'}(X)-\rho G(X)+g(X)=0 \ \ (26)</script><p>The complementary function is easily seen to be</p><script type="math/tex; mode=display">CX^{-\gamma}+DX^{\delta} \ \ (27)</script><p>The same argument as before. Once agian the particular integral must be guessed. Previously we considered $g(X)=X^{\lambda}$ and natural guess for this is $G(X)=KX^{\lambda}$. Substituting into (20) we find</p><script type="math/tex; mode=display">K=1/\psi(\lambda)</script><p>where $\psi(\lambda)$ is the fundamental quadratic for the geometric case. An argument similar to what we made above, the full solution is jsut the particular integral we guessed ; $C$ and $D$ are both zero.</p><p>We can change variables to transform geometric Brownian motion into an absolute one, and this gives an alternative way to find expected present values. Define $x=\ln X$ and $\mu=v-\frac{1}{2}\sigma^{2}$ . Let $f(x)=g(e^{x})$ $G(X)=F(\ln(X))$ . We will</p><script type="math/tex; mode=display">F'(x)=e^{x}G'(e^{x})=XG'(X)</script><p>and</p><script type="math/tex; mode=display">F^{''}(x)=(e^{x})^{2}G^{''}(e^{x})+e^{x}G^{'}(e^{x})=X^{2}G^{''}(X)+XG^{'}(X)</script><p>Substitution in (16) we find</p><script type="math/tex; mode=display">0=\frac{1}{2}\sigma^{2}X^{2}G^{''}(X)+vXG^{'}(X)-\rho G(X)+g(X)</script><p>which is just (20). The two approaches are mutually consistent.</p><h2 id="General-diffusion-process"><a href="#General-diffusion-process" class="headerlink" title="General diffusion process"></a>General diffusion process</h2><p>If X follows the general diffusion process (9) rather than the simple Brownian motion (1), the expected value function $F(x)$ and the flow function $f(x)$ are linked by a differential equation that is a natural generalization of (16) namely</p><script type="math/tex; mode=display">\frac{1}{2}\sigma(x)^{2}F^{''}(x)+\mu(x)F^{'}(x)-\rho F(x)+f(x)=0 \ \ (28)</script><p>Unfortunately, this time the solution is not the corresponding simple. The complementary function is specific to each case depending on the functional form of $\mu(x)$ and $\sigma(x)$. Analytical solution is possible only in very special cases. The geometric case was discussed above. for linearly mean-reverting motion (10) a power series solution related to the Confluent Hypergeometric function is avaibale; an example is developed in 5.1 .</p><p>If $x$ follows the Ito process (9) whose parameters depend on time as well as the state $x$, or if the flow payoff is a function $f(x,t)$ like wise, or the process ends at a given time $T$ so the time remaining to the end of the horizon matters, then we must allow the expected present value to depend on time too. The basic equation becomes a partial differential equation</p><script type="math/tex; mode=display">\frac{1}{2}\sigma(x,t)^{2}F_{xx}(x,t)+\mu(x,t)F_{x}(x,t)-\rho F(x,t)+F_{t}(x,t)+f(x,t) \ \ (29)</script><p>The solution of this is much hard, and typically needs numerical methods.</p><h1 id="Barriers"><a href="#Barriers" class="headerlink" title="Barriers"></a>Barriers</h1><p>The above discussion assumed that the Brownian motion particle $x$ (absolute case) was free to range over the entire real line $(-\infty,+\infty)$. Similarly, in the case of geometric Brownian motion $X$ could range over $(0,\infty)$. In practice there are restrictions on the range. For example the output price facing one firm in a competitive industry is bounded above, because <strong>new firm will enter if the price rises beyond a certain point</strong>. Other cases the restrictions are exogenously imposed, as in the case of <strong>a government-imposed agricultural price floor</strong>. Finally, and most important for our purpose here, the restrictions arise endogenously through <strong>purposive optimal control of the stochastic propose</strong>.</p><p>In this section, the book will start with some specified restrictions on the process, and show how their effects on expected present values can be computed. The restrictions are called <em>barriers</em>. They can constrain upward or downward movement of $x$ , and are of two types, <em>absorbing</em> and <em>reflecting</em>.</p><p>at $b$ means that the process $(1)$ is allowed to proceed unhindered so long as $x_{t}&lt;b$, but if ever $x_{t}=b$, the process is terminated. That might be the end of our planning horizon, or merely the end of the movement of $x$, <strong>so that it remains at $b$ for ever after</strong>. Sometimes such an absorbed process might be immediately restarted at a point $c&lt;b$. Lower and two sided absorbing barriers are defined in obvious ways.</p><p>at $b$ means that the process $(1)$ is allowed to proceed unhindered so long as $x_{t}&lt;b$, but if ever $x_{t}=b$, and the next increment $dx$ is positive, then the sign of this increment is reversed, as if the particle were reflected in a mirror placed at $b$. Once again, lower and two-sided barriers are defined analogously. We can even have an absorbing barrier on one side and a reflecting barrier on the other side.</p><p>Now consider a process with barriers for $x$, take a flow payoff function $f(x)$, and define the expected present value function $F(x)$ as in (20). When there wre no barriers, we took two approaches to finding $F(x)$. The first approach was direct. The distribution of $x_{t}$ given $x_{0}$ was known and simple, namely normal, so expected values of functions of $x_{t}$ could be found relatively easily. When there are barriers, between the starting time $0$ and the instant in question $t$ the particle might have been reflected at barriers any numer of times, or been absorbed with positive probability. The distribution of $x_{t}$ conditional on $x_{0}$ is much more complicated. This would be discussed in section 6.3. The second and indirect approach proves simpler. We show that $F(x)$ satisfies the same basic differential equation in the interior of the region of variation of $x$, and certain end-point conditions at the barriers. Finding $F(x)$ then amounts to solving the differential equations subject to the end-point conditions.</p><h2 id="Basic-differential-equation"><a href="#Basic-differential-equation" class="headerlink" title="Basic differential equation"></a>Basic differential equation</h2><p>Suppose the process moves between barriers located at $a$ and $b$. For the moment it makes no difference whether the barriers are reflecting or absorbing, and $a=-\infty,b=\infty$ are permissible. Choosing the initial point $x_{0}=x$ in the interior of the range $[a,b]$. Over an infinitesimal time interval $dt$ , the probability of $x_{t}$, reaching either barrier is negligible. Therefore the arbitrage argument of section 2.3 remains valid, and the basic differential equation (20) holds. The derivation of section 2.4, based on discretization of the $x$ space, is also valid so long as the length of each step $\bigtriangleup h$ is chosen sufficiently small.</p><p>Even when the process has barriers, the flow function $f(x)$ is genrally defined over the full unrestricted range $(-\infty,+\infty)$ of the $x$ space. Even if it is not, we can extend its definition in some simpleway over the full range. Let $F_{0}(x)$ denote the expected present value of $f(x_{t})$ as defined in 2.1 above, and computed ignoring the barriers. Then we can follow previous procedure to calculate $F_{0}(x)$ for any analytic functions $f(x)$.</p><p>Our choice of $F_{0}(x)$, the expected present value ignoring barriers, as the particular integral gives a very nnice economic interpretation to the solution. Since the particular integral is what the expected present value would have been in the absence of barriers, the remaining part, n<strong>amely the complementary function, must equal the effect of the barriers</strong>. For example, a price ceiling cuts off the upside profit potential of a firm; its effect is simply captured by the appropriate term in the complementary function. This actually tells us that it is the complementary function that exercise such control.</p><p>Recalling the form (21) of the complementary function.</p><script type="math/tex; mode=display">F(x)=F_{0}(x)+Ae^{-\alpha x}+Be^{\beta x} \ \ (30)</script><p>The constants $A$ and $B$ must be determined using some other conditions on the problem. This is where the barriers come into play.</p><p>If $x$ is free to range over the entire line $(-\infty,+\infty)$ , we already know that $F(x)=F_{0}(x)$. Then $A$ and $B$ must both be zero.</p><p>If $x$ is not restricted on the lower side, but has an upper barrier at $b$, then we can get some information by considering what happens for very large negative values of $x$. Starting from such a value, the particle is unlikely to reach $b$ in any reasonable future time. Then the unrestricted expected present value $F_{0}(x)$ should be a good approximation for $F(X)$. But with $\alpha&gt;0,\ e^{-\alpha x}$ goes to $\infty$ as x goes to $-\infty$. This would spoil the desired approximation unless $A=0$. Thus we have determined one of the constants. The other, $B$, is fixed using end-point conditions at the barrier $b$, which we will examine shortly.</p><p>Similarly, if $x$ has a only lower barrier at $a$, then the inspection of $F(x)$ as $x$ goes to $\infty$gives $B=0$, while $A$ is fixed by conditions at the barrier. If there are barriers on both sides, then both $A$ and $B$ are fixed by the end-point conditions at the barriers.</p><h2 id="Geometric-Brownian-motion"><a href="#Geometric-Brownian-motion" class="headerlink" title="Geometric Brownian motion"></a>Geometric Brownian motion</h2><p>Now suppose the underling variable is $X$, and it follows the proportional or geometric Brownian motion 1.8, with barriers at $c$ and $d$. Let the flow function be $g(X)$. Extending its definition outside the bariers to the full range $(0,\infty)$ of $X$ if necessary, following the similar setup as above 3.1, let $G_{0}(X)$ satisfies the basic differential equation 2.16 for geometic Brownian motion, and serves as a particular integral over the restricted range $(c,d)$ Then general solution is</p><script type="math/tex; mode=display">G(X)=G_{0}(X)+CX^{-\gamma}+DX^{\delta} \ \ (31)</script><p>$-\gamma$ and $\delta$ are the roots of the fundamental quadratic (27), and $C,D$ are constants to be determined by conditions that apply at the barriers .</p><h2 id="Stopping"><a href="#Stopping" class="headerlink" title="Stopping"></a>Stopping</h2><p>Now let us return to the case of absolute Brownian motion, and begin the analysis of barriers, starting with an upper absorbing barrier.Suppose the barrier is placed at $b$. To set the stage for subsequent analysis of control, allow an exogenous terminal payoff $W(b)$. If x stays for ever at b after absorption, $W(b)$ may simply be the capitalized value of the constant flow payoff, $f(b)/\rho$. But other interpretations are also possible. If a cost $k$ must be paid at the instant of absorption, we simply subtract if from $W(b)$ to make it $W(b)-k$.</p><p>The expression (2.1) for the expected present value must be modified to take account of the barrier and the terminal payoff.</p><script type="math/tex; mode=display">F(X)=E\left\{ \int_{0}^{t(b)}f(x_{t})e^{-\rho t}dt+e^{-\rho(b)}W(b)|x_{0}=x\right\} \ \ (32)</script><p>where $t(b)$ is the first time the process reaches $b$ starting at $x$, and of course it is a random variable given the initial information.</p><p>To find the conditions that hold at the barrier, we repeat the arbitrage calculation, but now starting at or near the barrier rather than at an interior point. Revert to the discrete approximation to Brownian motion, with time intervals $\bigtriangleup t$ and steps of length $\bigtriangleup h$. Starting at $(b-\bigtriangleup h)$, we have</p><script type="math/tex; mode=display">F(b-\bigtriangleup h)=f(b-\bigtriangleup h)\bigtriangleup t+(1-\rho\bigtriangleup t)[pW(b)+qF(b-2\bigtriangleup h)]</script><p>Expanding the Taylor series, we get</p><script type="math/tex; mode=display">\begin{aligned}F(b)-F'(b)\bigtriangleup h+... & =f(b)\bigtriangleup t+...+\frac{1}{2}W(b)[1-\rho\bigtriangleup t+...]\\ & +\frac{1}{2}(1-\rho\bigtriangleup t)[F(b)-2F'(b)\bigtriangleup h+...]\end{aligned}</script><p>Collecting terms, dividing by $\bigtriangleup h$ and taking limits, we find</p><script type="math/tex; mode=display">F(b)=W(b) \ \ (33)</script><p>This is sometimes called the Value Matching condition.</p><h2 id="Resetting"><a href="#Resetting" class="headerlink" title="Resetting"></a>Resetting</h2><p>Here the process is allowed to follow (1.1) so long as $x&lt;b$, but the instant $x$ hits $b$, it is reset at $x=c&lt;b$, and the process is restarted. The calculation is as above, except that $F(c)$ replace $W(b)$, and we get a value matching condition $F(c)$ replaces $W(b)$, and we get a value matching condition $F(b)=F(c)$ . If the resetting entailed a cost $k$, this would become $F(b)=F(c)-k$</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>Finally, suppose the process is reflected at an upper barrier $b$. Now starting at $b$ we are sure to go to $(b-\bigtriangleup h)$, so</p><script type="math/tex; mode=display">\begin{aligned}F(b) & =f(b)\bigtriangleup t+(1-\rho\bigtriangleup t)F(b-\bigtriangleup h)\\ & =f(b)\bigtriangleup t+(1-\rho\bigtriangleup t)[F(b)-F'(b)\bigtriangleup h+...]\end{aligned}</script><p>Cancelling $F(b)$ from both sides, the leading term on the right hand side becomes $-F’(b)\bigtriangleup h$; recall that it is of order $\sqrt{\bigtriangleup t}\geq\bigtriangleup t$. Dividing $\bigtriangleup h$ and taking limits gives</p><script type="math/tex; mode=display">F'(b)=0 \ \ (34)</script><p>To repeat the point in a slightly different way, note that starting at $b$, the next step is sure to be downward through the distance $\bigtriangleup h=\sigma\sqrt{\bigtriangleup t}$. If $F’(b)$ were non-zero, this would make $dF=-\sigma\sqrt{\bigtriangleup t}$. The capital gain term in the arbitrage equation (2.9) would be of order $\sqrt{\bigtriangleup t}$. But the normal return and dividend terms are of order $\bigtriangleup t$, and therefore relatively much smaller. Then the arbitrage equation would not hold. This contradiction proves that $F’(b)\neq0$ is impossible.</p><p>Some people call any condiiton that pertains to the first-order derivatives of an expected present value of a function of Brownian motion a Smooth Pasting Condition.</p><p>If reflection is costly, with cost $m$ per unit distance through which the particle is reflected, we substrct $m\bigtriangleup h$ from the right hand side, and the conditon becomes $F’(b)+m=0$ At a lower reflecting barrier, a, similar analysis gives $F’(a)-m=0$.</p><p>Similar conditions for geometric Brownian motion follows.</p><h2 id="Example-price-ceiling"><a href="#Example-price-ceiling" class="headerlink" title="Example: price ceiling"></a>Example: price ceiling</h2><p>Consider a firm that produces a unit of output per unit time. The cost of production is $W$. The price $P$ follows a geometric Brownian motion with parameters $v$ and $\sigma$. In this section I suppose that even when $P$ falls below $W$ so that the operating profit $(P-W)$ is negative, the firm must continue operation. This is sometimes required of public utilities or transport services.</p><p>Begin by supposing that there are no barriers on the price process. Then we can use the formula (26) for $\lambda=0$ and $1$ to get the expected present value of profits.</p><script type="math/tex; mode=display">G_{0}(P)=P/(p-v)-W/\rho \ \ (35)</script><p>Next suppose there is an upper reflecting barrier on the price process at $P=b$. This could be a ceiling imposed by the government, or the method laid out in Section 3., the expression for the expected present value of profit is easily seen to be</p><script type="math/tex; mode=display">G(P)=G_{0}(P)+DP^{\delta} \ \ (36)</script><p>Note that the other term in the complementary function, $CP^{-\gamma}$, must be zero to ensure a finite expected value as $P$ goes to zero. To determine the constant $D$, we use the condition (34), so</p><script type="math/tex; mode=display">G'(b)=\delta Db^{\delta-1}+1/(\rho-v)=0</script><p>Then</p><script type="math/tex; mode=display">D=-b^{1-\delta}/[\delta(\rho-v)]<0</script><p>Comparing the expression (3.6) and (3.7). we see how the ceilling reduces the expected present value of profits by cutting off the upside potential. Substituting for $D$ in (36), we get</p><script type="math/tex; mode=display">G(P)=-\frac{P^{\delta}b^{1-\delta}}{\delta(\rho-v)}+\frac{P}{\rho-v}-\frac{W}{\rho} \ \ (37)</script><h2 id="Example-exchange-rate-target-zones"><a href="#Example-exchange-rate-target-zones" class="headerlink" title="Example: exchange rate target zones"></a>Example: exchange rate target zones</h2><p>The following reduced form model is often used in exchange rate theory. Let $s$ denote the logarithm of the exchange rate, and $x$ the logarithm of the fundamental determinant of it, typically a variable such as money supply or the velocity of circulation of money. Then arbitrage- type considerations establish</p><script type="math/tex; mode=display">s=x+\lambda E[ds]/dt</script><p>where $\lambda$ can be interpreted as the semi-elasticity of money demand. Let $\rho=1/\lambda$. If an explosive bubble path is ruled out, we can integrate (38) to write</p><script type="math/tex; mode=display">s_{0}=\rho\int_{0}^{\infty}x_{t}e^{-\rho t}dt</script><p>This is formally very like theexpected present value expression (20). Suppose $x_{t}$ is a Brownian motion with parameters $\mu=0$ and $\sigma$. Then, using (24), the right hand side of (39) becomes simply $x_{0}$ . In the absence of any bariiers of controls, the exchange rate jsut tracks the fundamentals.</p><p>Next suppose we wish to keep the exchange rate confined to the interval $(-z,z)$. We do this by confining the fundamental process to $(-b,b)$ by means of reflecting barriers at both ends. To see what this does to $s$, write $s=S(x)$ and substitute in (3.9). Using Ito’s Lemma, we get</p><script type="math/tex; mode=display">s=x+\frac{1}{2}\lambda\sigma^{2}S^{''}(x)</script><p>or</p><script type="math/tex; mode=display">\frac{1}{2}\sigma^{2}S^{''}(x)-\rho S(x)+\rho x=0</script><p>This can be solved by familiar methods. The fundamental quadratic is</p><script type="math/tex; mode=display">\phi(\xi)=\rho-\frac{1}{2}\sigma^{2}\xi^{2}=0</script><p>with roots $\pm\beta=\pm\sqrt{2\rho}/\sigma$. The general solution is</p><script type="math/tex; mode=display">S(x)=x+Ae^{-\beta x}+Be^{\beta x}</script><p>The two constants are determined using the “smooth pasting ” conditions at the two reflecting barriers: <script type="math/tex">S'(-b)=0=S'(b)</script></p><p>The result is</p><script type="math/tex; mode=display">S(x)=x-\frac{1}{\beta}\frac{e^{\beta x}-e^{-\beta x}}{e^{\beta b}-e^{-\beta b}}</script><p>Finally, $b$ must be chosen to attain the desired limits on $s$, so $S(b)=z$ defines $b$ in terms of given $z$. We do not need the explicit expression. The result is an S-shaped curve, with slope</p><script type="math/tex; mode=display">S'(x)=1-\frac{e^{\beta x}-e^{-\beta x}}{e^{\beta b}-e^{-\beta b}}</script><p><img src="/pic/continue_time/fig3.eps" alt="image"></p><p>Note that the function $\exp(\beta x)+\exp(-\beta x)$ is symmetric and convex. Its minimum occurs at $x=0$, the minimum value being 2. Therefore (i) $S’(0)$ lies between $0$ and $1$, and (ii) $S’(x)$ goes to $0$ as $x$ goes to $\pm b$. Then the function $S(x)$ giving the exchange rate in terms of the fundamental is S-shaped, and everywhere flatter than 1.</p><h2 id="Transitional-boundary"><a href="#Transitional-boundary" class="headerlink" title="Transitional boundary"></a>Transitional boundary</h2><p>Sometimes the process encounter not a barrier, but a point of transition where either the parameters of the process, or the flow payoff function, or both, undergo a change. Let $b$ be such a point of transition, and suppose</p><script type="math/tex; mode=display">\begin{aligned}\mu & =\mu{1},\ \sigma=\sigma{1},\ f(x)=f_{1}(x)\ when\ x<b \\\mu & =\mu{2},\ \sigma=\sigma{2},\ f(x)=f_{2}(x)\ when\ x>b \\\end{aligned}</script><p>We can use separate differential equations like (19) on each side of $b$ and obtain solutions $F_{1}(x)$ and $F_{2}(x)$. The former is valid for $-\infty&lt;x&lt;b$, and the latter for $b&lt;x&lt;\infty$. Asymptotic considerations allow us to get rid of the term in $\exp(-\alpha_{1}x)$ from $F_{1}(x)$, and that in $\exp(\beta_{2}x)$ from $F_{2}(x)$, where $-\alpha,\beta$ denote the roots of the fundamental quadratic in the respective regious $i=1,2$. Note that $F_{1}(x)$ has no relevance to the right of $b$, so we cannot use the limiting consideration as $x$ goes to $\infty$ for $F_{1}(x)$. Similarly $F_{2}(x)$ cannot be made to satisfy any asymptotic regularity requirement as $x\rightarrow-\infty.$ Therefore each of $F_{1}(x)$ and $F_{2}(x)$ still contains one constant to be determined.</p><p>The condition that fixes the two remaining constants is that $F_{1}(x)$ and $F_{2}(x)$ should meet tangentially, or be ’smoothly pasted’ together, at $b$. Thus</p><script type="math/tex; mode=display">F_{1}(b)=F_{2}(b),\ F_{1}'(b)=F_{2}'(b)</script><h2 id="Example-temporary-suspension"><a href="#Example-temporary-suspension" class="headerlink" title="Example: temporary suspension"></a>Example: temporary suspension</h2><p>Return to the firm  just above, with two modifications. First, we remove the imposed pricing ceiling. Second, and more important for the current context, we now follow McDonald and Siegel (1985), and let the firm suspend operations when $P&lt;W$.</p><p>Now the flow of profits $g(P)$ ha the piecewise linear form</p><script type="math/tex; mode=display">g(P)=\begin{cases}0 & P<W\\P-W & W<P\end{cases}</script><p>The differential equation for $G(P)$ correspondingly has two different forms in the two regions. Let $G_{1}(P)$ be the solution in the region $P&lt;W$ and $G_{2}(P)$ that in the region $W&lt;P$. We have</p><script type="math/tex; mode=display">G_{1}(P)=D_{1}P^{\delta}</script><p>and</p><script type="math/tex; mode=display">G_{2}(P)=C_{2}P^{-\gamma}+P/(\rho-v)-W/\rho</script><p>Here we have used two limiting arguments: one as $P$ goes to zero to eliminate the $P^{-\gamma}$ term in $G_{1}(P)$ and the other as $P$ goes to $\infty$ to eliminate the $P^{\delta}$ term in $G_{2}(P)$.</p><p>That still leaves two unkown constants. To determine them, we have the value matching and smooth pasting conditions of (3.12) namely</p><script type="math/tex; mode=display">\begin{aligned}D{1}W^{\delta} & =C{2}W^{-\gamma}+W/(\rho-v)-W/\rho\\\delta D{1}W^{\delta-1} & =-\gamma C{2}W^{-\gamma-1}+1/(\rho-v)\end{aligned}</script><p>These are two simple linear equations for $D_{1}$ and $C_{2}$, which yield</p><script type="math/tex; mode=display">D_{1}=\frac{(\rho+\gamma v)W^{1-\delta}}{\rho(\rho-v)(r+\delta)},\ \ C_{2}=\frac{(\rho-\delta v)W^{1+\gamma}}{\rho(\rho-v)(\gamma+\delta)}</script><p>To find the sign of $C_{2}​$, observe that</p><script type="math/tex; mode=display">\begin{aligned}\psi(\rho/v) & =\rho-v(\rho/v)-\frac{1}{2}\sigma^{2}(\rho/v)(\rho/v-1)\\ & =-\frac{1}{2}\sigma^{2}\rho(\rho-v)/v^{2}<0\end{aligned}</script><p>Therefore $\rho/v$ lies to the right of the root $\delta$ of the fundamental quadratic, or $(\rho-\delta v)$ is positive. Then $C_{2}$ is positive. (A similar calculation shows that $D_{1}$ is positive;). Now we can compare $C_{2}(P)$ in (43) with $G_{0}(P)$ in (35). The latter was the expected present value of the firm’s profits when it was forbidden to shut down. We see how the added term in $G_{2}(P)$ reflects the added benefit of the ability to suspend operations. The benefit is positive even when $P&gt;W$, that is even when the suspension option is not currently being used, becaue there is a positive probability that it will be invoked in the future. But the added value goes to $0$ as $P$ goes to $\infty$, because the nshutdown becomes a remote and unlikely event.</p><blockquote id="fn_1"><sup>1</sup>. Just recall math textbook introduction of the general solution for ordinary differential equation<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> continuous time </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python下微信公共号开发如何从网络url上传素材</title>
      <link href="/2017/01/29/python-upload%20pic%20to%20wechat/"/>
      <url>/2017/01/29/python-upload%20pic%20to%20wechat/</url>
      <content type="html"><![CDATA[<p>微信上传图片的接口定义非常不友好，一般情况只能从local上传图片。当我们想通过云端存储介质上传或者url链接上传时，很难有有效的方法来处理。网上寥寥无几提出了一些利用php语言修改文件参数什么的来上传。但对于python来说，一直没有有效的办法。这里我找到一种极为简单方便的方法来上传文件</p><a id="more"></a><p>为了实现自己微信公众号自动回复图片消息，我被微信蛋疼无比的素材接口折磨疯掉了。但老天眷顾，一次偶然的机会我发现了可以利用request package 极为简单的实现上传功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">access_token=&quot;your access_token&quot;</span><br><span class="line">cc = &quot;f(x)+1&quot;  # the string </span><br><span class="line">pp=requests.get(&quot;http://latex.codecogs.com/png.latex?\dpi&#123;300&#125; \huge %s&quot; % cc).content  # get the online png data (binary data)</span><br><span class="line">files = &#123;&apos;media&apos;: (&apos;temp2.png&apos;,pp)&#125; </span><br><span class="line"># the first item &quot;temp2.png&quot; is the file name, the second one is the file data</span><br><span class="line">upload_url=&quot;https://api.weixin.qq.com/cgi-bin/media/upload?access_token=&quot;+access_token+&quot;&amp;type=image&quot; # set your access_token</span><br><span class="line">r =requests.post(upload_url, files=files) # upload </span><br><span class="line">media_id=json.loads(r.content)[&apos;media_id&apos;] # if it is success, you get media id</span><br></pre></td></tr></table></figure></p><p>当然这里可以将<br><code>iles = {&#39;media&#39;: (&#39;temp2.png&#39;,pp)}</code><br>pp 换成 新浪sae storage 中的 get_object(“filename”) 将storage 存储的图片上传到微信上</p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Academic Assistance From Apple Device</title>
      <link href="/2017/01/19/academic-assistant-from-Apple/"/>
      <url>/2017/01/19/academic-assistant-from-Apple/</url>
      <content type="html"><![CDATA[<p>这篇文章主要介绍和记载如何更好利用各种电脑、电子设备以及软件、应用等帮助更好的工作、学习和研究<br><a id="more"></a></p><h2 id="ipad-iphone-照片互传功能"><a href="#ipad-iphone-照片互传功能" class="headerlink" title="ipad iphone 照片互传功能"></a>ipad iphone 照片互传功能</h2><p>开始我并不知道apple设备存在着icloud share 可以把照片在各个设备共享互传。现在发现了这一功能，并且大概摸清楚了怎么个情况。我发现可以利用这个功能来进行高效率的娱乐分享，学习以及工作。<br>苹果设备上的照片、相册存在如下几个默认文件夹：<br>Camera Roll<br>My Photo Stream<br>Favorite<br>Selfies<br>Screenshots<br>Recently Deleted<br>你自己定义的</p><p>从名字中可以大致判断出后面各个文件夹的功能。这里介绍第一个和第二个文件夹。第一个Camera Roll 存储了在本地设备上所有的拍照照片和截图啥的，但凡你在本设备上的照片截图下载图片啥的都在这个文件夹内。如果这个文件夹的照片被删掉了，那么除了My Photo Stream 中的照片，所有的文件夹都会受到影响。比如照片A在我自己定义的temp中，我从Camera Roll中删掉A 那么temp中也没有A了。</p><p>在有wifi情况下，各个apple设备会互传最新拍摄的照片，并且储存在My Photo Stream 下。My Photo Stream 独立于Camera Roll 。 删掉My Photo Stream 不会影响Camera Roll 中的照片，反之亦然。</p><p>而若想把My Photo Stream 再转存到本地，select照片后 点向上的方框那个东东，选择save image 即可。 </p><p>因此，我可以通过ipad 画图，然后保存在相册中，通过My Photo Stream 同步啥的同步到其他设备上，假如我买了mac 那么可以打开icould phoe share 功能 把照片都同步起来。 旧的照片给备份好。</p><h2 id="画图的同步"><a href="#画图的同步" class="headerlink" title="画图的同步"></a>画图的同步</h2><p>一般来说，我做笔记需要画图啥的，用电脑画图太蛋疼了，可以利用ipad 画图软件（找一个好点的）来画图。然后通过dropbox 还是啥的同步到电脑上作为图片插入lyx或者其他书写软件中！</p>]]></content>
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to Turn Latex Formula to Word</title>
      <link href="/2017/01/16/how%20to%20turn%20latex%20formula%20to%20word/"/>
      <url>/2017/01/16/how%20to%20turn%20latex%20formula%20to%20word/</url>
      <content type="html"><![CDATA[<p>This article introduce a little technic to assist research work.</p><a id="more"></a><p>sometimes it is really frustrated to use word type math formula. by the converience and beautiful display of formula, latex is usually our first choice to write formula. But we usually encounter the case that we need to translate the formula from latex file into word document. Here I introduce a technic to help us save time and translate the formula smoothly from latex to word.</p><p>First of all, we need to download the <strong>MathType</strong> software, (6.00 later). Then open the software and find the options for copy and paste.<br><img src="/pic/copy_option.png" alt="copy option"></p><p>And then, click that option find Math_format of MathML 2.0 (namespace attr).<br><img src="/pic/math_format.png" alt="math_format"></p><p>Then, we can just open our latex file or lyx file, to copy the formula into the MathType, and then copy it again into the Word. </p><p>When copy into the word, we do not need to insert a new math formula area. <strong>Just Copy Directly</strong> is fine!</p><p><img src="/pic/word_sample.png" alt="word_sample"></p>]]></content>
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django Learning -1</title>
      <link href="/2016/12/25/django-learning-1/"/>
      <url>/2016/12/25/django-learning-1/</url>
      <content type="html"><![CDATA[<p>These series of article record my learning process of Django Web Development</p><a id="more"></a><h1 id="Introduction-to-Django"><a href="#Introduction-to-Django" class="headerlink" title="Introduction to Django"></a>Introduction to Django</h1><p>Django loosely follows a model-viewcontroller design pattern,which greatly helps in building clean and maintainable web applications</p><h2 id="MVC-pattern-in-Web-Development"><a href="#MVC-pattern-in-Web-Development" class="headerlink" title="MVC pattern in Web Development"></a>MVC pattern in Web Development</h2><p>A few years ago, the <strong>model-view-controller</strong> pattern came for web-based applications was introduced. This software engineering pattern separates data (model), user interface (view), and data handling logic (controller), so that one can be changed without affecting the others. </p><p><img src="/pic/django-1mvc.png" alt="mvc"></p><h2 id="advantages-of-Django"><a href="#advantages-of-Django" class="headerlink" title="advantages of Django"></a>advantages of Django</h2><p>The standard features expected of a web framework are all available in Django, which include:</p><ul><li>supporting MVC </li><li>A template and text filtering engine with simple but extensible syntax.</li><li>A form generation and validation API.</li><li>An extensible authentication system.</li><li>A caching system for speeding up the performance of applications.</li><li>A feed framework for generating RSS feeds.</li></ul><p>Apart from those above features, Django also have the following advantages:</p><p><strong>Tight Integration between Components</strong> </p><p>First of all, Django provides a set of tightly integrated components; all of these components have been developed by the Django team themselves. Django was originally developed as an in-house framework for managing a series of news-oriented websites. Later its code was released on the Internet and the Django team continued its development using the Open Source model. Because of its roots, Django’s components were designed for integration, reusability and speed from the start.</p><p><strong>Object-Relational Mapper</strong></p><p>Django’s database component, the Object-Relational Mapper (ORM), provides a bridge between the data model and the database engine. It supports a large set of database systems, and switching from one engine to another is a matter of changing a configuration file. This gives the developer great flexibility if a decision is made to change from one database engine to another.</p><p><strong>Clean URL Design</strong></p><p>The URL system in Django is very flexible and powerful; it lets you define patterns for the URLs in your application, and define Python functions to handle each pattern. This enables developers to create URLs that are both user and search engine friendly.</p><p><strong>Automatic Administration Interface</strong> </p><p>Django comes with an administration interface that is ready to be used. This interface makes the management of your application’s data a breeze. It is also highly flexible and customizable.</p><p><strong>Advanced Development Environment</strong></p><p>In addition, Django provides a very nice development environment. It comes with a lightweight web server for development and testing. When the debugging mode is enabled, Django provides very thorough and detailed error messages with a lot of debugging information. All of this makes isolating and fixing bugs very easy.</p><p><strong>Multi-Lingual Support</strong></p><p>Django supports multi-lingual websites through its built-in internationalization system. This can be very valuable for those working on websites with more than one language. The system makes translating the interface a very simple task</p><h1 id="start-a-new-Django-Project"><a href="#start-a-new-Django-Project" class="headerlink" title="start a new Django Project"></a>start a new Django Project</h1><p>open a terminal (or command prompt for Windows users), type the following command, and hit enter:<br><code>django-admin.py startproject new_project</code></p><p>This command will make a folder named django_bookmarksin the current directory, and create the initial directory structure inside it. Let’s see what kinds of files are created:</p><pre><code>new_project/    __init__.py    manage.py    setting.py    urls.py</code></pre><p>The explanation of the four main files are :</p><ul><li><p><strong><strong>init</strong>.py</strong> Django projects are Python packages, and this file is required to tell<br>Python that the folder is to be treated as a package. A package in Python’s terminology is a collection of modules, and they are used to group similar files together and prevent naming conflicts.</p></li><li><p><strong>manage.py</strong> This is another utility script used to manage your project. You can think of it as your project’s version of django-admin.py. Actually, both django-admin.pyand manage.pyshare the same back-end code. manage.py is used to control the demand of Django.</p></li><li><p><strong>settings.py</strong> This is the main configuration file for your Django project. In this file you can specify a variety of options, including the database settings, site languages, which Django features are to be enabled, and so on. Various sections of this file will be explained as we build our application during the next chapters, but in this chapter, we will only see how to enter the database settings. </p></li><li><p><strong>url.py</strong> This is another configuration file. You can think of it as a mapping between URLs and Python functions that handle them. This file is one of Django’s powerful features, and we will see how to utilize it in the next chapter.</p></li></ul><p>When we start writing code for our application, we will create new files inside the project’s folder. So the folder also serves as a container for our code.</p><p>In the following case, I try to use the soical bookmark to illustrate how to ceate a simple webapp from scratch. This include the setup of database(qulite3), setup MVC framework, establishment of Registration, tag Voting,Commenting functions, be familar with the User Interface with Ajax,  the setup of Administration Interface, searching, user network and finally Deploying the web app.  </p><h2 id="setup-the-database"><a href="#setup-the-database" class="headerlink" title="setup the database"></a>setup the database</h2><p>open the <strong>settings.py</strong> file, we can see that the following information for the setup of database:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="keyword">True</span></span><br><span class="line">TEMPLATE_DEBUG = DEBUG</span><br><span class="line"></span><br><span class="line">ADMINS = (</span><br><span class="line">    <span class="comment"># ('Your Name', 'your_email@example.com'),</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">MANAGERS = ADMINS</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.'</span>, <span class="comment"># Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">''</span>,                      <span class="comment"># Or path to database file if using sqlite3.</span></span><br><span class="line">        <span class="comment"># The following settings are not used with sqlite3:</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>,                      <span class="comment"># Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,                      <span class="comment"># Set to empty string for default.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we use the sqlite3 as the default database to implement the app. So it is simple to just setup the “ENGINE” and “NAME” :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">DEBUG = <span class="keyword">True</span></span><br><span class="line">TEMPLATE_DEBUG = DEBUG</span><br><span class="line"></span><br><span class="line">MANAGERS = ADMINS</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>, <span class="comment"># Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'book_markdb'</span>,                      <span class="comment"># Or path to database file if using sqlite3.</span></span><br><span class="line">        <span class="comment"># The following settings are not used with sqlite3:</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>,                      <span class="comment"># Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,                      <span class="comment"># Set to empty string for default.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To create the database and initialize the tables in the database, we can use the following command:<br><code>$ python manage.py syncdb</code></p><pre><code>Note: there maybe an error **No module named &#39;sqlite3.base&#39;**</code></pre><h2 id="Launching-the-Development-Server"><a href="#Launching-the-Development-Server" class="headerlink" title="Launching the Development Server"></a>Launching the Development Server</h2><h2 id="Launching-the-Development-Server-1"><a href="#Launching-the-Development-Server-1" class="headerlink" title="Launching the Development Server"></a>Launching the Development Server</h2><p>As discussed before, Django comes with a lightweight web server for developing and testing applications. This server is pre-configured to work with Django, and more importantly, it restarts whenever you modify the code.<br>To start the server, run the following command:<br><code>$ python manage.py runserver</code><br>according to the instruction of the server, we can open the browser to see our web app.</p><h2 id="build-the-basic-web-application"><a href="#build-the-basic-web-application" class="headerlink" title="build the basic web application"></a>build the basic web application</h2><p>In this part, I am intended to learn MVC framework and templates. First of all, we need to create our own main page(index) </p><h3 id="URLs-and-Views-Creating-the-Main-Page"><a href="#URLs-and-Views-Creating-the-Main-Page" class="headerlink" title="URLs and Views: Creating the Main Page"></a>URLs and Views: Creating the Main Page</h3><p>To create our own welcome page, we need to define an entry point to our application in the form of a URL (URL), and tell Django to call a particular Python function when a visitor accesses this URL. (VIEW)</p><h4 id="VIEW"><a href="#VIEW" class="headerlink" title="VIEW"></a>VIEW</h4><p>A view in Django terminology is a regular Python function that responds to a page request by generating the corresponding page. To write the main page (any functions of Django), we we first need to create a <strong>Django application</strong> inside our project.</p><p>To create it, issue the following command within our folder: </p><p><code>$ python manage.py startapp bookmarks</code></p><p>After running this command, Django will create a folder named bookmarksinside the project folder with these three files:</p><ul><li><strong><strong>init</strong>.py</strong>: This file tells Python that bookmarksis a Python package. </li><li><strong>views.py</strong>: This file will contain our views.</li><li><strong>models.py</strong>: This file will contain our data models.</li></ul><p>Open the file bookmarks/views.pyin your code editor and enter the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    output = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;&lt;title&gt;%s&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;%s&lt;/h1&gt;&lt;p&gt;%s&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">    '''</span> % (</span><br><span class="line">    <span class="string">'Django Bookmarks'</span>,</span><br><span class="line">    <span class="string">'Welcome to Django Bookmarks'</span>,</span><br><span class="line">    <span class="string">'Where you can store and share bookmarks!'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure><ul><li>We import the class HttpResponsefrom django.http. We need this class in order to generate our response page.</li><li>We define a Python function that takes one parameter named request; this parameter contains user input and other information. For example, request. GET, request.POSTand request.COOKIESare dictionaries that contain get, post and cookie data respectively.</li><li>We build the HTML code of the response page, wrap it within an HttpResponseobject and return it.</li></ul><p><em>relation about request and response</em><br><img src="/pic/django-1request.jpg" alt="request and response"></p><p>httprequest 表示来自某客户端的一个单独的HTTP请求。HttpRequest对象是Django自动创建的。</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>As you may recall from the previous chapter, a file named urls.pywas created when we started our project. This file contains valid URLs for our application, and maps each URL to a view that is a Python function.<br>As you can probably tell, the file contains a table of URLs and their corresponding Python functions (or views). The table is called urlpatterns, and it initially contains example entries that are commented out. Each entry is a Python tuple that consists of a URL and its view.</p><p>The Django use <em>URL</em> to allocate each url address to each view and do different tasks. </p><p>Let’s start by removing the comments and adding an entry for the main page:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> patterns, include, url</span><br><span class="line"><span class="keyword">from</span> bookmarks.views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = patterns(<span class="string">''</span>,</span><br><span class="line">(<span class="string">r'^$'</span>, main_page),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><ul><li>The file imports patterns, include, url from the module django.conf.urls. This module provides the necessary * functions to define URLs.</li><li>We import everything from bookmarks.views. This is necessary to access our views, and connect them to URLs.<br>The patterns function is used to define the URL table. It contains only one mapping for now — from r’^$’to our view main_page.</li></ul><p>the synax in URL expression need some knowledge from regix. For more detail, please see the documentation online at: <a href="http://docs.python.org/lib/module-re.html" target="_blank" rel="noopener">http://docs.python.org/lib/module-re.html</a></p><div class="table-container"><table><thead><tr><th>Symbol / Expression</th><th>Matched String</th></tr></thead><tbody><tr><td>. (Dot)</td><td>Any character.</td></tr><tr><td>^ (Caret)</td><td>Start of string.</td></tr><tr><td>$</td><td>End of string.</td></tr><tr><td>*</td><td>0 or more repetitions.</td></tr><tr><td>+</td><td>1 or more repetitions.</td></tr><tr><td>?</td><td>0 or 1 repetitions.</td></tr><tr><td>A \ B</td><td>means A or B.</td></tr><tr><td>[a-z]</td><td>Any lowercase character.</td></tr><tr><td>\w</td><td>Any alphanumeric character or _.</td></tr><tr><td>\d</td><td>Any digit.</td></tr></tbody></table></div><h3 id="the-Database-and-Models"><a href="#the-Database-and-Models" class="headerlink" title="the Database and Models"></a>the Database and Models</h3><p>If you are used to dealing with the database directly through SQL queries, then you may find Django’s approach to database access a bit different. Loosely speaking, Django abstracts access to database tables through Python classes. To store, manipulate and retrieve objects from the database, the developer uses a Python-based<br>API. In order to do this, SQL knowledge is useful but not required.</p><p>This technique is best explained by example. For our bookmarking application, we need to store three types of data in the database:</p><ul><li>Users (ID, username, password, email)</li><li>Links (ID, URL)</li><li>Bookmarks (ID, title, user_id, link_id)</li></ul><p>Each user will have their own entry in the Users table. This entry stores the username, password and email. Similarly, each link will have a corresponding entry in the links table. We will only store the link’s URL for now.<br>As for the Bookmarks table, you can think of it as the joining table between Users and Links. When a user adds a bookmark, an entry for the bookmark’s URL is added to the links table if it doesn’t already exist, and then a joining entry is added to the Bookmarks table. This entry connects the user with the link, and stores the title that the user entered for their bookmark.</p><p>To use and define the model,  we first need to activate it in our Django project. This is done by<br>editing settings.py, looking for the INSTALLED_APPSvariable, and adding our<br>application name (django_bookmarks.bookmarks) to it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line"><span class="string">'django.contrib.auth'</span>,</span><br><span class="line"><span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line"><span class="string">'django.contrib.sessions'</span>,</span><br><span class="line"><span class="string">'django.contrib.sites'</span>,</span><br><span class="line"><span class="string">'django_bookmarks.bookmarks'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>For all three database:</p><p><strong>Link Data Model</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    url = models.URLField(unique=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>User Data Model</strong></p><p><code>from django.contrib.auth.models import User</code></p><p>use the default user model in django</p><p><strong>Bookmark Data Model</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bookmark</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    user = models.ForeignKey(User)</span><br><span class="line">    link = models.ForeignKey(Link)</span><br></pre></td></tr></table></figure><pre><code>**many to many relation**A bookmark belongs to one user and one link. However, one user may have many bookmarks, and one link may be bookmarked by many users. In database language we say there is a many-to-many relationship between users and links. However, there is no way to actually represent a many-to-many relationship such as this one using a standard database system. In our particular case, we will invent the concept of a bookmark to break up this many-to-many relationship into its constituent one-to-many relationships.The first of these is the one-to-many relationship between the user and their bookmarks. One user can have many bookmarks, but each bookmark is associated with only one user. That is to say, each user can bookmark a particular link once.The second of these is the one-to-many relationship between a link and its bookmarks. One link can have many bookmarks associated with it if multiple users have bookmarked it, but each bookmark is associated with only one link.</code></pre><p>as we set up the Model.py and then, run the following command <strong>manage.py syncdb</strong> in order to create its corresponding table.</p><p>Let’s examine the SQL query generated by Django to see how it automatically<br>handles foreign keys. Again, issue the following command:</p><p><code>$ python manage.py sql bookmarks</code></p><p>And the result is :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">CREATE TABLE &quot;bookmarks_link&quot; (</span><br><span class="line">    &quot;id&quot; integer NOT NULL PRIMARY KEY,</span><br><span class="line">    &quot;url&quot; varchar(200) NOT NULL UNIQUE</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line">CREATE TABLE &quot;bookmarks_bookmark&quot; (</span><br><span class="line">    &quot;id&quot; integer NOT NULL PRIMARY KEY,</span><br><span class="line">    &quot;title&quot; varchar(200) NOT NULL,</span><br><span class="line">    &quot;user_id&quot; integer NOT NULL REFERENCES &quot;auth_user&quot; (&quot;id&quot;),</span><br><span class="line">    &quot;link_id&quot; integer NOT NULL REFERENCES &quot;bookmarks_link&quot; (&quot;id&quot;)</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>Now that the data models are ready, we have the facilities to store and manage our data. Django offers an elegant and straightforward Python API to store Python objects in the database, thus sparing the developer the burden of working with SQL and converting between SQL and Python types and idioms.</p><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><p>The next thing we need concern is the templates. It is a very important part in Django and all web app for python. Because handling the html code directly in python may have many disadvantages: </p><ul><li>Good software engineering practices always emphasize the separation between UI and business logic, because it enhances reusability. However, embedding HTML within Python code clearly violates this rule.</li><li>Editing HTML embedded within Python requires Python knowledge, but this is impractical for many development teams whose web designers do not know Python.</li><li>Handling HTML code within Python code is a tedious and error-prone task. For example, quotation marks in HTML may need to be escaped in Python string literals, and the overall result may be unclean and unreadable code.</li></ul><h4 id="some-synax-for-the-templates"><a href="#some-synax-for-the-templates" class="headerlink" title="some synax for the templates"></a>some synax for the templates</h4><p>Checking whether a variable is empty or not in a template is done using the following syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if variable %&#125;</span><br><span class="line">&lt;p&gt;variable contains data.&lt;/p&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&lt;p&gt;variable is empty&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>This ‘if’ condition works as expected. If the variable contains data, only the first line is printed to the browser. On the other hand, if the variable is indeed empty, only the second line is printed.</p><p>To iterate through a list and print its items, we use the following syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in list %&#125;</span><br><span class="line">&#123;&#123; item &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>Finally, if a variable has attributes, you can access them in a way similar to Python:</p><p><code></code></p><h3 id="Combining-Templates-and-View"><a href="#Combining-Templates-and-View" class="headerlink" title="Combining Templates and View"></a>Combining Templates and View</h3><p>If we want tansfer some variable or character from URL to the web server (eg: into View), how do we do it? For example, an URL of a User page will have such form : <em>user/username</em>，where usernameis the owner of the bookmarks that we want to see.where usernameis the owner of the bookmarks that we want to see.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = patterns(<span class="string">''</span>,</span><br><span class="line">(<span class="string">r'^$'</span>, main_page),</span><br><span class="line">(<span class="string">r'^user/(\w+)/$'</span>, user_page),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>We have surrounded this portion of the regular expression with parentheses; this will cause Django to capture the string that matches this portion, and pass it to the view, as we will see later.</p><p>and we modify the View.py for <strong>user_page</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, Http404</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_page</span><span class="params">(request, username)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">user = User.objects.get(username=username)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">raise</span> Http404(<span class="string">'Requested user not found.'</span>)</span><br><span class="line">bookmarks = user.bookmark_set.all()</span><br><span class="line">template = get_template(<span class="string">'user_page.html'</span>)</span><br><span class="line">variables = Context(&#123;</span><br><span class="line"><span class="string">'username'</span>: username,</span><br><span class="line"><span class="string">'bookmarks'</span>: bookmarks</span><br><span class="line">&#125;)</span><br><span class="line">output = template.render(variables)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure><p>There are several features need to be mentioned here:</p><ul><li>Unlike our first view, user_pagetakes an extra parameter in addition to the familiar request object. Remember that the pattern for this URL contains capturing parentheses? Strings captured by URL patterns are passed as parameters to views. The captured string in this URL is passed as the username parameter. </li><li>We used User.objects.get to obtain the user object whose username is requested. We can use a similar technique to query any table by a unique column. This method throws an exception if there are no records that match the query, or if the matched record is not unique. <strong>The reason we can use User.objects.get is that we directly use default User Model to define our database table</strong></li><li>If the requested username is not available in the database, we generate a 404 “Page Not Found” error by raising an exception of the type Http404. </li><li>To obtain the list of bookmarks for a particular user object, we can conveniently use the <em>bookmark_set</em> <code>bookmarks = user.bookmark_set.all()</code> attribute available in the user object. <strong>Django detects relations between data models and automatically generates such attributes.</strong> There is no need to worry about constructing SQL JOIN queries ourselves to obtain user bookmarks for example. See more detail in stack overflow <a href="http://stackoverflow.com/questions/22338965/user-object-has-no-attribute-bookmark-set" target="_blank" rel="noopener">user-object-has-no-attribute-bookmark-set</a>, And <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/" target="_blank" rel="noopener">Django reference</a> under “Following relationships “backward””</li><li></li></ul><h2 id="User-Registration-and-Management"><a href="#User-Registration-and-Management" class="headerlink" title="User Registration and Management"></a>User Registration and Management</h2><ul><li>Creating a login page.</li><li>Enabling logout functionality.</li><li>Creating a registration form.</li><li>Enabling users to update their account information.</li></ul><p>Django has its own Authentication module. The Django authentication system is available in the django.contrib.<br>authpackage. It is installed by default as part of Django, and projects created with<br>the django-admin.pyutility have it enabled by default.</p><p>Before we start using the authentication system, let’s have a quick look at the features<br>that it provides:</p><ul><li>Users: A comprehensive User data model with fields commonly required by web applications.</li><li>Permissions: Yes/No flags that indicate whether a user may access a certain feature or not.</li><li>Groups: A data model for grouping more than one user together and applying the same set of permissions to them.</li><li>Messages: Provides the functionality for displaying information and error messages to the user.</li></ul><h3 id="Creating-the-Login-Page"><a href="#Creating-the-Login-Page" class="headerlink" title="Creating the Login Page"></a>Creating the Login Page</h3><p>Open the file in your editor and change it so that the URL table looks like the following snippet:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = patterns(&apos;&apos;,</span><br><span class="line">(r&apos;^$&apos;, main_page),</span><br><span class="line">(r&apos;^user/(\w+)/$&apos;, user_page),</span><br><span class="line">(r&apos;^login/$&apos;, &apos;django.contrib.auth.views.login&apos;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The <strong>login</strong> view requires the availability of a template called registration/login.<br>html. It loads this template and passes an object that represents the login form to<br>it. We will learn about form objects in detail when we create a user registration<br>form, but for now, we only need to know that this object is called formand has the<br>following attributes: form.username, form.passwordand form.has_errors. When<br>printed, the first two attributes generate HTML code for the username and password<br>text fields, whereas form.has_errorsis a Boolean attribute that is set to true if<br>logging-in fails after submitting the form.</p><h4 id="Improving-Template-Structure"><a href="#Improving-Template-Structure" class="headerlink" title="Improving Template Structure"></a>Improving Template Structure</h4><p>We see lots of templates have similar structure. Wouldn’t it be great if we could factor out the shared sections into a single file so that, if we want to modify all the pages in future, we need only edit one file?</p><p>Fortunately, the Django template system already provides such a feature-template inheritance. The idea is simple; we create a <strong>base</strong> template that contains the structure shared by all templates in the system. We also declare certain blocksof the base template to be modifiable by <strong>child</strong> templates. Next, we create a template that<br>extendsthe base template and modifies its blocks. The idea is very similar to class inheritance in object-oriented programming.</p><p>the base file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Django Bookmarks | &#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&#123;% block head %&#125;&#123;% endblock %&#125;&lt;/h1&gt;</span><br><span class="line">&#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>The template utilizes a new template tag called block. This tag is used to define sections that are modifiable by child templates. Our base template contains three blocks, one for the title, one for the page heading and one for the body. </p><p>To be continued </p><p>how to apply crob job to do some thing </p>]]></content>
      
      <categories>
          
          <category> develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PhantomJS and Selenium -- Headless Browser Spider</title>
      <link href="/2016/12/19/PhantomJS-and-Selenium-headless-brower-spider/"/>
      <url>/2016/12/19/PhantomJS-and-Selenium-headless-brower-spider/</url>
      <content type="html"><![CDATA[<p>This article introduce how to use PhantomJS and Selenium to do headless Browser Testing and web spider</p><a id="more"></a><p>For the webspider, many times we encounter some annoying websites and found it is hard to crawler the data easily. So we need to simulate browser to do it. Selenium is a very powerful tool to help us crawling data. But Selenium also have some shortcomings, for example in linux and other cloud system, it is not easy to install a browser to do it. Another thing is that usually starting a browser is much less efficient to do the scrapy things. This article is intended to introduce PhantomJS and Selenium , which will help developer to do the browser testing quickly and web spider efficiently.</p><h2 id="intall-the-required-software"><a href="#intall-the-required-software" class="headerlink" title="intall the required software"></a>intall the required software</h2><p>first is to install selenium<br><code>pip intall selenium</code></p><p>for phantomJS, we can use <a href="http://brew.sh/" target="_blank" rel="noopener">brew</a> or use npm (Node.js) to install:<br><code>npm -g install phantomjs-prebuilt</code></p><p>Note my node module is in “C:\Users\username\AppData\Roaming\npm\node_modules”</p><p>Once we are done with this, we can use PhantomJS freely in selenium</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## python 3.5</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.PhantomJS() <span class="comment">## put PhantomJS.exe in the same directory </span></span><br><span class="line">driver.set_window_size(<span class="number">1120</span>, <span class="number">550</span>)</span><br><span class="line">driver.get(<span class="string">"https://realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/"</span>)</span><br><span class="line">temp=driver.find_element_by_xpath(<span class="string">"//h3/following-sibling::p"</span>) <span class="comment">## find the following sibling haha</span></span><br><span class="line">driver.save_screenshot(<span class="string">'screen.png'</span>) <span class="comment"># save a screenshot to disk</span></span><br><span class="line">print(temp.text)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>We can see it is headless browser and give us results directly. (personally speaking, I do not think it is very fast. It seems still spend long time)</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="http://selenium-python.readthedocs.io/" target="_blank" rel="noopener">selenium</a></li><li><a href="http://stackoverflow.com/questions/28046706/how-to-find-element-next-to-another-element" target="_blank" rel="noopener">find nex element</a></li><li><a href="https://realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/" target="_blank" rel="noopener">selenium + PhantomJS</a></li><li><a href="/files/PhantomJS_selenium.py">source code</a> </li></ul>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webspider </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Extract Text From Sanned PDF With Python</title>
      <link href="/2016/12/19/extract-text-from-sanned-pdf/"/>
      <url>/2016/12/19/extract-text-from-sanned-pdf/</url>
      <content type="html"><![CDATA[<p>This article introduces how to setup the denpendicies and environment for using OCR technic to extract data from scanned PDF or image.</p><a id="more"></a><p>extracting normal pdf is easy and convinent, we can just use <a href="https://pypi.python.org/pypi/pdfminer/" target="_blank" rel="noopener">pdfminer</a> and <a href="https://pypi.python.org/pypi/pdfminer.six/20160614" target="_blank" rel="noopener">pdfminer.six</a> (for python2 and python3 respectively) and follow the instruction to get text content. But for those scanned pdf, it is actually the image in essence. To extract the text from it, we need a little bit more complicated setup. In addition, it is easy for linux system but hard for windows system. </p><h2 id="Basic-package-and-software-needed"><a href="#Basic-package-and-software-needed" class="headerlink" title="Basic package and software needed"></a>Basic package and software needed</h2><p>We want to use <a href="https://pypi.python.org/pypi/pyocr" target="_blank" rel="noopener">pyocr</a> to extract what we need. And in order to use if correctly, we need the following important denpendencies</p><ul><li><a href="http://www.pythonware.com/products/pil/" target="_blank" rel="noopener">Python Imaging Library (PIL)</a></li><li><a href="https://pypi.python.org/pypi/Wand" target="_blank" rel="noopener">Wand</a></li><li><a href="https://github.com/tesseract-ocr" target="_blank" rel="noopener">tesseract-ocr</a></li><li><a href="https://ghostscript.com/" target="_blank" rel="noopener">ghostscript</a></li><li><p><a href="https://www.imagemagick.org/script/binary-releases.php" target="_blank" rel="noopener">ImageMagick</a></p><p>Note that PIL could use <strong>conda install pil</strong>.  And also we need to setup the environment and path.<br>First of all, do not change the default name of the folder, you can change the directory. But if you change the directory, you need to change some path setup from <strong>tesseract.py.py</strong> in pyocr package. </p><p>For the system path and environment, you need to add the directory of ghostscript, ImageMagick, tesseract-ocr into system path:</p></li><li><p>create a new name MAGICK_HOME and set ImageMagick,ghostscript as  E:\system\ImageMagick-6.9.7-Q8; E:\system\gs9.20\bin</p></li><li>add them into the <strong>path</strong> E:\system\ImageMagick-6.9.7-Q8; E:\system\gs9.20\bin</li><li>create a new name TESSDATA_PREFIX and set tesseract directory E:\system\Tesseract-OCR</li><li><p>change the <strong>tesseract.py</strong> as </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># CHANGE THIS IF TESSERACT IS NOT IN YOUR PATH, OR IS NAMED DIFFERENTLY</span><br><span class="line">TESSERACT_CMD = os.environ[&quot;TESSDATA_PREFIX&quot;]+ os.sep +&apos;tesseract.exe&apos; if os.name == &apos;nt&apos; else &apos;tesseract&apos;</span><br><span class="line"></span><br><span class="line">TESSDATA_EXTENSION = &quot;.traineddata&quot;</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure></li></ul><p><img src="/pic/pdfocr1.png" alt="environment"></p><p>when you successfully setup, you can open the cmd, and input :<br><code>convert filename.pdf filename.jpg</code><br>to see whether it can operate correctly.</p><h2 id="python-OCR-stript"><a href="#python-OCR-stript" class="headerlink" title="python OCR stript"></a>python OCR stript</h2><p>When all those are done. We are able to write the python script : </p><ul><li>importing the required libraries:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wand.image <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> PI</span><br><span class="line"><span class="keyword">import</span> pyocr</span><br><span class="line"><span class="keyword">import</span> pyocr.builders</span><br><span class="line"><span class="keyword">import</span> io</span><br></pre></td></tr></table></figure><ul><li>get the handle of the OCR library (tesseract) </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tool = pyocr.get_available_tools()[<span class="number">0</span>]</span><br><span class="line">lang = tool.get_available_languages()[<span class="number">0</span>]  <span class="comment"># you need to check what the language is in the list, in my computer it is eng for [0]</span></span><br></pre></td></tr></table></figure><p>If your tesseract does not setup correctly, you will encount null value in this part, please carefully check the environment path setup. </p><ul><li>setup two lists to store the images and final_text</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req_image = []</span><br><span class="line">final_text = []</span><br></pre></td></tr></table></figure><ul><li>open the PDF file using wand and convert it to jpeg </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image_pdf = Image(filename=<span class="string">"path/filename.pdf"</span>, resolution=<span class="number">300</span>)</span><br><span class="line">image_jpeg = image_pdf.convert(<span class="string">'jpeg'</span>)</span><br></pre></td></tr></table></figure><p>If the ghostscript does not setup correctly, this part will raise the error, usually I encounter <em>798</em> : the system could not find the file. Here you need not only check the environment path but also do not change the folder’s name, because I change the folder’s name at the beginning, It tooks me a long time to fix this problem.</p><p>wand has converted all the separate pages in the PDF into separate image blobs. We can loop over them and append them as a blob into the req_image list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> image_jpeg.sequence:</span><br><span class="line">    img_page = Image(image=img)</span><br><span class="line">    req_image.append(img_page.make_blob(<span class="string">'jpeg'</span>))</span><br></pre></td></tr></table></figure><ul><li>run OCR to get the text </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> req_image: </span><br><span class="line">    txt = tool.image_to_string(</span><br><span class="line">        PI.open(io.BytesIO(img)),</span><br><span class="line">        lang=lang,</span><br><span class="line">        builder=pyocr.builders.TextBuilder()</span><br><span class="line">    )</span><br><span class="line">    final_text.append(txt)</span><br></pre></td></tr></table></figure><p>It will take a few minuite to finsih the converting. </p><h2 id="Full-code"><a href="#Full-code" class="headerlink" title="Full code"></a>Full code</h2><p>The Full code is </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">python <span class="number">27</span></span><br><span class="line">required package pyocr, PIL, wand</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wand.image <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> PI</span><br><span class="line"><span class="keyword">import</span> pyocr</span><br><span class="line"><span class="keyword">import</span> pyocr.builders</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">path = <span class="string">"your path directory\demo.pdf"</span></span><br><span class="line">tool = pyocr.get_available_tools()[<span class="number">0</span>]</span><br><span class="line">lang = tool.get_available_languages()[<span class="number">0</span>] // <span class="number">0</span> <span class="keyword">is</span> eng</span><br><span class="line"></span><br><span class="line">req_image = []</span><br><span class="line">final_text = []</span><br><span class="line"></span><br><span class="line">image_pdf = Image(filename=path, resolution=<span class="number">300</span>)</span><br><span class="line">image_jpeg = image_pdf.convert(<span class="string">'jpeg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> image_jpeg.sequence:</span><br><span class="line">    img_page = Image(image=img)</span><br><span class="line">    req_image.append(img_page.make_blob(<span class="string">'jpeg'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> req_image: </span><br><span class="line">    txt = tool.image_to_string(</span><br><span class="line">        PI.open(io.BytesIO(img)),</span><br><span class="line">        lang=lang,</span><br><span class="line">        builder=pyocr.builders.TextBuilder()</span><br><span class="line">    )</span><br><span class="line">    final_text.append(txt)</span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://pythontips.com/2016/02/25/ocr-on-pdf-files-using-python/" target="_blank" rel="noopener">OCR on PDF files using Python</a></li><li><a href="http://stackoverflow.com/questions/26494211/extracting-text-from-a-pdf-file-using-pdfminer-in-python" target="_blank" rel="noopener">extracting normal PDF using pdfminer</a></li></ul>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Data Visualization For GIS Info With Python</title>
      <link href="/2016/07/28/data-visualization-for-GIS-info-with-python/"/>
      <url>/2016/07/28/data-visualization-for-GIS-info-with-python/</url>
      <content type="html"><![CDATA[<p>This post breifly records my learning on how to visualiza the GIS info on the map by python. I attempted different ways to visualize my gis data by python. I was very luck to find two powerful package to deal with data visualization:</p><ul><li>vincent <a href="http://vincent.readthedocs.org/en/latest/" target="_blank" rel="noopener">link</a> </li><li>folium  <a href="https://pypi.python.org/pypi/folium" target="_blank" rel="noopener">link</a></li></ul><p>The two package offers different ways to visualize gis info on the map. And most importantly, it is easy to get started! </p><a id="more"></a><h2 id="what-is-folium"><a href="#what-is-folium" class="headerlink" title="what is folium"></a>what is folium</h2><p>folium is a package aimed at making beautiful maps with Leaflet.js &amp; Python. Just with a few codes, you can generate a beautiful map to visualize your data and help you doing analysis. folium supports python2 and python3. If you install the anaconda IDE environment, you won’t face any trouble to install it. the installation is simple and easy with pip: </p><p><code>pip install folium</code>  </p><h2 id="get-started-to-create-the-first-simple-map"><a href="#get-started-to-create-the-first-simple-map" class="headerlink" title="get started to create the first simple map"></a>get started to create the first simple map</h2><p>with a few code, we can get the traditional map immediately:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> folium</span><br><span class="line">map_osm = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">## output to a html file</span></span><br><span class="line">map_osm.create_map(path=<span class="string">'osm.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="Different-types-of-map"><a href="#Different-types-of-map" class="headerlink" title="Different types of map"></a>Different types of map</h2><p>As far as I know, folium has at least three types of map form (tiles), which are “default”,”Stamen Toner”,”Stamen Terrain”. In the following are the examples: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map_demo1 = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>])</span><br><span class="line">map_demo2 = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>], tiles=<span class="string">'Stamen Toner'</span>,</span><br><span class="line">                    zoom_start=<span class="number">13</span>)</span><br><span class="line">map_demo3 = folium.Map(location=[<span class="number">45.372</span>, <span class="number">-121.6972</span>], tiles=<span class="string">'Stamen Terrain'</span>,</span><br><span class="line">zoom_start=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>custom tiles: </p><pre><code>tiles: str, default &#39;OpenStreetMap&#39;    Map tileset to use. Can choose from this list of built-in tiles:        - &quot;OpenStreetMap&quot;        - &quot;MapQuest Open&quot;        - &quot;MapQuest Open Aerial&quot;        - &quot;Mapbox Bright&quot; (Limited levels of zoom for free tiles)        - &quot;Mapbox Control Room&quot; (Limited levels of zoom for free tiles)        - &quot;Stamen&quot; (Terrain, Toner, and Watercolor)        - &quot;Cloudmade&quot; (Must pass API key)        - &quot;Mapbox&quot; (Must pass API key)        - &quot;CartoDB&quot; (positron and dark_matter)</code></pre><p>Of course, you can use mapbox and Leaflet.js to design and create many other types of map style (tile)<br>Of course, you can use mapbox and Leaflet.js to design and create many other types of map style (tile)<br>For <a href="https://www.mapbox.com/studio/" target="_blank" rel="noopener">Mapbox</a>, it is very simple : all you need to do is set the <strong>tiles</strong> as ‘Mapbox’, and include <strong>API_key</strong>.(I don not know it quite well) </p><blockquote><p>Mapbox is an open source mapping platform for custom designed maps. it is very easy to use and can help designers and gis professionars to create beautiful maps instantly</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">custom = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>], tiles=<span class="string">'Mapbox'</span>,</span><br><span class="line">                    API_key=<span class="string">'wrobstory.map-12345678'</span>)</span><br><span class="line"></span><br><span class="line">tileset = <span class="string">r'https://api.mapbox.com/v4/xiaofeima.p37fkfk1/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?access_token=pk.eyJ1IjoieGlhb2ZlaW1hIiwiYSI6ImNpa2I2dTRudDBtNnV2dWtwbXh6Njg2NmcifQ.7E2eCTrl2aY5dCtTJJwXtw'</span></span><br><span class="line"></span><br><span class="line">custom2 = folium.Map(location=[<span class="number">45.372</span>, <span class="number">-121.6972</span>], zoom_start=<span class="number">2</span>,</span><br><span class="line">                 tiles=tileset, attr=<span class="string">'My Data Attribution'</span>)</span><br></pre></td></tr></table></figure><p>and with the above style, we get the following map style</p><p><img src="/pic/mgx1.png" alt="map"></p><h2 id="markers-and-popups"><a href="#markers-and-popups" class="headerlink" title="markers and popups"></a>markers and popups</h2><p>When we create the map style, the next thing we want to do is to mark the information on the map, folium offers us multiple methods to make marker icon and popups: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">map_demo2 = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>], tiles=<span class="string">'Stamen Toner'</span>,</span><br><span class="line">                   zoom_start=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># custom simple </span></span><br><span class="line">map_demo2.simple_marker(location=[<span class="number">45.5244</span>, <span class="number">-122.6699</span>], popup=<span class="string">'The Waterfront'</span>)</span><br><span class="line"><span class="comment"># draw a circle</span></span><br><span class="line">map_demo2.circle_marker(location=[<span class="number">45.5215</span>, <span class="number">-122.6261</span>], radius=<span class="number">500</span>,</span><br><span class="line">                    popup=<span class="string">'Laurelhurst Park'</span>, line_color=<span class="string">'#3186cc'</span>,</span><br><span class="line">                    fill_color=<span class="string">'#3186cc'</span>)</span><br><span class="line"><span class="comment">#  Polygon marker</span></span><br><span class="line"></span><br><span class="line">map_demo4 = folium.Map(location=[<span class="number">45.5236</span>, <span class="number">-122.6750</span>], zoom_start=<span class="number">13</span>)</span><br><span class="line">map_demo4.polygon_marker(location=[<span class="number">45.5012</span>, <span class="number">-122.6655</span>], popup=<span class="string">'Ross Island Bridge'</span>,</span><br><span class="line">                     fill_color=<span class="string">'#132b5e'</span>, num_sides=<span class="number">3</span>, radius=<span class="number">10</span>)</span><br><span class="line">map_demo4.polygon_marker(location=[<span class="number">45.5132</span>, <span class="number">-122.6708</span>], popup=<span class="string">'Hawthorne Bridge'</span>,</span><br><span class="line">                     fill_color=<span class="string">'#45647d'</span>, num_sides=<span class="number">4</span>, radius=<span class="number">10</span>)</span><br><span class="line">map_demo4.polygon_marker(location=[<span class="number">45.5275</span>, <span class="number">-122.6692</span>], popup=<span class="string">'Steel Bridge'</span>,</span><br><span class="line">                     fill_color=<span class="string">'#769d96'</span>, num_sides=<span class="number">6</span>, radius=<span class="number">10</span>)</span><br><span class="line">map_demo4.polygon_marker(location=[<span class="number">45.5318</span>, <span class="number">-122.6745</span>], popup=<span class="string">'Broadway Bridge'</span>,</span><br><span class="line">                     fill_color=<span class="string">'#769d96'</span>, num_sides=<span class="number">8</span>, radius=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lively icon </span></span><br><span class="line">map_demo1.simple_marker([<span class="number">45.3288</span>, <span class="number">-121.6625</span>], popup=<span class="string">'Mt. Hood Meadows'</span>,marker_icon=<span class="string">'cloud'</span>)</span><br><span class="line">map_demo1.simple_marker([<span class="number">45.3311</span>, <span class="number">-121.7113</span>], popup=<span class="string">'Timberline Lodge'</span>,marker_color=<span class="string">'green'</span>)</span><br><span class="line">map_demo1.simple_marker([<span class="number">45.3300</span>, <span class="number">-121.6823</span>], popup=<span class="string">'Some Other Location'</span>,marker_color=<span class="string">'red'</span>,marker_icon=<span class="string">'info-sign'</span>)</span><br></pre></td></tr></table></figure><p>Moreover, folium support the Vincent/Vega markers, which means we can put data and graphs into the marker </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> vincent, json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">scatter_points = &#123;</span><br><span class="line">    <span class="string">'x'</span> : np.random.uniform(size=(<span class="number">100</span>,)),</span><br><span class="line">    <span class="string">'y'</span> : np.random.uniform(size=(<span class="number">100</span>,)),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's create the vincent chart.</span></span><br><span class="line">scatter_chart = vincent.Scatter(scatter_points,</span><br><span class="line">                                iter_idx=<span class="string">'x'</span>,</span><br><span class="line">                                width=<span class="number">600</span>,</span><br><span class="line">                                height=<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's convert it to JSON.</span></span><br><span class="line">scatter_json = scatter_chart.to_json()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's convert it to dict.</span></span><br><span class="line">scatter_dict = json.loads(scatter_json)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map_vin = folium.Map([<span class="number">43</span>,<span class="number">-100</span>], zoom_start=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's create a Vega popup based on scatter_chart.</span></span><br><span class="line">popup = folium.Popup(max_width=<span class="number">800</span>)</span><br><span class="line">folium.Vega(scatter_chart, height=<span class="number">350</span>, width=<span class="number">650</span>).add_to(popup)</span><br><span class="line">folium.Marker([<span class="number">30</span>,<span class="number">-120</span>], popup=popup).add_to(map_vin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's create a Vega popup based on scatter_json.</span></span><br><span class="line">popup = folium.Popup(max_width=<span class="number">800</span>)</span><br><span class="line">folium.Vega(scatter_json, height=<span class="number">350</span>, width=<span class="number">650</span>).add_to(popup)</span><br><span class="line">folium.Marker([<span class="number">30</span>,<span class="number">-100</span>], popup=popup).add_to(map_vin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's create a Vega popup based on scatter_dict.</span></span><br><span class="line">popup = folium.Popup(max_width=<span class="number">800</span>)</span><br><span class="line">folium.Vega(scatter_dict, height=<span class="number">350</span>, width=<span class="number">650</span>).add_to(popup)    </span><br><span class="line">folium.Marker([<span class="number">30</span>,<span class="number">-80</span>], popup=popup).add_to(map_vin)</span><br><span class="line"></span><br><span class="line">map_vin</span><br></pre></td></tr></table></figure><p>In more general case, we can put html in to the popup so that we can represet anything we want :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">m = folium.Map([<span class="number">43</span>,<span class="number">-100</span>], zoom_start=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">html=<span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;h1&gt; This is a big popup&lt;/h1&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    With a few lines of code...</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">    &lt;code&gt;</span></span><br><span class="line"><span class="string">        from numpy import *&lt;br&gt;</span></span><br><span class="line"><span class="string">        exp(-2*pi)</span></span><br><span class="line"><span class="string">    &lt;/code&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">iframe = folium.element.IFrame(html=html, width=<span class="number">500</span>, height=<span class="number">300</span>)</span><br><span class="line">popup = folium.Popup(iframe, max_width=<span class="number">2650</span>)</span><br><span class="line"></span><br><span class="line">folium.Marker([<span class="number">30</span>,<span class="number">-100</span>], popup=popup).add_to(m)</span><br><span class="line"></span><br><span class="line">m</span><br></pre></td></tr></table></figure><p>the folium also supports the Choropleth Maps. But we need to offer the Geojson files to draw the map. The folium command is simple, but how to get Geojson is difficult. we need to find GIS info and switch it into geojson format. Fortunately,We find ways to get geoJson format file: <a href="http://stackoverflow.com/questions/17267248/how-where-do-i-get-geojson-data-for-states-provinces-and-administrative-region" target="_blank" rel="noopener">source</a></p><ul><li>Install the Quantum GIS framework <a href="http://www.qgis.org/e/qgis" target="_blank" rel="noopener">http://www.qgis.org/e/qgis</a>.<ul><li>If you are on Mac OS X, you can use this version <a href="http://www.kyngchaos.com/software" target="_blank" rel="noopener">http://www.kyngchaos.com/software</a> </li><li>This will give you the ogr2ogr utility used for converting shapefiles to geoJSON</li></ul></li><li>Download the shapefiles for your country from here <a href="http://www.gadm.org/country" target="_blank" rel="noopener">http://www.gadm.org/country</a> and unzip<ul><li>For Canada, and possibly other countries, the shapefile with suffix 0 is for the country boundary and the suffix 1 is for the internal regions. Not sure if this naming is consistent across countries.</li></ul></li><li>Upload the region level shapefile to MapShaper <a href="http://mapshaper.com/test/MapShaper.swf" target="_blank" rel="noopener">http://mapshaper.com/test/MapShaper.swf</a> or <a href="http://www.mapshaper.org" target="_blank" rel="noopener">http://www.mapshaper.org</a>. <ul><li>You can skip this step if you don’t care to optimize the size of your resulting geoJSON</li><li>Set the ‘simplification level’ slider in MapShaper to the desired level and export the simplified shapefile as ‘Shapefile - Polygons’</li></ul></li><li>Download .shp and .shx file to the local directory where you unzipped the original shapefiiles, replace the original files with the simplified ones.</li><li>Navigate to the local directory and run the command below, replacing <shapefile> with the actual name of the shapefile you want to convert.<br><code>ogr2ogr -f geoJSON regions.json &lt;shapefile&gt;.shp</code></shapefile></li><li>You should now have the regions for your country in geoJSON format. Check to make sure there are paths defined in regions.json and that property fields were maintained (ex. region name).</li></ul><p>Then we should have the Choropleth maps:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">china_geo=<span class="string">r'geojson/chn_adm1_2.json'</span></span><br><span class="line"></span><br><span class="line">csv_data = <span class="string">r'data/CN-gdp-2014.csv'</span></span><br><span class="line">state_data = pd.read_csv(csv_data,encoding=<span class="string">'gbk'</span>)</span><br><span class="line">map_ch = folium.Map(location=[<span class="number">50</span>, <span class="number">120</span>], zoom_start=<span class="number">3</span>)</span><br><span class="line">map_ch.geo_json(geo_path=china_geo, data=state_data,</span><br><span class="line">             columns=[<span class="string">'province'</span>, <span class="string">'GDP-2014'</span>],</span><br><span class="line">             <span class="comment">#threshold_scale=[6, 7, 8, 9, 10,11,12,13],</span></span><br><span class="line">             key_on=<span class="string">'feature.properties.HASC_1'</span>,</span><br><span class="line">             fill_color=<span class="string">'BuPu'</span>, fill_opacity=<span class="number">0.7</span>, line_opacity=<span class="number">0.5</span>,</span><br><span class="line">             legend_name=<span class="string">'GDP Rate (%)'</span>,reset=<span class="keyword">True</span>)</span><br><span class="line">map_ch.create_map(<span class="string">'cn_states.html'</span>)</span><br></pre></td></tr></table></figure><p>download the <a href="/files/folium_Choropleth.rar">source code</a></p><p><a href="https://github.com/amueller/word_cloud" target="_blank" rel="noopener">word_cloud</a><br><a href="https://github.com/aaren/notedown" target="_blank" rel="noopener">ipynb to md</a></p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pandas Techniques</title>
      <link href="/2016/05/07/pandas-snippets/"/>
      <url>/2016/05/07/pandas-snippets/</url>
      <content type="html"><![CDATA[<p>Python Pandas Data Analysis </p><a id="more"></a><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>source from <a href="https://gist.github.com/bsweger/e5817488d161f37dcbd2" target="_blank" rel="noopener">pandas snippets</a> </p><p>the following is cited from online sources<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#List unique values in a DataFrame column</span></span><br><span class="line">pd.unique(df.column_name.ravel())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Convert Series datatype to numeric, getting rid of any non-numeric values</span></span><br><span class="line">df[<span class="string">'col'</span>] = df[<span class="string">'col'</span>].astype(str).convert_objects(convert_numeric=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Grab DataFrame rows where column has certain values</span></span><br><span class="line">valuelist = [<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'value3'</span>]</span><br><span class="line">df = df[df.column.isin(value_list)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Grab DataFrame rows where column doesn't have certain values</span></span><br><span class="line">valuelist = [<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'value3'</span>]</span><br><span class="line">df = df[~df.column.isin(value_list)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Delete column from DataFrame</span></span><br><span class="line"><span class="keyword">del</span> df[<span class="string">'column'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Select from DataFrame using criteria from multiple columns</span></span><br><span class="line">newdf = df[(df[<span class="string">'column_one'</span>]&gt;<span class="number">2004</span>) &amp; (df[<span class="string">'column_two'</span>]==<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Rename several DataFrame columns</span></span><br><span class="line">df = df.rename(columns = &#123;</span><br><span class="line">    <span class="string">'col1 old name'</span>:<span class="string">'col1 new name'</span>,</span><br><span class="line">    <span class="string">'col2 old name'</span>:<span class="string">'col2 new name'</span>,</span><br><span class="line">    <span class="string">'col3 old name'</span>:<span class="string">'col3 new name'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#lower-case all DataFrame column names</span></span><br><span class="line">df.columns = map(str.lower, df.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment">#even more fancy DataFrame column re-naming</span></span><br><span class="line"><span class="comment">#lower-case all DataFrame column names (for example)</span></span><br><span class="line">df.rename(columns=<span class="keyword">lambda</span> x: x.split(<span class="string">'.'</span>)[<span class="number">-1</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Loop through rows in a DataFrame</span></span><br><span class="line"><span class="comment">#(if you must)</span></span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="keyword">print</span> index, row[<span class="string">'some column'</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#Next few examples show how to work with text data in Pandas.</span></span><br><span class="line"><span class="comment">#Full list of .str functions: http://pandas.pydata.org/pandas-docs/stable/text.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Slice values in a DataFrame column (aka Series)</span></span><br><span class="line">df.column.str[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Lower-case everything in a DataFrame column</span></span><br><span class="line">df.column_name = df.column_name.str.lower()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get length of data in a DataFrame column</span></span><br><span class="line">df.column_name.str.len()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Sort dataframe by multiple columns</span></span><br><span class="line">df = df.sort([<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>],ascending=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#get top n for each group of columns in a sorted dataframe</span></span><br><span class="line"><span class="comment">#(make sure dataframe is sorted first)</span></span><br><span class="line">top5 = df.groupby([<span class="string">'groupingcol1'</span>, <span class="string">'groupingcol2'</span>]).head(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Grab DataFrame rows where specific column is null/notnull</span></span><br><span class="line">newdf = df[df[<span class="string">'column'</span>].isnull()]</span><br><span class="line"></span><br><span class="line"><span class="comment">#select from DataFrame using multiple keys of a hierarchical index</span></span><br><span class="line">df.xs((<span class="string">'index level 1 value'</span>,<span class="string">'index level 2 value'</span>), level=(<span class="string">'level 1'</span>,<span class="string">'level 2'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Change all NaNs to None (useful before</span></span><br><span class="line"><span class="comment">#loading to a db)</span></span><br><span class="line">df = df.where((pd.notnull(df)), <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get quick count of rows in a DataFrame</span></span><br><span class="line">len(df.index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Pivot data (with flexibility about what what</span></span><br><span class="line"><span class="comment">#becomes a column and what stays a row).</span></span><br><span class="line"><span class="comment">#Syntax works on Pandas &gt;= .14</span></span><br><span class="line">pd.pivot_table(</span><br><span class="line">  df,values=<span class="string">'cell_value'</span>,</span><br><span class="line">  index=[<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>], <span class="comment">#these stay as columns</span></span><br><span class="line">  columns=[<span class="string">'col4'</span>]) <span class="comment">#data values in this column become their own column</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#change data type of DataFrame column</span></span><br><span class="line">df.column_name = df.column_name.astype(np.int64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get rid of non-numeric values throughout a DataFrame:</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> refunds.columns.values:</span><br><span class="line">  refunds[col] = refunds[col].replace(<span class="string">'[^0-9]+.-'</span>, <span class="string">''</span>, regex=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Set DataFrame column values based on other column values</span></span><br><span class="line">df[<span class="string">'column_to_change'</span>][(df[<span class="string">'column1'</span>] == some_value) &amp; (df[<span class="string">'column2'</span>] == some_other_value)] = new_value</span><br><span class="line"></span><br><span class="line"><span class="comment">#Clean up missing values in multiple DataFrame columns</span></span><br><span class="line">df = df.fillna(&#123;</span><br><span class="line">    <span class="string">'col1'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col2'</span>: <span class="string">'99.999'</span>,</span><br><span class="line">    <span class="string">'col3'</span>: <span class="string">'999'</span>,</span><br><span class="line">    <span class="string">'col4'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col5'</span>: <span class="string">'missing'</span>,</span><br><span class="line">    <span class="string">'col6'</span>: <span class="string">'99'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Concatenate two DataFrame columns into a new, single column</span></span><br><span class="line"><span class="comment">#(useful when dealing with composite keys, for example)</span></span><br><span class="line">df[<span class="string">'newcol'</span>] = df[<span class="string">'col1'</span>].map(str) + df[<span class="string">'col2'</span>].map(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Doing calculations with DataFrame columns that have missing values</span></span><br><span class="line"><span class="comment">#In example below, swap in 0 for df['col1'] cells that contain null</span></span><br><span class="line">df[<span class="string">'new_col'</span>] = np.where(pd.isnull(df[<span class="string">'col1'</span>]),<span class="number">0</span>,df[<span class="string">'col1'</span>]) + df[<span class="string">'col2'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Split delimited values in a DataFrame column into two new columns</span></span><br><span class="line">df[<span class="string">'new_col1'</span>], df[<span class="string">'new_col2'</span>] = zip(*df[<span class="string">'original_col'</span>].apply(<span class="keyword">lambda</span> x: x.split(<span class="string">': '</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Collapse hierarchical column indexes</span></span><br><span class="line">df.columns = df.columns.get_level_values(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Convert Django queryset to DataFrame</span></span><br><span class="line">qs = DjangoModelName.objects.all()</span><br><span class="line">q = qs.values()</span><br><span class="line">df = pd.DataFrame.from_records(q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a DataFrame from a Python dictionary</span></span><br><span class="line">df = pd.DataFrame(list(a_dictionary.items()), columns = [<span class="string">'column1'</span>, <span class="string">'column2'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># create panel data </span></span><br><span class="line">concated = pd.concat(list_of_frames)</span><br><span class="line">items = [<span class="string">'age'</span>, <span class="string">'weight'</span>, <span class="string">'score'</span>]</span><br><span class="line">pd.Panel(dict(zip(items, [concated.pivot(index=<span class="string">'date'</span>, columns=<span class="string">'id'</span>, values=i) <span class="keyword">for</span> i <span class="keyword">in</span> items])))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Marginal Treatment Effects Introduction</title>
      <link href="/2016/04/27/MTE%20intro/"/>
      <url>/2016/04/27/MTE%20intro/</url>
      <content type="html"><![CDATA[<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>traditional different evaluation parameters are an average over parts of the distribution of impacts:</p><ul><li>The ATE averages over the entire distribution</li><li>The ATT averages over the distribution of impacts for those who are somehow allocated into treatment</li><li>LATE averages over the distribution of impacts for those who switch into treatment as a result of a reform or more precisely, as a result of a change of the value of some instrument a§ecting decisions to participate.</li></ul><a id="more"></a><p>shortcomings:</p><ol><li>represent an aggregation over di§erent margins</li><li>not comparable and they are di¢ cult to interpret from the perspective of general</li></ol><p>Heckman and Vytlacil (2005) defined the MARGINAL TREATMENT EFFECT MTE unifying those treatment parameters</p><p>MTE is the  effect of a treatment on the marginal individual entering treatment, focusing on the specified individual who is indifferent between entering the policy(treatment) or not. (in average measure)</p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Consider a discrete treatment T. The rule allocating to treatment may be written as:</p><script type="math/tex; mode=display">T = 1({v_i} \le {Z_i}^{'}\gamma )</script><p>For a particular value of ${Z_i}^{‘}\gamma$ the marginal individual is the one with </p><script type="math/tex; mode=display">{v_i} = {Z_i}^{'}\gamma</script><p>Now consider the e§ect of treatment for the ith individual (of course the ith individual can not have both $Y_i^1$ and $Y_i^0$ the discussion see the next subsection)</p><script type="math/tex; mode=display">\beta_{i}=Y_{i}^{1}-Y_{i}^{0}</script><p>Then the marginal treatment effect can be defined by :</p><script type="math/tex; mode=display">MTE(Z_{i}^{'}\gamma)=E(\beta_{i}|v_{i}=Z_{i}^{'}\gamma)</script><p>MTE has a very important property that all treatment parameters, such as ATE, ATT, AUT,  can be written as weighted averages of MTE</p><h1 id="Heckman-defination"><a href="#Heckman-defination" class="headerlink" title="Heckman defination"></a>Heckman defination</h1><p>It is easy to understand if we can start from basic notation. For policy analysis, The generalized Roy Model is a basic choice-theoretic framework. Take the attending college for example. </p><ul><li>Let $Y_1$ be the potential return (log wage) if the individual were in the treatment group( were to attend college)</li><li>Let $Y_0$ be the potential return (log wage) if the individual were in the control group( were not to attend college)</li></ul><p>We have potential outcomes as : </p><script type="math/tex; mode=display">\begin{matrix}Y_{1} &=  & \mu_{1}(X)+U_{1} \\ Y_{0} &=  & \mu_{0}(X)+U_{0} \\\end{matrix}</script><p>where $\mu_{1}(X)=E(Y_{1}|X=x)$ and $\mu_{0}(X)=E(Y_{0}|X=x)$. The policy effect (return to schooling ) is $Y_{1} -Y_{0} = \beta = \mu_{1}(X)+U_{1} - \mu_{0}(X)+U_{0}$. Then <strong> average treatment effect </strong> conditional on $X=x$ is </p><script type="math/tex; mode=display">\bar{\beta}=E(\beta|X=x)=\mu_{1}(x)-\mu_{0}(x)</script><p>and  average effect of treatment (those who choose to attend college conditional on $X=x$) is </p><script type="math/tex; mode=display">E(\beta|X=x,\ S=1)=\bar{\beta}+E(U_{1}-U_{0}|X=x,\ S=1)</script><p>Next, we utlize the latent variable discrete choice model to represents the individual’s decision (such as attending school)</p><h3 id="Causal-Inference-Problem"><a href="#Causal-Inference-Problem" class="headerlink" title="Causal Inference Problem"></a>Causal Inference Problem</h3><p>Suppose a policy $D$ (which is dichotomous in simplicity) affect the population group $U$. </p><ul><li>$D=1$ if a memebr is treated </li><li>$D=0$ if a member is not treated</li></ul><p>for ith member in U, we denote $Y_{i}^{1}$ as ith member potential outcome if treated ($d_i=1$). similiarly, $Y_{i}^{0}$ as ith member potential outcome if untreated ($d_i=0$) </p><script type="math/tex; mode=display">\beta_{i}=Y_{i}^{1}-Y_{i}^{0}</script><p>$\beta_{i}$ represent hypothetical treatment effect for ith member. But the problem is that for a given individual i, we can only observe either $Y_{i}^{1}$ ($d_i=1$) or $Y_{i}^{0}$ ($d_i=0$), but not both. </p><p>如果个体i参加了项目($d_i=1$)，观察到$Y_{i}^{1}$，但看不到这个人的$Y_{i}^{0}$。除非可以把这个人送回“过去”，改写历史不让他参加项目($d_i=0$)，记录其$Y_{i}^{0}$。简单来说个体只能处于一种状态</p><script type="math/tex; mode=display">Y_{i}=(1-d_i) Y_{i}^{0}+d_i Y_{i}^{1}= Y_{i}^{0}+ (  Y_{i}^{1}-Y_{i}^{0})d_i</script><p>regarding the fundamental problem, how can we estimate treatment effect? Holland describes two possible solutions: the “scientific solution” and the “statistical solution.” </p><ul><li>“scientific solution” : capitalizes on homogeneity in assuming that all members in U are the same, in either the treated state or the control state. So to estimate the effect we can just use two members (one in treatment group and the other one in untreatment group). this solution has little practical values</li><li><p>“statistical solution” : compute quantities of interest that reveal treatment effects only at the group level, which induce the ATE ATT ATUT method. </p></li><li><p>$ATE=E(Y_{i}^{1}-Y_{i}^{0})$  </p></li><li>$ATT=E(Y_{i}^{1}-Y_{i}^{0} | D=1)$  </li><li>$ATUT=E(Y_{i}^{1}-Y_{i}^{0} | D=0)$ </li></ul><h2 id="Building-MTE-with-more-detailed-justification"><a href="#Building-MTE-with-more-detailed-justification" class="headerlink" title="Building MTE with more detailed justification"></a>Building MTE with more detailed justification</h2><p>Here I borrow the case from <a href="http://www.eief.it/files/2009/12/lecture5.pdf" target="_blank" rel="noopener">Costas Meghir</a>  notes to illusatrate how to build MTE</p><h2 id="Reference-and-Resources"><a href="#Reference-and-Resources" class="headerlink" title="Reference and Resources"></a>Reference and Resources</h2><p><a href="http://www.eief.it/files/2009/12/lecture5.pdf" target="_blank" rel="noopener">Costas Meghir lecture5</a><br><a href="http://jenni.uchicago.edu/underiv/documentation_2006_03_20.pdf" target="_blank" rel="noopener">MTE estimation guide</a></p>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> econometrics </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python For @static Method</title>
      <link href="/2016/04/11/python-function-decorated/"/>
      <url>/2016/04/11/python-function-decorated/</url>
      <content type="html"><![CDATA[<p><strong>What is the difference between a function decorated with @staticmethod and one decorated with @classmethod?</strong></p><p>the answer is copyed from <a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python" target="_blank" rel="noopener">stack overflow</a></p><a id="more"></a><p>Maybe a bit of example code will help: Notice the difference in the call signatures of foo, class_foo and static_foo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class A(object):</span><br><span class="line">    def foo(self,x):</span><br><span class="line">        print &quot;executing foo(%s,%s)&quot;%(self,x)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def class_foo(cls,x):</span><br><span class="line">        print &quot;executing class_foo(%s,%s)&quot;%(cls,x)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def static_foo(x):</span><br><span class="line">        print &quot;executing static_foo(%s)&quot;%x    </span><br><span class="line"></span><br><span class="line">a=A()</span><br></pre></td></tr></table></figure></p><p>Below is the usual way an object instance calls a method. The object instance, a, is implicitly passed as the first argument.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.foo(1)</span><br><span class="line"># executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)</span><br></pre></td></tr></table></figure></p><p>With classmethods, the class of the object instance is implicitly passed as the first argument instead of self.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.class_foo(1)</span><br><span class="line"># executing class_foo(&lt;class &apos;__main__.A&apos;&gt;,1)</span><br></pre></td></tr></table></figure></p><p>You can also call class_foo using the class. In fact, if you define something to be a classmethod, it is probably because you intend to call it from the class rather than from a class instance. A.foo(1) would have raised a TypeError, but A.class_foo(1) works just fine:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.class_foo(1)</span><br><span class="line"># executing class_foo(&lt;class &apos;__main__.A&apos;&gt;,1)</span><br></pre></td></tr></table></figure><p><strong>@proerty 用法：</strong></p><p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = Student()</span><br><span class="line">s.score = 9999</span><br></pre></td></tr></table></figure></p><p>这显然不合逻辑。为了限制score的范围，可以通过一个set_score()方法来设置成绩，再通过一个get_score()来获取成绩，这样，在set_score()方法里，就可以检查参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def get_score(self):</span><br><span class="line">        return self._score</span><br><span class="line"></span><br><span class="line">    def set_score(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            raise ValueError(&apos;score must be an integer!&apos;)</span><br><span class="line">        if value &lt; 0 or value &gt; 100:</span><br><span class="line">            raise ValueError(&apos;score must between 0 ~ 100!&apos;)</span><br><span class="line">        self._score = value\</span><br></pre></td></tr></table></figure></p><p>现在，对任意的Student实例进行操作，就不能随心所欲地设置score了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.set_score(60) # ok!</span><br><span class="line">&gt;&gt;&gt; s.get_score()</span><br><span class="line">60</span><br><span class="line">&gt;&gt;&gt; s.set_score(9999)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between 0 ~ 100!</span><br></pre></td></tr></table></figure><p>但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。</p><p>有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！</p><p>还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的@property装饰器就是负责把一个方法变成属性调用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def score(self):</span><br><span class="line">        return self._score</span><br><span class="line"></span><br><span class="line">    @score.setter</span><br><span class="line">    def score(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            raise ValueError(&apos;score must be an integer!&apos;)</span><br><span class="line">        if value &lt; 0 or value &gt; 100:</span><br><span class="line">            raise ValueError(&apos;score must between 0 ~ 100!&apos;)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure></p><p>@property的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.score = 60 # OK，实际转化为s.set_score(60)</span><br><span class="line">&gt;&gt;&gt; s.score # OK，实际转化为s.get_score()</span><br><span class="line">60</span><br><span class="line">&gt;&gt;&gt; s.score = 9999</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between 0 ~ 100!</span><br></pre></td></tr></table></figure><p>注意到这个神奇的@property，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。</p><p>还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def birth(self):</span><br><span class="line">        return self._birth</span><br><span class="line"></span><br><span class="line">    @birth.setter</span><br><span class="line">    def birth(self, value):</span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def age(self):</span><br><span class="line">        return 2014 - self._birth</span><br></pre></td></tr></table></figure><p>上面的birth是可读写属性，而age就是一个只读属性，因为age可以根据birth和当前时间计算出来。</p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Database Basic</title>
      <link href="/2016/03/21/database-basic/"/>
      <url>/2016/03/21/database-basic/</url>
      <content type="html"><![CDATA[<p>With the help of <strong>Navicat for Mysql</strong>, we can easily transform different data format into mysql. And when we install MySQL Workbench, it helps us to deal with any sql operation easily and conviently.</p><h2 id="get-column-name-from-table"><a href="#get-column-name-from-table" class="headerlink" title="get column name from table"></a>get column name from table</h2><figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.COLUMNS <span class="keyword">where</span> table_name=<span class="string">'table name'</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>修改表名：alter table t_book rename to newname;</li><li>添加列：alter table 表名 add column 列名 varchar(30);</li><li>删除列：alter table 表名 drop column 列名;</li><li>修改列名MySQL： alter table bbb change oldname newname type;</li></ul><h2 id="python-and-mysql"><a href="#python-and-mysql" class="headerlink" title="python and mysql"></a>python and mysql</h2><p>python 3 利用 Pymysql 包来进行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql.cursors</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to the database</span></span><br><span class="line">connection = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">                             user=<span class="string">'root'</span>,</span><br><span class="line">                             password=<span class="string">'passcode'</span>,</span><br><span class="line">                             db=<span class="string">'database name'</span>,</span><br><span class="line">                             charset=<span class="string">'utf8mb4'</span>,</span><br><span class="line">                             cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">mysql_cursor = connection.cursor()</span><br><span class="line"></span><br><span class="line">sql_col_property=<span class="string">"show columns from table_name"</span></span><br><span class="line"></span><br><span class="line">mysql_cursor.execute(sql_col_property)</span><br><span class="line"></span><br><span class="line">connection.commit()</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure><h2 id="利用列的位置选取数据库中的列"><a href="#利用列的位置选取数据库中的列" class="headerlink" title="利用列的位置选取数据库中的列"></a>利用列的位置选取数据库中的列</h2><p><strong>首先获取想要选取位置的列名</strong></p><figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COLUMN_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS <span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="string">'your database schema'</span> <span class="keyword">AND</span> TABLE_NAME = <span class="string">'the wanted table name'</span> <span class="keyword">AND</span> ORDINAL_POSITION = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>利用获取到的列名提取列*</strong></p><figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SPECIFICED_NAME <span class="keyword">FROM</span> TABLE_NAME</span><br></pre></td></tr></table></figure><h2 id="选取列名中包含特定字符"><a href="#选取列名中包含特定字符" class="headerlink" title="选取列名中包含特定字符"></a>选取列名中包含特定字符</h2><figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> INFORMATION_SCHEMA.COLUMNS <span class="keyword">where</span> COLUMN_NAME <span class="keyword">like</span> <span class="string">'%control%'</span> <span class="keyword">order</span> <span class="keyword">by</span> TABLE_NAME</span><br></pre></td></tr></table></figure><h2 id="更新数据库中的数据"><a href="#更新数据库中的数据" class="headerlink" title="更新数据库中的数据"></a>更新数据库中的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> MySQLConnection, Error</span><br><span class="line"><span class="keyword">from</span> python_mysql_dbconfig <span class="keyword">import</span> read_db_config</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_book</span><span class="params">(book_id, title)</span>:</span></span><br><span class="line">    <span class="comment"># read database configuration</span></span><br><span class="line">    db_config = read_db_config()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># prepare query and data</span></span><br><span class="line">    query = <span class="string">""" UPDATE books</span></span><br><span class="line"><span class="string">                SET title = %s</span></span><br><span class="line"><span class="string">                WHERE id = %s """</span></span><br><span class="line"> </span><br><span class="line">    data = (title, book_id)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = MySQLConnection(**db_config)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># update book title</span></span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        cursor.execute(query, data)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># accept the changes</span></span><br><span class="line">        conn.commit()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> error:</span><br><span class="line">        print(error)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    update_book(<span class="number">37</span>, <span class="string">'The Giant on the Hill *** TEST ***'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python Data Visualization</title>
      <link href="/2016/03/21/python-data-visualization/"/>
      <url>/2016/03/21/python-data-visualization/</url>
      <content type="html"><![CDATA[<p>python 上面有不少数据可视化的工具包，先利用这篇文章总结如下：</p><a id="more"></a><ul><li>ggplot</li><li>Seaborn</li><li>Bokeh</li><li>Pygal</li><li>python-igraph</li><li>folium</li><li>Network</li><li>XMayavi</li><li>VisPy</li><li>PyQtGraph</li><li>vincent</li><li>Plotly</li></ul><p>seaborn是偏向于统计作图的，尤其是线性作图，用起来比较顺手，简单。seaborn整个语法层也会简化很多，画出的图不需要修饰看起来也很好看。但是绘图方式有限，不够灵活</p><p>bokeh是使用了js。因此主打的是交互式绘图，你可以在Ipython notebook里使用到最佳！画出的图非常好看，关键是可以交互修改！ 缺点是语法有点生涩，一点也不必matplotlib简单</p><p>ggplot就算了吧，和R语言那个GGPLOT2比起来，简直是感觉在用两个包，似然都是同一个人开发的！ 而且原作者也在GITHUB上说了，不再会更新PYTHON的库！ 不过话说，ggplot2真的是绘图神器，这几乎是我还在用R语言的唯一原因。</p><p>python for map data visualization </p><p>folium no doubt </p><p>javascript library :    <a href="http://kartograph.org/" target="_blank" rel="noopener">http://kartograph.org/</a><br>dynamic visualization : <a href="https://github.com/areski/python-nvd3" target="_blank" rel="noopener">https://github.com/areski/python-nvd3</a><br><a href="https://github.com/wrobstory/bearcart" target="_blank" rel="noopener">https://github.com/wrobstory/bearcart</a></p><p>以下是folium 作者的回复<br>Vincent is really meant for static visualization, unfortunately. If you’re interested in dynamic vis, take a look at python NVD3: <a href="https://github.com/areski/python-nvd3" target="_blank" rel="noopener">https://github.com/areski/python-nvd3</a></p><p>or my other lib, Bearcart:</p><p><a href="https://github.com/wrobstory/bearcart" target="_blank" rel="noopener">https://github.com/wrobstory/bearcart</a></p><p>I might put in a little work this weekend to integrate it more tightly with the ipython notebook.</p><p>If you’re looking for interactive D3 libs that are easy to work with, I highly recommend Dimple as well:</p><p><a href="http://dimplejs.org/" target="_blank" rel="noopener">http://dimplejs.org/</a></p><h3 id="matplotlib-draw-animate-graph"><a href="#matplotlib-draw-animate-graph" class="headerlink" title="matplotlib draw animate graph"></a>matplotlib draw animate graph</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">plt.ion()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    y = np.random.random()</span><br><span class="line">    plt.scatter(i, y)</span><br><span class="line">    plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><h2 id="Source-for-map-visualization"><a href="#Source-for-map-visualization" class="headerlink" title="Source for map visualization"></a>Source for map visualization</h2><p><a href="http://stackoverflow.com/questions/17267248/how-where-do-i-get-geojson-data-for-states-provinces-and-administrative-region" target="_blank" rel="noopener">how to get geoJson Data</a><br><a href="http://vallandingham.me/shapefile_to_geojson.html" target="_blank" rel="noopener">from shapefile to geoJson</a><br><a href="https://bost.ocks.org/mike/map/" target="_blank" rel="noopener">lets make a map</a><br><a href="http://www.gadm.org/country" target="_blank" rel="noopener">gadm world shapefile download </a><br><a href="http://www.mapshaper.org/" target="_blank" rel="noopener">mapshaper</a><br><a href="https://github.com/mbostock/topojson/wiki" target="_blank" rel="noopener">topoJson</a></p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Neural Network</title>
      <link href="/2016/03/21/nueral_network1/"/>
      <url>/2016/03/21/nueral_network1/</url>
      <content type="html"><![CDATA[<h1 id="Neural-Network-Tutorial"><a href="#Neural-Network-Tutorial" class="headerlink" title="Neural Network Tutorial"></a>Neural Network Tutorial</h1><p>This note introduce the basic concept of neural network in machine learning, plus the python realization. this note is intended to tell beginners the cornerstone of the neural network and help anyone who is interested in neural network can build their own application easily. </p><p>The notes contains the following part: </p><ul><li>Toy example of Neural Network </li><li>The Defination of Neural Network</li><li>Bsic element in Neural Network and Backprogation</li><li>constuct the Neural Network</li></ul><a id="more"></a><h2 id="Toy-example"><a href="#Toy-example" class="headerlink" title="Toy example"></a>Toy example</h2><h3 id="First-Case"><a href="#First-Case" class="headerlink" title="First Case"></a>First Case</h3><p>The example comes from @iamtrask, <a href="http://iamtrask.github.io/2015/07/12/basic-python-network/" target="_blank" rel="noopener">link blog</a></p><p>the toy example is neural network trained with backpropagation is attempting to use input to predict output.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Inputs</th><th style="text-align:center">Inputs</th><th style="text-align:center">Inputs</th><th style="text-align:center">Output</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><p>we would see that the leftmost input column is perfectly correlated with the output. Backpropagation, in its simplest form. </p><div class="table-container"><table><thead><tr><th>Variable</th><th>Definition</th></tr></thead><tbody><tr><td>X</td><td>Input dataset matrix where each row is a training example</td></tr><tr><td>y</td><td>Output dataset matrix where each row is a training example</td></tr><tr><td>l0</td><td>First Layer of the Network, specified by the input data</td></tr><tr><td>l1</td><td>Second Layer of the Network, otherwise known as the hidden layer</td></tr><tr><td>syn0</td><td>First layer of weights, Synapse 0, connecting l0 to l1.</td></tr><tr><td>*</td><td>Elementwise multiplication, so two vectors of equal size are multiplying corresponding values 1-to-1 to generate a final vector of identical size.</td></tr><tr><td>-</td><td>Elementwise subtraction, so two vectors of equal size are subtracting corresponding values 1-to-1 to generate a final vector of identical size.</td></tr><tr><td>x.dot(y)</td><td>If x and y are vectors, this is a dot product. If both are matrices, it’s a matrix-matrix multiplication. If only one is a matrix, then it’s vector matrix multiplication.</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nonlin</span><span class="params">(x,deriv=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(deriv==<span class="keyword">True</span>):</span><br><span class="line">        <span class="keyword">return</span> x*(<span class="number">1</span>-x)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-x))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># input dataset</span></span><br><span class="line">X = np.array([  [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] ])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># output dataset            </span></span><br><span class="line">y = np.array([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]]).T</span><br><span class="line"></span><br><span class="line"><span class="comment"># seed random numbers to make calculation</span></span><br><span class="line"><span class="comment"># deterministic (just a good practice)</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize weights randomly with mean 0</span></span><br><span class="line">syn0 = <span class="number">2</span>*np.random.random((<span class="number">3</span>,<span class="number">1</span>)) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iter <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># forward propagation</span></span><br><span class="line">    l0 = X</span><br><span class="line">    l1 = nonlin(np.dot(l0,syn0))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># how much did we miss?</span></span><br><span class="line">    l1_error = y - l1</span><br><span class="line"></span><br><span class="line">    <span class="comment"># multiply how much we missed by the </span></span><br><span class="line">    <span class="comment"># slope of the sigmoid at the values in l1</span></span><br><span class="line">    l1_delta = l1_error * nonlin(l1,<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># update weights</span></span><br><span class="line">    syn0 += np.dot(l0.T,l1_delta)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Output After Training:"</span>)</span><br><span class="line">print(l1)</span><br></pre></td></tr></table></figure><pre><code>Output After Training:[[ 0.00966498] [ 0.00786546] [ 0.99358866] [ 0.99211917]]</code></pre><p>A <a href="https://en.wikipedia.org/wiki/Sigmoid_function" target="_blank" rel="noopener">sigmoid function</a> maps any value to a value between 0 and 1. We use it to convert numbers to probabilities. It also has several other desirable properties for training neural networks.<br>A <a href="https://en.wikipedia.org/wiki/Sigmoid_function" target="_blank" rel="noopener">sigmoid function</a> maps any value to a value between 0 and 1. We use it to convert numbers to probabilities. It also has several other desirable properties for training neural networks.</p><p><img class="img-responsive" width="80%" src="https://iamtrask.github.io/img/sigmoid.png" alt=""></p><h3 id="A-Harder-Problem-XOR"><a href="#A-Harder-Problem-XOR" class="headerlink" title="A Harder Problem  XOR"></a>A Harder Problem  XOR</h3><p>The problem can be described in the following table :</p><div class="table-container"><table><thead><tr><th style="text-align:center">Inputs</th><th style="text-align:center">Inputs</th><th style="text-align:center">Inputs</th><th style="text-align:center">Output</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><p>The realized code is in the following and the definations of each variables are : </p><div class="table-container"><table><thead><tr><th>Inputs (l0)</th><th>Inputs (l0)</th><th>Inputs (l0)</th><th>Hidden Weights (l1)</th><th>Hidden Weights (l1)</th><th>Hidden Weights (l1)</th><th>Hidden Weights (l1)</th><th>Output (l2)</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>0.1</td><td>0.2</td><td>0.5</td><td>0.2</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0.2</td><td>0.6</td><td>0.7</td><td>0.1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0.3</td><td>0.2</td><td>0.3</td><td>0.9</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0.2</td><td>0.1</td><td>0.3</td><td>0.8</td><td>0</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nonlin</span><span class="params">(x,deriv=False)</span>:</span></span><br><span class="line"><span class="keyword">if</span>(deriv==<span class="keyword">True</span>):</span><br><span class="line">    <span class="keyword">return</span> x*(<span class="number">1</span>-x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-x))</span><br><span class="line">    </span><br><span class="line">X = np.array([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">                </span><br><span class="line">y = np.array([[<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># randomly initialize our weights with mean 0</span></span><br><span class="line">syn0 = <span class="number">2</span>*np.random.random((<span class="number">3</span>,<span class="number">4</span>)) - <span class="number">1</span></span><br><span class="line">syn1 = <span class="number">2</span>*np.random.random((<span class="number">4</span>,<span class="number">1</span>)) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">60001</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># Feed forward through layers 0, 1, and 2</span></span><br><span class="line">    l0 = X</span><br><span class="line">    l1 = nonlin(np.dot(l0,syn0))</span><br><span class="line">    l2 = nonlin(np.dot(l1,syn1))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># how much did we miss the target value?</span></span><br><span class="line">    l2_error = y - l2</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (j% <span class="number">10000</span>) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"Error:"</span> + str(np.mean(np.abs(l2_error))))</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># in what direction is the target value?</span></span><br><span class="line">    <span class="comment"># were we really sure? if so, don't change too much.</span></span><br><span class="line">    <span class="comment"># l2_delta means how the l2 layer weight (syn1) affect the estimated error change </span></span><br><span class="line">    l2_delta = l2_error*nonlin(l2,deriv=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># how much did each l1 value contribute to the l2 error (according to the weights)?</span></span><br><span class="line">    <span class="comment"># this is actually backprogation chain rule of l2_error . </span></span><br><span class="line">    <span class="comment"># for l1 value x to measure 1 unit change to the l2_error , we need the derivates of f(wx),right?! is f(wx)*w, </span></span><br><span class="line">    <span class="comment"># so to know the l1_error, we have 1*w*f(wx)*l2_error   </span></span><br><span class="line">    l1_error = l2_delta.dot(syn1.T)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># in what direction is the target l1?</span></span><br><span class="line">    <span class="comment"># were we really sure? if so, don't change too much.</span></span><br><span class="line">    <span class="comment"># l1_delta means how the l1 layer weight (syn0) affect the estimated error change </span></span><br><span class="line">    l1_delta = l1_error * nonlin(l1,deriv=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    syn1 += l1.T.dot(l2_delta)</span><br><span class="line">    syn0 += l0.T.dot(l1_delta)</span><br></pre></td></tr></table></figure><pre><code>Error:0.0085850250975Error:0.00578962106435Error:0.00462926115218Error:0.0039588188244Error:0.0035101602766Error:0.00318353073559</code></pre><h4 id="decode-the-above-program"><a href="#decode-the-above-program" class="headerlink" title="decode the above program"></a>decode the above program</h4><p> The above progam is acutally three nodes for input layer, four nodes for hidden layer (only 1 hidden layer) and 1 node output layer. we have four observational data. the number of weights (Synapses) need to calcualte is 3*4 + 1*4. For fiting the data, the code use traditional backprogation method to update the weightings and raise the prediction precise. When the code calculate the result, it needs to know the error to the training data.  <code>l2_error = y - l2</code> Then, based on the error distance, we can make the correction. Firstly, the last node, we want to know how to update the weights in the last layer. this is <code>l2_delta = l2_error*nonlin(l2,deriv=True)</code>. After that, we need to know the how the error contribution contributed to the weights in the upper layer. Then, we need the backprogation method to calculate <strong>the extent of one unit change of the weights in the upper layer to final error</strong>. This can use derivates to express, </p><script type="math/tex; mode=display">error \times f(wx)'\times (wx)'</script><p> So we have <code>l1_error = l2_delta.dot(syn1.T)</code>. In addition, we have <code>l1_delta = l1_error * nonlin(l1,deriv=True)</code></p><p> The <code>l1_delta</code> and <code>l1_delta</code> indicate the update coefficients that weights should concern, multiplied by input value we can get the update amount of different weights in the Neural Network, which is the last two lines:</p><p> <code>syn1 += l1.T.dot(l2_delta)</code></p><p> <code>syn0 += l0.T.dot(l1_delta)</code></p><h2 id="The-Defination-of-Neural-Network"><a href="#The-Defination-of-Neural-Network" class="headerlink" title="The Defination of Neural Network"></a>The Defination of Neural Network</h2><h3 id="Biological-motivation"><a href="#Biological-motivation" class="headerlink" title="Biological motivation"></a>Biological motivation</h3><p>the online lecture notes have very clearly introduce to the neural network .(see <a href="http://cs231n.github.io/neural-networks-1/" target="_blank" rel="noopener">note1</a>)<br>Here I briefly mention the basic ideas of eural network. The neural Network mimick human brain neurons performance. different neurons connect with each other by <strong>synapses</strong>, and receives the input signals from <strong>dendrites</strong>. In the nucleus, it applies activation function to produce the output singals, and then send the singal to the next neurons through its <strong>axon</strong> and <strong>synapses</strong></p><p>The above description illustrate the functioning procedures of the very basic neural network. </p><div class="fig figcenter fighighlight">  <img src="/pic/neuron.png" width="49%">  <img src="/pic/neuron_model.jpeg" width="49%" style="border-left: 1px solid black;">  <div class="figcaption">A cartoon drawing of a biological neuron (left) and its mathematical model (right).</div></div><h3 id="Neural-Network-architectures"><a href="#Neural-Network-architectures" class="headerlink" title="Neural Network architectures"></a>Neural Network architectures</h3><p>Instead of an amorphous blobs of connected neurons, Neural Network models are often organized into distinct layers of neurons. </p><div class="fig figcenter fighighlight">  <img src="/pic/neural_net.jpeg" width="40%">  <img src="/pic/neural_net2.jpeg" width="55%" style="border-left: 1px solid black;">  <div class="figcaption"><b>Left:</b> A 2-layer Neural Network (one hidden layer of 4 neurons (or units) and one output layer with 2 neurons), and three inputs. <b>Right:</b> A 3-layer neural network with three inputs, two hidden layers of 4 neurons each and one output layer. Notice that in both cases there are connections (synapses) between neurons across layers, but not within a layer.</div></div><h2 id="Self-Understanding"><a href="#Self-Understanding" class="headerlink" title="Self Understanding"></a>Self Understanding</h2><p>As far as I learned in neural network, it can be seen as weighting different analysis core to produce the final judgement. for example, in one specific node at jth layer, it can receive all or part of input signal from upper layer. when it receive those signals, there are many ways to organzie them. the simplest way is liner form, multiplying them with weightings (synapses)(eg $w1<em>x1+w2</em>x2+w3<em>x3$). But we could also apply other forms such as polynomial, quardatic form, max, … And when we do like this, we need to remember that we need to output <strong>singal</strong>. So we need to apply <em>*activation function</em></em> (usually sigmoid) to swith the numerical result into the singal. By combing many nodes and many layers, we can deal with many complex issues and get the desired results. I think this is the power of Neural Network. In Big Data era, Neural Network must have wider and wider applications.</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="http://karpathy.github.io/neuralnets/" target="_blank" rel="noopener">http://karpathy.github.io/neuralnets/</a></li><li><a href="http://cs231n.github.io/" target="_blank" rel="noopener">http://cs231n.github.io/</a></li><li><a href="https://iamtrask.github.io/2015/07/12/basic-python-network/" target="_blank" rel="noopener">https://iamtrask.github.io/2015/07/12/basic-python-network/</a></li></ul>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pandas Data Analysis</title>
      <link href="/2016/03/21/python%20data%20analysis/"/>
      <url>/2016/03/21/python%20data%20analysis/</url>
      <content type="html"><![CDATA[<h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">later use utf<span class="number">-8</span>-sig instead of utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line">pip install --target=d:\somewhere\other\than\the\default package_name</span><br><span class="line">带空格处理</span><br><span class="line">pip install --target=X:\My~Documents\py_pkg\ selenium</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="进行分组统计"><a href="#进行分组统计" class="headerlink" title="进行分组统计"></a>进行分组统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>],</span><br><span class="line">     <span class="string">'key2'</span>:[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</span><br><span class="line">     <span class="string">'data1'</span>:np.random.randn(<span class="number">5</span>),</span><br><span class="line">     <span class="string">'data2'</span>:np.random.randn(<span class="number">5</span>)&#125;)</span><br><span class="line">df</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">0</span> <span class="number">-0.410673</span>  <span class="number">0.519378</span>    a  one</span><br><span class="line"><span class="number">1</span> <span class="number">-2.120793</span>  <span class="number">0.199074</span>    a  two</span><br><span class="line"><span class="number">2</span>  <span class="number">0.642216</span> <span class="number">-0.143671</span>    b  one</span><br><span class="line"><span class="number">3</span>  <span class="number">0.975133</span> <span class="number">-0.592994</span>    b  two</span><br><span class="line"><span class="number">4</span> <span class="number">-1.017495</span> <span class="number">-0.530459</span>    a  one</span><br><span class="line"></span><br><span class="line">grouped = df[<span class="string">'data1'</span>].groupby(df[<span class="string">'key1'</span>])</span><br><span class="line"></span><br><span class="line">grouped.mean()</span><br><span class="line">key1</span><br><span class="line">a      <span class="number">-1.182987</span></span><br><span class="line">b       <span class="number">0.808674</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">means = df[<span class="string">'data1'</span>].groupby([df[<span class="string">'key1'</span>], df[<span class="string">'key2'</span>]]).mean()</span><br><span class="line">means.unstack()</span><br><span class="line">key2       one       two</span><br><span class="line">key1                    </span><br><span class="line">a    <span class="number">-0.714084</span> <span class="number">-2.120793</span></span><br><span class="line">b     <span class="number">0.642216</span>  <span class="number">0.975133</span></span><br></pre></td></tr></table></figure><h2 id="选取两个dataframe中列公共的元素"><a href="#选取两个dataframe中列公共的元素" class="headerlink" title="选取两个dataframe中列公共的元素"></a>选取两个dataframe中列公共的元素</h2><p>有df1.ID, df2.ID 两列，我需要选取两列中都有的元素。<br>可以用如下方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">m_df=pd.merge(df1,df2,how=<span class="string">"inner"</span>,on=<span class="string">"ID"</span>)</span><br><span class="line">ind=m_df.ID</span><br><span class="line">df1.set_index(<span class="string">'ID'</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line">df2.set_index(<span class="string">'ID'</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line">common_df1=df1.loc[ind,:]</span><br><span class="line">common_df2=df2.loc[ind,:]</span><br></pre></td></tr></table></figure><h2 id="改变pandas-列的类型"><a href="#改变pandas-列的类型" class="headerlink" title="改变pandas 列的类型"></a>改变pandas 列的类型</h2><p>把数值型的改变成string</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>],</span><br><span class="line">     <span class="string">'key2'</span>:[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</span><br><span class="line">     <span class="string">'data1'</span>:np.random.randn(<span class="number">5</span>),</span><br><span class="line">     <span class="string">'data2'</span>:np.random.randn(<span class="number">5</span>)&#125;)</span><br><span class="line"></span><br><span class="line"> df[<span class="string">"data1"</span>]=df[<span class="string">"data1"</span>].astype(str)</span><br></pre></td></tr></table></figure><h2 id="寻找缺失值或者NaN值所带的位置"><a href="#寻找缺失值或者NaN值所带的位置" class="headerlink" title="寻找缺失值或者NaN值所带的位置"></a>寻找缺失值或者NaN值所带的位置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">                   a         b</span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">1.883381</span>  <span class="number">-0.416629</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">0.149948</span>  <span class="number">-1.782170</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">-0.407604</span> <span class="number">0.314168</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">1.452354</span>  NaN</span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">-1.224869</span> <span class="number">-0.947457</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">05</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">0.498326</span>  <span class="number">0.070416</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">06</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">0.401665</span>  NaN</span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">07</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">-0.019766</span> <span class="number">0.533641</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">-1.101303</span> <span class="number">-1.408561</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-01</span> <span class="number">09</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">1.671795</span>  <span class="number">-0.764629</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">index = df[<span class="string">'b'</span>].index[df[<span class="string">'b'</span>].apply(np.isnan)]</span><br><span class="line"></span><br><span class="line">df[<span class="string">'a'</span>].ix[index[<span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.452354</span></span><br><span class="line"></span><br><span class="line">df_index = df.index.values.tolist()</span><br><span class="line">[df_index.index(i) <span class="keyword">for</span> i <span class="keyword">in</span> index]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h2 id="iloc-与-loc-区别-at-与-iat-区别-ix"><a href="#iloc-与-loc-区别-at-与-iat-区别-ix" class="headerlink" title="iloc 与 loc 区别 at 与 iat 区别 ix"></a>iloc 与 loc 区别 at 与 iat 区别 ix</h2><p>dataframe.iloc按下标选取，或者使用dataframe.loc按索引选取：</p><p>如果不是需要访问特定行列，而只是某个特殊位置的元素的话，dataframe.at和dataframe.iat是最快的方式，它们分别用于使用索引和下标进行访问：</p><p>ataframe.ix可以混合使用索引和下标进行访问，唯一需要注意的地方是行列内部需要一致，不可以同时使用索引和标签访问行或者列，不然的话，将会得到意外的结果。</p><h2 id="pandas-处理缺失数据"><a href="#pandas-处理缺失数据" class="headerlink" title="pandas 处理缺失数据"></a>pandas 处理缺失数据</h2><p>原始数据的中很可能存在一些数据的缺失，就如同现在处理的这个样例数据一样，处理缺失数据有多种方式。通常使用dataframe.dropna()，dataframe.dropna()可以按行丢弃带有nan的数据；若指定how=’all’（默认是’any’），则只在整行全部是nan时丢弃数据；若指定thresh，则表示当某行数据非缺失列数超过指定数值时才保留；要指定根据某列丢弃可以通过subset完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"Data size before filtering:"</span></span><br><span class="line"><span class="keyword">print</span> df.shape</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Drop all rows that have any NaN values:"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Data size after filtering:"</span></span><br><span class="line"><span class="keyword">print</span> df.dropna().shape</span><br><span class="line"><span class="keyword">print</span> df.dropna().head(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Drop only if all columns are NaN:"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Data size after filtering:"</span></span><br><span class="line"><span class="keyword">print</span> df.dropna(how=<span class="string">'all'</span>).shape</span><br><span class="line"><span class="keyword">print</span> df.dropna(how=<span class="string">'all'</span>).head(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Drop rows who do not have at least six values that are not NaN"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Data size after filtering:"</span></span><br><span class="line"><span class="keyword">print</span> df.dropna(thresh=<span class="number">6</span>).shape</span><br><span class="line"><span class="keyword">print</span> df.dropna(thresh=<span class="number">6</span>).head(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Drop only if NaN in specific column:"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Data size after filtering:"</span></span><br><span class="line"><span class="keyword">print</span> df.dropna(subset=[<span class="string">'closePrice'</span>]).shape</span><br><span class="line"><span class="keyword">print</span> df.dropna(subset=[<span class="string">'closePrice'</span>]).head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Matlab Technique</title>
      <link href="/2016/03/21/matlab-technique/"/>
      <url>/2016/03/21/matlab-technique/</url>
      <content type="html"><![CDATA[<p>Here I summarize some matlab trips to facilate my research </p><a id="more"></a><p><strong>将 excel 中的日期转化为matlab中的日期(char)</strong></p><ol><li>在EXCEL中设置日期变量的单元格为“常规格式”； </li><li>复制此变化到EXCEL中，生成一个数组A </li><li>采用 x2mdate命令将其转化为MATLAB中的数据B </li><li>采用datestr命令将其转化为MATLAB中特有的日期格式</li></ol><p><strong> matlab arry tricks</strong><br><a href="/files/matlab array tricks.pdf">matlab array tricks</a></p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Summary of Economics Notes</title>
      <link href="/2016/01/22/summary-of-economics-notes/"/>
      <url>/2016/01/22/summary-of-economics-notes/</url>
      <content type="html"><![CDATA[<p>This is a few summary of my economics studying notes in my graduate and undergraduate </p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Selenium Webdriver Api</title>
      <link href="/2016/01/19/selenium-webdriver-api/"/>
      <url>/2016/01/19/selenium-webdriver-api/</url>
      <content type="html"><![CDATA[<p>In this article, I sumamrize some selenium webdriver api command to help coding webspider.</p><a id="more"></a><h2 id="locating-element"><a href="#locating-element" class="headerlink" title="locating element"></a>locating element</h2><p>selenium webdriver offer several ways to locate the elements : </p><ul><li>id</li><li>name</li><li>class name</li><li>tag name</li><li>link text</li><li>partial link text</li><li>xpath</li><li>css selector</li></ul><p>coressponding to the following : </p><ul><li>find_element_by_id()</li><li>find_element_by_name()</li><li>find_element_by_class_name()</li><li>find_element_by_tag_name()</li><li>find_element_by_link_text()</li><li>find_element_by_partial_link_text()</li><li>find_element_by_xpath()</li><li>find_element_by_css_selector()</li></ul><p>following the above locating element, we have four most commonly used operations: </p><ul><li>clear clear the content, if possible</li><li>send_keys  simulate the keyboard input operation. But if we want to input chinese chacarters, usually we declare “utf-8” format at the beginning and use send_keys(u”中文内容”)</li><li>click simulate the mouse click operation, can click any text/image link, button, option …</li><li>submit submit a form, but the object should be a form</li></ul><p>for example, the following is a typical case for user to login a website: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">driver.find_element_by_id(“username<span class="string">").clear()</span></span><br><span class="line"><span class="string">driver.find_element_by_id("</span> username <span class="string">").send_keys("</span>username<span class="string">")</span></span><br><span class="line"><span class="string">driver.find_element_by_id(“password"</span>).clear()</span><br><span class="line">driver.find_element_by_id(<span class="string">" password "</span>).send_keys(<span class="string">"password"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"loginBtn"</span>).click()</span><br></pre></td></tr></table></figure><p>please note that if we use find_elements_by… , we get a group of info which has the key word info. Then we can use loop to select a group of elements that we want. </p><h2 id="keyboard-operation"><a href="#keyboard-operation" class="headerlink" title="keyboard operation"></a>keyboard operation</h2><p>most commonly used keyboard function key : </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">send_keys(Keys.BACK_SPACE) 删除键（BackSpace）</span><br><span class="line">send_keys(Keys.SPACE) 空格键(Space)</span><br><span class="line">send_keys(Keys.TAB) 制表键(Tab)</span><br><span class="line">send_keys(Keys.ESCAPE) 回退键（Esc）</span><br><span class="line">send_keys(Keys.ENTER) 回车键（Enter）</span><br><span class="line">send_keys(Keys.CONTROL,<span class="string">'a'</span>) 全选（Ctrl+A）</span><br><span class="line">send_keys(Keys.CONTROL,<span class="string">'c'</span>) 复制（Ctrl+C）</span><br><span class="line">send_keys(Keys.CONTROL,<span class="string">'x'</span>) 剪切（Ctrl+X）</span><br><span class="line">send_keys(Keys.CONTROL,<span class="string">'v'</span>) 粘贴（Ctrl+V）</span><br></pre></td></tr></table></figure><p>we can also use webdriver to get page information, such as title, url link, text content. For example: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#get the title</span></span><br><span class="line">title = driver.title</span><br><span class="line">print(title)</span><br><span class="line"><span class="comment">#get page current URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line">print(now_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get "userid" text content </span></span><br><span class="line">now_user=driver.find_element_by_id(“userid<span class="string">").text</span></span><br><span class="line"><span class="string">print(now_user)</span></span><br></pre></td></tr></table></figure><h2 id="multiple-windows-operation"><a href="#multiple-windows-operation" class="headerlink" title="multiple windows operation"></a>multiple windows operation</h2><p>If we need to switch to multiple windows in a single webpage, we can use current_window_handle, window_handles,switch_to_window() command to operate.</p><div align="center"> <img src="./pic/webdriver-api.png" width="600" height="400" alt="figure 1" align="center"></div><h2 id="javascript-operation"><a href="#javascript-operation" class="headerlink" title="javascript operation"></a>javascript operation</h2><p>generally, we can use <strong>driver.execute_script()</strong> to apply javascript command</p><p>scrollbar operation, sometimes (sign up for a website ), we need to control the scrollbar<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">code <span class="keyword">for</span> scroll：</span><br><span class="line">&lt;body onload= <span class="string">"document.body.scrollTop=0 "</span>&gt;</span><br><span class="line">&lt;body onload= <span class="string">"document.body.scrollTop=100000 "</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#将页面滚动条拖到底部</span></span><br><span class="line">js = <span class="string">"var q=document.documentElement.scrollTop=10000"</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#将滚动条移动到页面的顶部</span></span><br><span class="line">js_ = <span class="string">"var q=document.documentElement.scrollTop=0"</span></span><br><span class="line">driver.execute_script(js_)</span><br></pre></td></tr></table></figure></p><h2 id="cookie-operation"><a href="#cookie-operation" class="headerlink" title="cookie operation"></a>cookie operation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># get cookie info</span></span><br><span class="line">cookie = driver.get_cookies()</span><br><span class="line"><span class="comment"># print</span></span><br><span class="line">print(cookie)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://www.youdao.com"</span>)</span><br><span class="line"><span class="comment">#add  name and value into cookie</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">'name'</span>:<span class="string">'key-aaaaaaa'</span>, <span class="string">'value'</span>:<span class="string">'value-bbbb'</span>&#125;)</span><br><span class="line"><span class="comment">#loop  the  name and value and other info in cookies</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s -&gt; %s"</span> % (cookie[<span class="string">'name'</span>], cookie[<span class="string">'value'</span>])</span><br><span class="line"><span class="comment">##### we have two ways to delete cookie #####</span></span><br><span class="line"><span class="comment"># delete specific cookie</span></span><br><span class="line">driver.delete_cookie(<span class="string">"CookieName"</span>)</span><br><span class="line"><span class="comment"># delete all cookies</span></span><br><span class="line">driver.delete_all_cookies()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webspider </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Economics Research</title>
      <link href="/2015/12/30/econ-research-summary/"/>
      <url>/2015/12/30/econ-research-summary/</url>
      <content type="html"><![CDATA[<h1 id="ECONOMICS"><a href="#ECONOMICS" class="headerlink" title="ECONOMICS"></a>ECONOMICS</h1><h2 id="Product-design-improvement-for-Long-Term-Care-Insurance-Market-PDF"><a href="#Product-design-improvement-for-Long-Term-Care-Insurance-Market-PDF" class="headerlink" title="Product design improvement for Long-Term Care Insurance Market PDF"></a>Product design improvement for Long-Term Care Insurance Market <a href="/files/bejeap-guoxuan wei.pdf">PDF</a></h2><p><strong>Abstract</strong>: Using a modified Brown and Finkelstein (2008) model of long-term care insurance purchase decisions, we evaluate catastrophic long-term care insurance policies that cover the tail risk of long-term care costs at affordable premiums. Under our baseline model, we show theoretically that introducing catastrophic policies will induce 11 percent of middle-income men and 3 percent of middle-income women to initiate insurance coverage. As a result, Medicaid costs will be reduced by 0.20 percent and 0.19 percent for men and women, respectively.</p><h2 id="Home-Security-or-Social-Security-Which-one-is-better-for-Long-Term-Growth"><a href="#Home-Security-or-Social-Security-Which-one-is-better-for-Long-Term-Growth" class="headerlink" title="Home Security or Social Security, Which one is better for Long Term Growth ?"></a>Home Security or Social Security, Which one is better for Long Term Growth ?</h2><p><strong>Abstract</strong>: China has long history of family-based support and security, functioning part of intergeneration welfare transfer as social security system. Considering the pros and cons in both family and social security systems, it is crucial to design the optimal security system to improve human capital accumulation and guarantee long term economics growth. On the other side, education investment and population policy also alter distribution of human capital accumulation. Through three period OLG model, this paper finds that given current education and population policy, the performance of different policies depends on the critical parameters. Applying numerical estimation simulation, I find that pay as you go system plus family-based security can obtain optimal balance growth path. But it increases risks on fiscal budget.</p>]]></content>
      
      <categories>
          
          <category> research </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Data Science Studying</title>
      <link href="/2015/12/30/datascience/"/>
      <url>/2015/12/30/datascience/</url>
      <content type="html"><![CDATA[<h1 id="数据科学学习指导"><a href="#数据科学学习指导" class="headerlink" title="数据科学学习指导"></a>数据科学学习指导</h1><p><a href="https://www.zhihu.com/question/20176089" target="_blank" rel="noopener">https://www.zhihu.com/question/20176089</a><br>想做数据处理尤其是大数据量处理的相关工作必须兼具 计算机科学基础和统计基础。<br>强烈推荐：Distance Education § Harvard University Extension School 和哈佛的学生一起学习Data Science。</p><a id="more"></a><p>网络课程同样有丰富的资源：<br>机器学习类：<br>斯坦福大学：机器学习 coursera<br>Learning From Data<br><a href="http://dataunion.org/19321.html" target="_blank" rel="noopener">http://dataunion.org/19321.html</a> python 机器学习系统<br>数据分析类：<br>约翰霍普金斯： Data Analysis Methods<br>杜克： Data Analysis and Statistical Inference<br>约翰霍普金斯： Computing for Data Analysis<br>MIT： The Analytics Edge</p><p>编程类：<br>莱斯大学： Introduction to Interactive Programming in Python<br>MIT： Introduction to Computer Science &amp; Programming in Python<br>相关问题： </p><p>Data Science: What are some good free resources to learn data science?<br>Where can I learn pandas or numpy for data analysis?<br>What are some good resources for learning about statistical analysis?<br>Data Science: How do I become a data scientist?<br>What are some good “toy problems” in data science?<br>What are some good resources for learning about machine learning?<br>Harvard CS109<br><a href="http://cs109.github.io/2015/index.html" target="_blank" rel="noopener">http://cs109.github.io/2015/index.html</a></p><p><a href="http://cm.dce.harvard.edu/2014/01/14328/publicationListing.shtml" target="_blank" rel="noopener">http://cm.dce.harvard.edu/2014/01/14328/publicationListing.shtml</a></p><p><a href="https://www.quora.com/How-can-I-become-a-data-scientist-1?redirected_qid=59455" target="_blank" rel="noopener">https://www.quora.com/How-can-I-become-a-data-scientist-1?redirected_qid=59455</a></p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Public Economics Introduction</title>
      <link href="/2015/12/25/Public-Economics-Intro-and-Ideas/"/>
      <url>/2015/12/25/Public-Economics-Intro-and-Ideas/</url>
      <content type="html"><![CDATA[<h1 id="Public-Economics"><a href="#Public-Economics" class="headerlink" title="Public Economics"></a>Public Economics</h1><h2 id="broder-definition"><a href="#broder-definition" class="headerlink" title="broder definition"></a>broder definition</h2><p>Public economics (or economics of the public sector) is the study of government policy through the lens of economic efficiency and equity. At its most basic level, public economics provides a framework for thinking about whether or not the government should participate in economics markets and to what extent its role should be. In order to do so, microeconomic theory is utilized to assess whether the private market is likely to provide efficient outcomes in the absence of governmental interference. Inherently, this study involves the analysis of government taxation and expenditures. This subject encompasses a host of topics including market failures, externalities, and the creation and implementation of government policy. Public economics builds on the theory of welfare economics and is ultimately used as a tool to improve social welfare. </p><p>Broad methods and topics include:</p><ul><li>the theory and application of public finance</li><li>analysis and design of public policy</li><li>distributional effects of taxation and government expenditures</li><li>analysis of market failure and government failure.</li></ul><p>Emphasis is on analytical and scientific methods and normative-ethical analysis, as distinguished from ideology. Examples of topics covered are tax incidence optimal taxation and the theory of public goods</p><a id="more"></a><p>What is Public Economics?<br>Public economics focuses on answering two types of questions</p><ol><li>How do government policies a搂ect the economy?</li><li>How should policies be designed to maximize welfare?</li></ol><ul><li><p>Motivation 1: Practical Relevance</p><ul><li>Interest in improving economic welfare -&gt; interest in public economics</li><li>Almost every economic intervention occurs through government policy<ul><li>Price intervention: taxes, welfare, social insurance, public goods</li><li>Regulation: min wages, FDA regulations (25% of products consumed),zoning, labor laws, min education laws, environment</li><li>Government directly employs one sixth of U.S. workforce</li></ul></li><li>Contentious debate on the appropriate role of government in society</li><li>Stakes are extremely large because of broad scope of policies</li></ul></li><li><p>Motivation 2: Academic Interest</p><ul><li>Macro, development, labor, and corporate 脰nance questions often ultimately motivated by a public economics question</li><li>Natural to combine public 脰nance with another field</li><li>Understanding public 脰nance can help ensure that you work on relevant topics</li></ul></li><li><p>Motivation 3: Methodology</p><ul><li>Public economics is at the frontier of a methodological transformation in applied microeconomics</li><li>Data-driven approach to answering important policy questions<ul><li>Combines a broad set of skills: applied theory, applied econometrics, simulation methods</li><li>Useful skill set for many applied 脰elds in economics</li></ul></li></ul></li></ul><ul><li><p>Theme 1: Connecting Theory to Data</p><ul><li><p>Modern public economics tightly integrates theory with <em>empirical evidence</em> to derive <em>quantitative predictions</em> about policy || </p></li><li><p><strong>Taditional approach</strong>: theoretical models and numerical simulations</p></li><li><em>Recent work derives robust formulas that can be implemented using well-identified empirical estimates</em></li></ul></li><li><p>Theme 2: Quasi-Experimental Empirical Methods</p></li><li><p>Theme 3: “Big Data”</p><ul><li>so-called pre-existing Survey Data and Administrative Data </li></ul></li><li>Theme 4: Behavioral Models</li></ul><p><strong>Administrative data</strong> </p><p>refers to information collected primarily for administrative (not research) purposes. This type of data is collected by government departments and other organisations for the purposes of registration, transaction and record keeping, usually during the delivery of a service.</p><p><strong>Event Study Designs</strong></p><ul><li>Event studies are a powerful research design when treatments are staggered in time across individuals</li><li>Use a group of treated individuals as counterfactuals for each other to account for time series trends</li><li><p>Good for identifying sharp, short-run e§ects but not longer-term impacts </p></li><li><p>Methodology</p><ol><li>Define “event time” as calendar time minus date of treatment for each treated obs.</li><li>Plot means/medians, etc. of outcome variable by event time</li></ol></li></ul><h2 id="Social-Insurance"><a href="#Social-Insurance" class="headerlink" title="Social Insurance"></a>Social Insurance</h2><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><ul><li>Transfers based on events such as unemployment, disability, or age</li><li>Contrasts with welfare: means-tested transfers</li><li>SI is the biggest and most rapidly growing part of government expenditure today</li></ul><p><strong>MAIN QUESTION</strong></p><ol><li>Why have social (as opposed to private, or any) insurance?</li><li>What type of SI system maximizes social welfare?</li></ol><p><strong>Tradeoff between two forces</strong></p><ul><li>Benefits — reducing risk (áuctuations in consumption)</li><li>Distortion — changes in incentives for workers and firms -&gt; ineficient behavior and DWL</li></ul><p>Also will generate new distortions as you fix the problem you set out to solve -&gt; second-best solution. </p><p><em>Identify optimal policy by combining theoretical models of social insurance with empirical evidence on program effects</em></p><h3 id="first-question-Why-have-social-insurance"><a href="#first-question-Why-have-social-insurance" class="headerlink" title="first question: Why have social insurance"></a>first question: Why have social insurance</h3><ul><li>Motivation for insurance: reduction in risk for risk-averse individuals<ul><li>Unemp Ins: risk of involuntary unemployment</li><li>Workersícomp and DI: risk of injuries/disabilities</li><li>Social Security annuity: risk of living too long</li></ul></li></ul><p>But why is government intervention needed to provide this insurance? Possible sources of market failure here:</p><ol><li>Informational problems (adverse selection)</li><li>Individual optimization failures (myopia/improper planning)</li><li>Macroeconomic shocks</li></ol><h4 id="Adverse-Selection"><a href="#Adverse-Selection" class="headerlink" title="Adverse Selection"></a>Adverse Selection</h4><p>reference: Rothschild and Stiglitz (1976); see MWG Ch. 13 for a good review </p><p>Main result: can lead to market failure where no equilibrium supports<br>provision of insurance</p>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> public economics </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Stata Learning</title>
      <link href="/2015/12/20/stata-learning/"/>
      <url>/2015/12/20/stata-learning/</url>
      <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>If your data are in free format, with variables separated by blanks, commas, or tabs, you can use the infile command.</p><pre><code>infile str14 country setting effort change using http://data.princeton.edu/wws509/datasets/effort.raw</code></pre><a id="more"></a><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>列举个案 list       </p><pre><code>list sex-age in 1/10 , nolabellist sex-age if missing(edu) </code></pre><p>描述数据 describe<br>计数 count  <code>count if foreign==1</code></p><p>计算 display</p><p>查看变量 codebook</p><p>报告变量的分布  inspect</p><p>清理内存 clear</p><p>退出 exit</p><p>创建路径 mkdir (Make directory)</p><p>转向路径 cd   (change directory) <code>cd “path”    cd ..   cd .  cd \</code></p><p>显示当前路径 pwd (the path of the current working directory)</p><p>显示内容 dir  ls  sysdir</p><p>拷贝文件 copy</p><p>删除文件 erase  (每次一个文件)</p><p>压缩文件 compress </p><p>显示内容长度 set scrollbufsize </p><p>设置memory 大小 <code>set memory expand 10 duplicates drop</code></p><h2 id="log-文件"><a href="#log-文件" class="headerlink" title="log 文件"></a>log 文件</h2><p>捕获日志文件没有关闭的错误：<code>capture log close  //关闭所有打开的日志文件</code></p><p>打开一个log文件：<code>log using 文件名</code> </p><p>若执行某一指令后的结果没有必要记录下来，则可事先用指令“log off ”暂停记录, 需要记录时再用“log on”继续记录, 最后用“log close”关闭文件。<br>若已存在  log using result1, replace ；要在其后进行添加，则键入<br>log using result1, append</p><p>只记录命令的、没有命令执行结果输出的：<code>cmdlog using filename [, append replace]</code></p><p>​<br>提示：对一次数据处理可以同时打开两类日志文件。前者用于数据分析，后者用于形成do-file文件。</p><h2 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h2><p>查找变量 lookfor<br>改变变量名 rename old_varname new_varname</p><p>生成新变量 <code>generate newvar = exp [if exp][in range]</code><br><code>generate bmi=weight/(height^2)</code> </p><p>重新编码  recode  <code>recode sex (2=0)(1=1)(else=.),gen(gender)</code></p><p>按某变量排序 sort varlist </p><p>排位变量  order   <code>order edu2, last</code></p><p>移动变量 move</p><p>替换原变量的取值 replace     </p><p><code>replace sex=.  if sex==9</code></p><h2 id="Continuation-Lines"><a href="#Continuation-Lines" class="headerlink" title="Continuation Lines"></a>Continuation Lines</h2><p>When you are typing on the command window a command can be as long as needed. In a do-file you will probably want to break long commands into lines to improve readability. To indicate to Stata that a command continues on the next line you use ///, which says everything else to the end of the line is a comment and the command itself continues on the next line. For example you could write:</p><p><code>graph twoway (scatter lexp loggnppc) ///   (lfit lexp loggnppc) Old</code><br>hands might write</p><p><code>graph twoway (scatter lexp loggnppc) /*    (lfit lexp loggnppc)   */</code> </p><p> which “comments out” the end of the line.</p><h2 id="在stata中加入时间"><a href="#在stata中加入时间" class="headerlink" title="在stata中加入时间"></a>在stata中加入时间</h2><p>复制时间后，<br><code>destring date, replace ignore(&quot;-&quot;)</code><br>变成201206格式即可 加入时间那一列的名称叫做TIME<br>命令tesset : Declare data to be time-series data<br>tesset TIME 就把数据转换为时间序列的了<br>gen t= _n 把数据从1开始排序到最后<br>tsset t<br>就没有gaps的问题了</p><p>回归之后显示结果：<br><code>disp e(N)</code>显示数据量 </p>]]></content>
      
      <categories>
          
          <category> develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stata </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Latex Learning</title>
      <link href="/2015/12/20/Latex-Learning/"/>
      <url>/2015/12/20/Latex-Learning/</url>
      <content type="html"><![CDATA[<h2 id="打开mikTe-安装宏包"><a href="#打开mikTe-安装宏包" class="headerlink" title="打开mikTe 安装宏包"></a>打开mikTe 安装宏包</h2><p>1、运行 cmd;<br>2、输入 mpm命令，打开MikTex Package Manager界面；<br>3、进入Repository菜单，选择Change Package Repository…命令;<br>4、从Change Package Repository窗口中选择Packages shall be installed from the Internet, 点击下一步；<br>5、选择一个可连接的地址（第一可用）进行同步；<br>6、等待数据库同步完成；<br>7、同步完成后，在Name中输入algorithm并确定；<br>8、鼠标右击algorithms记录选择，Install选项即可。（此处为已安装状态，所以为灰色状态。</p><a id="more"></a><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>数学公式必须在数学模式下使用，即数学公式必须放在数学环境下，数学模式可以有很多种表示形式，不同的数学模式的显示效果是不同的，ams(美国数学学会)还特别定义了一组数学模式宏包，可在导言区调用该宏包，然后在正文中使用该宏包的命令，关于数学模式和ams的讨论放在后面进行，这里主要说明Latex的基本数学公式命令。一些常见的数学环境包括<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\[数学公式\]、</span><br><span class="line">$数学公式$、</span><br><span class="line">$$数学公式$$、</span><br><span class="line">\begin&#123;equation&#125;数学公式\end&#123;equation&#125;</span><br></pre></td></tr></table></figure></p><p>等等。以下是一些基本的数学公式命令。</p><p>A．角标(上下标)</p><pre><code> 上标命令：^{} 下标命令：_{}</code></pre><p>上下标命令放在需要插入上下标的地方，花括弧内为上下标内容，当角标为单个字符时，可以不用花括号；如果角标为多字符或多层次，必须用花括号.<br>举例：<br><code>x^2,   x_1^2,   x^{(n)}_{22},   ^{16}O^{2-}_{32},   x^{y^{z^a}},   x^{y_z}</code></p><p>分别显示为：</p><script type="math/tex; mode=display">x^2,   x_1^2,   x^{(n)}_{22},   ^{16}O^{2-}_{32},   x^{y^{z^a}},   x^{y_z}</script><p>如果使用文字作为角标，首先要把文字放在\mbox{}文字模式中，另外要加上改变文字大小的命令，例如：</p><pre><code>   \partial f_{\mbox{\tiny 极大值}} </code></pre><p>如果不加改变大小的命令，则输出为：[Latex学习笔记]数学公式基本命令 - 激进的猫 - 激进的猫</p><p>当角标位置看起来不明显时，可以强制改变角标大小或层次，举例如下：</p><pre><code>    y_N,   y_{_N},    y_{_{\scriptstyle N}}</code></pre><p>第一种为正常输出，但输出效果不明显；第二种将一级角标改为二级角标，字体也自动变为二级角标字体；<br>第三种将一级角标改为二级角标，但强制将字体改为一级角标字体。</p><p>B．分式</p><p>分式命令：\frac{分子}{分母}。</p><p>对于行内短分式，可用斜线/输入，例如：(x+y)/2</p><p>举例：</p><pre><code>   行内分式 \(\frac{x+y}{y+z} \)       行间分式 \[\frac{x+y}{y+z}\]     </code></pre><p>上面的例子表明行内分式字体比行间分式字体小，因为行内分式使用的是角标字体。可以人工改变行内分式的字体大小，<br>例如这个行内公式$\displaystyle\frac{x+y}{y+z}$ (显示为：[Latex学习笔记]数学公式基本命令 - 激进的猫 - 激进的猫)的大小和行间公式是一样的。</p><p>连分式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;displaymath&#125;</span><br><span class="line">        x_0+\frac&#123;1&#125;&#123;x_1+\frac&#123;1&#125;&#123;x_2+\frac&#123;1&#125;&#123;x_3+\frac&#123;1&#125;&#123;x_4&#125;&#125;&#125;&#125;</span><br><span class="line">\end&#123;displaymath&#125;</span><br></pre></td></tr></table></figure><p>可以通过强制改变字体大小使得分子分母字体大小一致，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\newcommand&#123;\FS&#125;[2]&#123;\displaystyle\frac&#123;#1&#125;&#123;#2&#125;&#125;</span><br><span class="line">\begin&#123;displaymath&#125;</span><br><span class="line">x_0+\FS&#123;1&#125;&#123;x_1+\FS&#123;1&#125;&#123;x_2+\FS&#123;1&#125;&#123;x_3+\FS&#123;1&#125;&#123;x_4&#125;&#125;&#125;&#125;</span><br><span class="line">\end&#123;displaymath&#125;</span><br></pre></td></tr></table></figure></p><p>其中第一行命令定义了一个新的分式命令，规定每个调用该命令的分式都按\displaystyle的格式显示分式；分式放在displaymath环境中。<br>分数线长度值是预设为分子分母的最大长度，如果想要使分数线再长一点，可以在分子或分母两端添加一些间隔，例如：<script type="math/tex">\frac{1}{2},  \frac{\;1\;}{\;2\;}</script>(显示为：$\frac{1}{2},  \frac{\;1\;}{\;2\;}$，第一个分式是正常的分式，第二个分式在分子(分母)前后都加入个一个间隔命令\;)</p><p>C．根式</p><p>二次根式命令：\sqrt{表达式} ．如果表达式是单个字符，则不需要花括号，但需要在字符和sqrt间加入一个空格。<br>n次根式命令：\sqrt[n]{表达式}</p><p>被开方表达式字符高度不一致时，根号上面的横线可能不在同一条直线上；为了使横线在同一直线上，可以在被开方表达式中插入一个只有高度没有宽度的数学支柱(\mathstrut)，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[ \sqrt&#123;a&#125;+\sqrt&#123;b&#125;+\sqrt&#123;c&#125;, \qquad       \sqrt&#123;\mathstrut a&#125;+\sqrt&#123;\mathstrut b&#125;+\sqrt&#123;\mathstrut c&#125; \]</span><br></pre></td></tr></table></figure></p><p>当被开方表达式较高时，开方次数的位置显得略低，解决办法为：将开方次数改为上标，并拉近与根式的水平距离，即将命令中的[n]改为<a href="^表示上标，间隔命令\!表示缩小间隔">^n!</a>，例如：</p><pre><code>   \begin{eqnarray}        \sqrt{1+\sqrt[p]{1+\sqrt[q]{1+a}}}\\        \sqrt{1+\sqrt[^p\!]{1+\sqrt[^q\!]{1+a}}}   \end{eqnarray}</code></pre><p>显示为<br> \begin{eqnarray}<br>            \sqrt{1+\sqrt[p]{1+\sqrt[q]{1+a}}}\\<br>            \sqrt{1+\sqrt<sup><a href="#fn_p\!" id="reffn_p\!">p\!</a></sup>{1+\sqrt<sup><a href="#fn_q\!" id="reffn_q\!">q\!</a></sup>{1+a}}}<br>       \end{eqnarray}<br>       (注意比较两个根式的开方次数的显示位置)</p><p> 命令\surd生成根号上没有横线的根式，例如：\surd{x+y+z}显示为$\surd{x+y+z}$</p><p>D ．求和与积分</p><pre><code>求和命令：\sum_{k=1\}^n     (求和项紧随其后，下同)积分命令：\int_a^b</code></pre><p>例如：无穷级数<script type="math/tex">\sum_{k=1}^\infty \frac{x^n}{n!}</script> (显示为：$\sum_{k=1}^\infty \frac{x^n}{n!}$ )可化为积分<code>$\int_0^\infty e^x$</code>(显示为：$\int_0^\infty e^x$ ), 也即<br><code>\[\sum_{k=1}^\infty \frac{x^n}{n!} =\int_0 ^\infty e^x\]</code>   (显示为：$\sum_{k=1}^\infty \frac{x^n}{n!} =\int_0 ^\infty e^x$)</p><p>改变上下限位置的命令：\limits(强制上下限在上、下侧) 和 \nolimits(强制上下限在右侧)</p><p>行内公式上下限在积分、求和符号上侧：\sum\limits_{k=1}^n 和 \int\limits_a^b，例如$\sum\limits_{n=0}^\infty x^n$ 或 $\int\limits_a^b$  (分别显示为：[Latex学习笔记]数学公式基本命令 - 激进的猫 - 激进的猫、[Latex学习笔记]数学公式基本命令 - 激进的猫 - 激进的猫)</p><p>行间公式上下限在积分、求和符号右侧：[ \sum\nolimits_{k=1}^n ]，例如：</p><p><code>\[\sum\nolimits_{k=1}^\infty x^n=\frac{1}{1+x}\]</code>         (显示为：$[\sum\nolimits_{k=1}^\infty x^n=\frac{1}{1+x}]$ )</p><p> E．下划线、上划线等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上划线命令：\overline&#123;公式&#125;</span><br><span class="line">下划线命令：\underline&#123;公式&#125;</span><br></pre></td></tr></table></figure></p><p>例如：<script type="math/tex">\overline{\overline{a^2}+\underline{ab}+\bar{a}^3}</script>       (显示为：$\overline{\overline{a^2}+\underline{ab}+\bar{a}^3}$ )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上花括弧命令：\overbrace&#123;公式&#125;^&#123;说明&#125;</span><br><span class="line">下花括弧命令：\underbrace&#123;公式&#125;_&#123;说明&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><p><code>\[ \underbrace{a+\overbrace{b+\dots+b}^{m\mbox{\scriptsize 个}}+c}_{20\mbox{\scriptsize 个}} \]</code>    </p><script type="math/tex; mode=display">\underbrace{a+\overbrace{b+\dots+b}^{m\mbox{\scriptsize 个}}+c}_{20\mbox{\scriptsize 个}}</script><p>F ． 数学重音符号</p><p>以 a 为例，；如果字母i或j带有重音，字母i、j应替换为\imath、\jmath<br>$\imath、\jmath $<br>G． 堆积符号</p><p>符号堆积命令：\stacrel{上位符号}{基位符号}                        说明：基位符号大，上位符号小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;上位公式 \atop 下位公式&#125;        说明：上下符号一样大</span><br><span class="line">&#123;上位公式 \choose 下位公式\&#125;  说明：上下符号一样大；上下符号被包括在圆括弧内</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;eqnarray*&#125;</span><br><span class="line">               \vec&#123;x&#125;\stackrel&#123;\mathrm&#123;def&#125;&#125;&#123;=&#125;&#123;x_1,\dots,x_n&#125;\\</span><br><span class="line">               &#123;n+1 \choose k&#125;=&#123;n \choose k&#125;+&#123;n \choose k-1&#125;\\</span><br><span class="line">               \sum_&#123;k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n&#125;A_&#123;k_0&#125;A_&#123;k_1&#125;\cdots</span><br><span class="line">          \end&#123;eqnarray*&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码显示为：</p><p> \begin{eqnarray<em>}<br>                \vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}\\<br>                {n+1 \choose k}={n \choose k}+{n \choose k-1}\\<br>                \sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots<br>           \end{eqnarray</em>}</p><p>H． 定界符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\[</span><br><span class="line">()</span><br><span class="line">\big(\big)</span><br><span class="line">\Big(\Big)</span><br><span class="line">\bigg(\bigg)</span><br><span class="line">\Bigg(\Bigg)</span><br><span class="line">\]</span><br></pre></td></tr></table></figure></p><p>以上代码显示为：</p><script type="math/tex; mode=display"> () \big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</script><p>自适应放大命令：\left 和 \right；本命令分别放在左、右定界符前，自动随着公式内容大小调整符号大小<br>$\left(122131231 \right)$</p>]]></content>
      
      <categories>
          
          <category> develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Research Proposal Guide</title>
      <link href="/2015/12/13/research-proposal-guide/"/>
      <url>/2015/12/13/research-proposal-guide/</url>
      <content type="html"><![CDATA[<p>cite from others: <a href="http://www.library.illinois.edu/learn/research/proposal.html" target="_blank" rel="noopener">http://www.library.illinois.edu/learn/research/proposal.html</a></p><p>Guidelines on writing a research proposal</p><p>by Matthew McGranaghan<br>This is a work in progress, intended to organize my thoughts on the process of formulating a proposal. If you have any thoughts on the contents, or on the notion of making this available to students, please share them with me. Thanks.</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This is a guide to writing M.A. research proposals. The same principles apply to dissertation proposals and to proposals to most funding agencies. It includes a model outline, but advisor, committee and funding agency expectations vary and your proposal will be a variation on this basic theme. Use these guidelines as a point of departure for discussions with your advisor. They may serve as a straw-man against which to build your understanding both of your project and of proposal writing.</p><h2 id="Proposal-Writing"><a href="#Proposal-Writing" class="headerlink" title="Proposal Writing"></a>Proposal Writing</h2><p>Proposal writing is important to your pursuit of a graduate degree. The proposal is, in effect, an intellectual scholastic (not legal) contract between you and your committee. It specifies what you will do, how you will do it, and how you will interpret the results. In specifying what will be done it also gives criteria for determining whether it is done. In approving the proposal, your committee gives their best judgment that the approach to the research is reasonable and likely to yield the anticipated results. They are implicitly agreeing that they will accept the result as adequate for the purpose of granting a degree. (Of course you will have to write the thesis in acceptable form, and you probably will discover things in the course of your research that were not anticipated but which should be addressed in your thesis, but the minimum core intellectual contribution of your thesis will be set by the proposal.) Both parties benefit from an agreed upon plan.</p><p>The objective in writing a proposal is to describe what you will do, why it should be done, how you will do it and what you expect will result. Being clear about these things from the beginning will help you complete your thesis in a timely fashion. A vague, weak or fuzzy proposal can lead to a long, painful, and often unsuccessful thesis writing exercise. A clean, well thought-out, proposal forms the backbone for the thesis itself. The structures are identical and through the miracle of word-processing, your proposal will probably become your thesis.</p><p>A good thesis proposal hinges on a good idea. Once you have a good idea, you can draft the proposal in an evening. Getting a good idea hinges on familiarity with the topic. This assumes a longer preparatory period of reading, observation, discussion, and incubation. Read everything that you can in your area of interest. Figure out what are the important and missing parts of our understanding. Figure out how to build/discover those pieces. Live and breathe the topic. Talk about it with anyone who is interested. Then just write the important parts as the proposal. Filling in the things that we do not know and that will help us know more: that is what research is all about.</p><p>Proposals help you estimate the size of a project. Don’t make the project too big. Our MA program statement used to say that a thesis is equivalent to a published paper in scope. These days, sixty double spaced pages, with figures, tables and bibliography, would be a long paper. Your proposal will be shorter, perhaps five pages and certainly no more than fifteen pages. (For perspective, the NSF limits the length of proposal narratives to 15 pages, even when the request might be for multiple hundreds of thousands of dollars.) The merit of the proposal counts, not the weight. Shoot for five pithy pages that indicate to a relatively well-informed audience that you know the topic and how its logic hangs together, rather than fifteen or twenty pages that indicate that you have read a lot of things but not yet boiled it down to a set of prioritized linked questions.</p><h2 id="Different-Theses-Similar-Proposals"><a href="#Different-Theses-Similar-Proposals" class="headerlink" title="Different Theses, Similar Proposals"></a>Different Theses, Similar Proposals</h2><p>This guide includes an outline that looks like a “fill-in the blanks model” and, while in the abstract all proposals are similar, each proposal will have its own particular variation on the basic theme. Each research project is different and each needs a specifically tailored proposal to bring it into focus. Different advisors, committees and agencies have different expectations and you should find out what these are as early as possible; ask your advisor for advice on this. Further, different types of thesis require slightly different proposals. What style of work is published in your sub-discipline?</p><p>Characterizing theses is difficult. Some theses are “straight science”. Some are essentially opinion pieces. Some are policy oriented. In the end, they may well all be interpretations of observations, and differentiated by the rules that constrain the interpretation. (Different advisors will have different preferences about the rules, the meta-discourse, in which we all work.)</p><p>In the abstract all proposals are very similar. They need to show a reasonably informed reader why a particular topic is important to address and how you will do it. To that end, a proposal needs to show how your work fits into what is already known about the topic and what new contribution your work will make. Specify the question that your research will answer, establish why it is a significant question, show how you are going to answer the question, and indicate what you expect we will learn. The proposal should situate the work in the literature, it should show why this is an (if not the most) important question to answer in the field, and convince your committee (the skeptical readers that they are) that your approach will in fact result in an answer to the question.</p><p>Theses which address research questions that can be answered by making plan-able observations (and applying hypothesis testing or model selection techniques) are preferred and perhaps the easiest to write. Because they address well-bounded topics, they can be very tight, but they do require more planning on the front end. Theses which are largely based on synthesis of observations, rumination, speculation, and opinion formation are harder to write, and usually not as convincing, often because they address questions which are not well-bounded and essentially unanswerable. (One ‘old saw’ about research in the social sciences is that the finding is always: “some do and some don’t”. Try to avoid such insight-less findings; finding “who do and who don’t” is better.) One problem with this type of project is that it is often impossible to tell when you are “done”. Another problem is that the nature of argument for a position rather than the reasoned rejection of alternatives to it encourages shepherding a favored notion rather than converging more directly toward a truth.   (See Chamberlain’s and Platt’s articles). A good proposal helps one see and avoid these problems.</p><p>Literature review-based theses involve collection of information from the literature, distillation of it, and coming up with new insight on an issue. One problem with this type of research is that you might find the perfect succinct answer to your question on the night before (or after) you turn in the final draft —- in someone else’s work. This certainly can knock the wind out of your sails. (But note that even a straight-ahead science thesis can have the problem of discovering, late in the game, that the work you have done or are doing has already been done; this is where familiarity with the relevant literature by both yourself and your committee members is important.)</p><h2 id="A-Couple-of-Models-for-Proposals"><a href="#A-Couple-of-Models-for-Proposals" class="headerlink" title="A Couple of Models for Proposals"></a>A Couple of Models for Proposals</h2><h3 id="A-Two-Page-Preliminary-Proposal-Model"><a href="#A-Two-Page-Preliminary-Proposal-Model" class="headerlink" title="A Two Page (Preliminary Proposal) Model"></a>A Two Page (Preliminary Proposal) Model</h3><p>Here is a model for a very brief (maybe five paragraph) proposal that you might use to interest faculty in sitting on your committee. People who are not yet hooked may especially appreciate its brevity.</p><p>In the first paragraph, the first sentence identifies the general topic area. The second sentence gives the research question, and the third sentence establishes its significance.</p><p>The next couple of paragraphs gives the larger historical perspective on the topic. Essentially list the major schools of thought on the topic and very briefly review the literature in the area with its major findings. Who has written on the topic and what have they found? Allocate about a sentence per important person or finding. Include any preliminary findings you have, and indicate what open questions are left. Restate your question in this context, showing how it fits into this larger picture.</p><p>The next paragraph describes your methodology. It tells how will you approach the question, what you will need to do it.</p><p>The final paragraph outlines your expected results, how you will interpret them, and how they will fit into the our larger understanding i.e., ‘the literature’.</p><h3 id="The-Longer-Standard-Model"><a href="#The-Longer-Standard-Model" class="headerlink" title="The (Longer) Standard Model"></a>The (Longer) Standard Model</h3><p>The two outlines below are intended to show both what are the standard parts of a proposal and of a science paper. Notice that the only real difference is that you change “expected results” to “results” in the paper, and usually leave the budget out, of the paper.</p><h4 id="A-Basic-Proposal-Outline"><a href="#A-Basic-Proposal-Outline" class="headerlink" title="A Basic Proposal Outline:"></a>A Basic Proposal Outline:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Introduction</span><br><span class="line">  Topic area </span><br><span class="line">  Research question </span><br><span class="line">  Significance to knowledge</span><br><span class="line">Literature review</span><br><span class="line">  Previous research</span><br><span class="line">   others &amp; yours </span><br><span class="line">  Interlocking findings and Unanswered questions</span><br><span class="line">  Your preliminary work on the topic</span><br><span class="line">  The remaining questions and inter-locking logic</span><br><span class="line">  Reprise of your research question(s) in this context</span><br><span class="line">Methodology</span><br><span class="line">  Approach </span><br><span class="line">  Data needs</span><br><span class="line">  Analytic techniques</span><br><span class="line">  Plan for interpreting results</span><br><span class="line">Expected results</span><br><span class="line">Budget</span><br><span class="line">Bibliography (or References)</span><br></pre></td></tr></table></figure><h4 id="A-Basic-Thesis-Outline"><a href="#A-Basic-Thesis-Outline" class="headerlink" title="A Basic Thesis Outline"></a>A Basic Thesis Outline</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Introduction</span><br><span class="line">  Topic area </span><br><span class="line">  Research question  (finding?)</span><br><span class="line">  Significance to knowledge</span><br><span class="line">Literature review</span><br><span class="line">  Previous research</span><br><span class="line">   others &amp; yours </span><br><span class="line">  Interlocking findings and Unanswered questions</span><br><span class="line">  Your preliminary work on the topic</span><br><span class="line">  The remaining questions and inter-locking logic</span><br><span class="line">  Reprise of your research question(s) in this context</span><br><span class="line">Methodology</span><br><span class="line">  Approach </span><br><span class="line">  Data needs</span><br><span class="line">  Analytic techniques</span><br><span class="line">  Plan for interpreting results</span><br><span class="line">Results</span><br><span class="line">Discussion and Conclusions</span><br><span class="line">Bibliography</span><br></pre></td></tr></table></figure><h4 id="Another-outline-maybe-from-Gary-Fuller"><a href="#Another-outline-maybe-from-Gary-Fuller" class="headerlink" title="Another outline (maybe from Gary Fuller?)."></a>Another outline (maybe from Gary Fuller?).</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Introduction</span><br><span class="line">  Topic area </span><br><span class="line">  Research Question and its significance to knowledge</span><br><span class="line">Literature review</span><br><span class="line">  Previous research</span><br><span class="line">  Your preliminary work on the topic</span><br><span class="line">  The remaining questions and their inter-locking logic</span><br><span class="line">  Reprise of your resulting question in this context</span><br><span class="line">Methodology</span><br><span class="line">  Approach to answering the question</span><br><span class="line">  Data needs</span><br><span class="line">  Analytic techniques</span><br><span class="line">  Plan for interpreting results</span><br><span class="line">Budget</span><br><span class="line">Expected results</span><br><span class="line">Bibliography / References</span><br></pre></td></tr></table></figure><p>Each of these outlines is very similar. You probably see already that the proposal’s organization lends itself to word-processing right into the final thesis. It also makes it easy for readers to find relevant parts more easily. The section below goes into slightly more detail on what each of the points in the outline is and does.<br>The Sections of the Proposal</p><h4 id="The-Introduction"><a href="#The-Introduction" class="headerlink" title="The Introduction"></a>The Introduction</h4><h5 id="Topic-Area"><a href="#Topic-Area" class="headerlink" title="Topic Area"></a>Topic Area</h5><p>A good title will clue the reader into the topic but it can not tell the whole story. Follow the title with a strong introduction. The introduction provides a brief overview that tells a fairly well informed (but perhaps non-specialist) reader what the proposal is about. It might be as short as a single page, but it should be very clearly written, and it should let one assess whether the research is relevant to their own. With luck it will hook the reader’s interest.</p><p>What is your proposal about? Setting the topical area is a start but you need more, and quickly. Get specific about what your research will address.</p><p><strong>Question</strong></p><p>Once the topic is established, come right to the point. What are you doing? What specific issue or question will your work address? Very briefly (this is still the introduction) say how you will approach the work. What will we learn from your work?</p><p><strong>Significance</strong></p><p>Why is this work important? Show why this is it important to answer this question. What are the implications of doing it? How does it link to other knowledge? How does it stand to inform policy making? This should show how this project is significant to our body of knowledge. Why is it important to our understanding of the world? It should establish why I would want to read on. It should also tell me why I would want to support, or fund, the project.</p><h5 id="Literature-Review"><a href="#Literature-Review" class="headerlink" title="Literature Review"></a>Literature Review</h5><p><strong>State of our knowledge</strong></p><p>The purpose of the literature review is to situate your research in the context of what is already known about a topic. It need not be exhaustive, it needs to show how your work will benefit the whole. It should provide the theoretical basis for your work, show what has been done in the area by others, and set the stage for your work.</p><p>In a literature review you should give the reader enough ties to the literature that they feel confident that you have found, read, and assimilated the literature in the field. It might do well to include a paragraph that summarizes each article’s contribution, and a bit of ‘mortar’ to hold the edifice together, perhaps these come from your notes while reading the material. The flow should probably move from the more general to the more focused studies, or perhaps use historical progression to develop the story. It need not be exhaustive; relevance is ‘key’.</p><p><strong>Outstanding questions</strong></p><p>This is where you present the holes in the knowledge that need to be plugged, and by doing so, situate your work. It is the place where you establish that your work will fit in and be significant to the discipline. This can be made easier if there is literature that comes out and says “Hey, this is a topic that needs to be treated! What is the answer to this question?” and you will sometimes see this type of piece in the literature. Perhaps there is a reason to read old AAG presidential addresses.</p><p><strong>Research Questions in Detail</strong></p><p>Your work to date<br>Tell what you have done so far. It might report preliminary studies that you have conducted to establish the feasibility of your research. It should give a sense that you are in a position to add to the body of knowledge.<br>Methodology</p><h5 id="Overview-of-approach"><a href="#Overview-of-approach" class="headerlink" title="Overview of approach"></a>Overview of approach</h5><p>This section should make clear to the reader the way that you intend to approach the research question and the techniques and logic that you will use to address it.</p><p><strong>Data Collection</strong></p><p>This might include the field site description, a description of the instruments you will use, and particularly the data that you anticipate collecting. You may need to comment on site and resource accessibility in the time frame and budget that you have available, to demonstrate feasibility, but the emphasis in this section should be to fully describe specifically what data you will be using in your study. Part of the purpose of doing this is to detect flaws in the plan before they become problems in the research.</p><p><strong>Data Analysis</strong></p><p>This should explain in some detail how you will manipulate the data that you assembled to get at the information that you will use to answer your question. It will include the statistical or other techniques and the tools that you will use in processing the data. It probably should also include an indication of the range of outcomes that you could reasonably expect from your observations.</p><p><strong>Interpretation</strong></p><p>In this section you should indicate how the anticipated outcomes will be interpreted to answer the research question. It is extremely beneficial to anticipate the range of outcomes from your analysis, and for each know what it will mean in terms of the answer to your question.<br>Expected Results</p><p>This section should give a good indication of what you expect to get out of the research. It should join the data analysis and possible outcomes to the theory and questions that you have raised. It will be a good place to summarize the significance of the work.<br>It is often useful from the very beginning of formulating your work to write one page for this section to focus your reasoning as you build the rest of the proposal.<br>Bibliography</p><p>This is the list of the relevant works. Some advisors like exhaustive lists. I think that the Graduate Division specifies that you call it “Bibliography”. Others like to see only the literature which you actually cite. Most fall in between: there is no reason to cite irrelevant literature but it may be useful to keep track of it even if only to say that it was examined and found to be irrelevant.<br>Use a standard format. Order the references alphabetically, and use “flag” paragraphs as per the University’s Guidelines.</p><h4 id="Tips-and-Tricks"><a href="#Tips-and-Tricks" class="headerlink" title="Tips and Tricks"></a>Tips and Tricks</h4><p>Read. Read everything you can find in your area of interest. Read. Read. Read. Take notes, and talk to your advisor about the topic. If your advisor won’t talk to you, find another one or rely on ‘the net’ for intellectual interaction. Email has the advantage of forcing you to get your thoughts into written words that can be refined, edited and improved. It also gets time stamped records of when you submitted what to your advisor and how long it took to get a response.</p><p>Write about the topic a lot, and don’t be afraid to tear up (delete) passages that just don’t work. Often you can re-think and re-type faster than than you can edit your way out of a hopeless mess. The advantage is in the re-thinking.<br>Very early on, generate the research question, critical observation, interpretations of the possible outcomes, and the expected results. These are the core of the project and will help focus your reading and thinking. Modify them as needed as your understanding increases.</p><p>Use some systematic way of recording notes and bibliographic information from the very beginning. The classic approach is a deck of index cards. You can sort, regroup, layout spatial arrangements and work on the beach. Possibly a slight improvement is to use a word-processor file that contains bibliographic reference information and notes, quotes etc. that you take from the source. This can be sorted, searched, diced and sliced in your familiar word-processor. You may even print the index cards from the word-processor if you like the ability to physically re-arrange things.</p><p>Even better for some, is to use specialized bibliographic database software. Papyrus, EndNote, and other packages are available for PCs and MacIntoshs. The bib-refer and bibTex software on UNIX computers are also very handy and have the advantage of working with plain ASCII text files (no need to worry about getting at your information when the wordprocessor is several generations along). All of these tools link to various word-processors to make constructing and formating your final bibliography easier, but you won’t do that many times anyway. If they help you organize your notes and thinking, that is the benefit.</p><p>Another pointer is to keep in mind from the outset that this project is neither the last nor the greatest thing you will do in your life. It is just one step along the way. Get it done and get on with the next one. The length to shoot for is “equivalent to a published paper”, sixty pages of double spaced text, plus figures tables, table of contents, references, etc. is probably all you need. In practice, most theses try to do too much and become too long. Cover your topic, but don’t confuse it with too many loosely relevant side lines.<br>This is not complete and needs a little rearranging.<br>The balance between Introduction and Literature Review needs to be thought out. The reader will want to be able to figure out whether to read the proposal. The literature review should be sufficiently inclusive that the reader can tell where the bounds of knowledge lie. It should also show that the proposer knows what has been done in the field (and the methods used).</p><p>The balance may change between the proposal and the thesis. It is common, although not really desirable, for theses to make reference to every slightly related piece of work that can be found. This is not necessary. Refer to the work that actually is linked to your study, don’t go too far afield (unless your committee is adamant that you do ;-).<br>Useful References:</p><ul><li>Krathwohl, David R. 1988. How to Prepare a Research Proposal: Guidelines for Funding and Dissertations in the Social and Behavioral Sciences . Syracuse University Press.<br>  Recent National Science Foundations Guidelines for Research Proposals can be found on the NSF website, www.nsf.gov.</li><li>Chamberlain, T.C. “The Method of Multiple Working Hypotheses”, reprinted in Science, Vol 148, pp754-759. 7 May 1965.</li><li>Platt, J. “Strong Inference” in Science, Number 3642, pp. 347-353, 16 October 1964.</li><li>Strunk and White The Elements of Style</li><li>Turabian, Kate. 1955 (or a more recent edition) A Manual for Writers of Term Papers, Theses and Dissertations, University of Chicago Press.</li><li>Mortimer J. Adler and Charles Van Doren. 1940 (‘67, ‘72 etc). How to Read a Book. Simon and Schuster Publishers. New York City, NY.</li></ul>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BMA Introduction</title>
      <link href="/2015/10/25/BMA-Intro/"/>
      <url>/2015/10/25/BMA-Intro/</url>
      <content type="html"><![CDATA[<h1 id="Bayesian-Model-Averaging"><a href="#Bayesian-Model-Averaging" class="headerlink" title="Bayesian Model Averaging"></a>Bayesian Model Averaging</h1><h2 id="Basic-Ideas"><a href="#Basic-Ideas" class="headerlink" title="Basic Ideas"></a>Basic Ideas</h2><p>Assume we want to investigate some problem by statistical method, and we have data D. several possible statistical models are $M_1$, $M_2$…The number of models could be quite large. For example, if we consider only regression models but are unsure about which of $p$ possible predictors to include, there could be as many as $2^p$. BMA uses Bayesian statistics to select possible candidate predictors and help use construct the right model.</p><a id="more"></a><h2 id="Methology-Introduction"><a href="#Methology-Introduction" class="headerlink" title="Methology Introduction"></a>Methology Introduction</h2><p>consider the unknown quantity of interest $\Delta$ and observed data $D$. we have possible models,$M_1$, $M_2$…$M_k$ , to do the estimation and forecasting. Then by a simple application of the<br>law of total probability, the BMA posterior distribution of $\Delta$ is</p><script type="math/tex; mode=display">p(\Delta | D)=\sum\limits_{k = 1}^K {p(\Delta |D,M_k)p(M_k|D)} \ \ (1)</script><p>where $p(\Delta |D,M_k)$ is the posterior distribution of $\Delta$ given the model $M_k$, and $p(M_k|D)$ is the posterior probability that $M_k$ is the correct model, given that one of the models considered is correct.  Thus the BMA posterior distribution of $\Delta$ is a weighted average of the posterior distributions of $\Delta$ under each of the models, weighted by their posterior model probabilities.(take the above equation as a weighted average case). </p><p>note that $p(\Delta |D,M_k)$ and $p(M_k|D)$ can be probability density functions, probability mass functions, or cumulative distribution functions.</p><p>The posterior model probability of $M_k$ is given by </p><script type="math/tex; mode=display">p(M_k|D) = \frac{p(D| M_k)p( M_k)} { \sum \limits_{l = 1}^K {p(D| M_l ) p(M_l)} }  (2)</script><p>$p(D| M_k)$ is the integrated likelihood of model $M_k$ , obtained by integrating (not maximizing)<br>over the unknown parameters</p><script type="math/tex; mode=display">p(D|M{k})  =  \int p(D|\theta{k},M{k})p(\theta{k}|M{k}){\rm d}\theta{k}=\int (likelihood \times prior)\ {\rm d}\theta_{k}</script><p>where $θ_k$ is the parameter of model $M_k$ and $p(D| \theta_k, M_k)$ is the likelihood of $\theta_k$ under model $M_k$ . The prior model probabilities are often taken to be equal, so they cancel in (2), but the BMA package allows other formulations also</p><h3 id="information-criterion"><a href="#information-criterion" class="headerlink" title="information criterion"></a>information criterion</h3><p>from the above (3), we see that the integrated likelihood $p(D| M_k )$ is a high dimensional integral that can be hard to calculate analytically. recalling the Maximum likelihood selection creteria, we found that $p(D| M_k )$ can be the simple and surprisingly accurate BIC approximation, which greatly simplify the model selection and calculation procedure </p><script type="math/tex; mode=display">2 \log p(D|M_{k})\approx2\log p(D|\tilde{\theta}_{k})-d_{k}\log(n)=-BIC_{k}</script><p>where $d_{k}=\dim(\theta_{k})$ is the number of independent parameters in $M_k $, and $\tilde{\theta}_k$ is the maximum likelihood estimator (equal to the ordinary least squares estimator for linear regression coefficients).</p><p>And for linear regression, BIC has the simple form: </p><script type="math/tex; mode=display">BIC_{k}=n\log(1-R_{k}^{2})+p_{k}\log{n}</script><p>up to an additive constant, where $R_k^2$ is the value of $R^2$ and $P_k$ is the number of regressors for the kth regression model.</p><p>eg: to illustrate what $\Delta$ is: </p><p>When interest focuses on a model parameter, say a regression parameter such as $\beta_1 $ , (1) can be applied with $\Delta =\beta_1$ . The BMA posterior mean of $\beta_1$ is just a weighted average of the posterior means of $\beta_1$ under each of the models:</p><script type="math/tex; mode=display">E[\beta_{1}|D]=\sum \hat{\beta}_{1} p(M_{k}|D)</script><p>which can be viewed as a model-averaged Bayesian point estimator. $\hat{\beta}_{1}$ is the posterior mean of $\beta_1$ under model $M_k$, and this can be approximated by the corresponding maximum likelihood estimator, $\hat{\beta}_{1}$ (Raftery, 1995).</p><p>For a survey and literature review of Bayesian model averaging, see Hoeting et al. (1999)</p><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><h3 id="Linear-REgression"><a href="#Linear-REgression" class="headerlink" title="Linear REgression"></a>Linear REgression</h3><p>we use the UScrime dataset on crime rates in 47 U.S. states in 1960 (Ehrlich, 1973); this is<br>available in the MASS library. There are 15 potential independent variables, all associated with crime rates in the literature. The last two, probability of imprisonment and average time spent in state prisons, were the predictor variables of interest in the original study, while the other 13 were control variables. All variables for which it makes sense were logarithmically transformed. The commands are:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">library</span>(BMA)</span><br><span class="line"><span class="keyword">library</span>(MASS)</span><br><span class="line">data(UScrime)</span><br><span class="line">x.crime&lt;- UScrime[,-<span class="number">16</span>]</span><br><span class="line">y.crime&lt;- log(UScrime[,<span class="number">16</span>])</span><br><span class="line">x.crime[,-<span class="number">2</span>]&lt;- log(x.crime[,-<span class="number">2</span>])</span><br><span class="line">crime.bicreg &lt;- bicreg(x.crime, y.crime)</span><br><span class="line">summary (crime.bicreg, digits=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"> plot (crime.bicreg,mfrow=c(<span class="number">4</span>,<span class="number">4</span>)) <span class="comment"># c(4,4) 意思是图形以4行4列共16个集体显示</span></span><br></pre></td></tr></table></figure><p>This summary yields Figure 1. (The default number of digits is 4, but this may be more than<br>needed.) The column headed “p!=0” shows the posterior probability that the variable is in the model (in %). The column headed “EV” shows the BMA posterior mean, and the column headed “SD” shows the<br>BMA posterior standard deviation for each variable. The following five columns show the parameter estimates for the best five models found, together with the numbers of variables they include, their $R^2$ values, their BIC values and their posterior model probabilities.</p><p><img src="/pic/bma-f1.png" alt="figure1"></p><p>Figure 2: BMA posterior distribution of the coefficient of the average time in prison variable in the<br>crime dataset. The <strong>spike at 0 shows the posterior probability that the variable is not in the model.</strong>(在0点的那条竖线的纵坐标值代表不在模型中的概率是多少) The curve is the model-averaged posterior density of the coefficient given that the variable is in the model, approximated by a finite mixture of normal distributions, one for each model that includes the variable. The density is scaled so that its <strong>maximum height is equal to the probability of the variable being in the model</strong>.</p><p><img src="/pic/bma-f2.png" alt="figure2"></p><h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><p>We illustrate BMA for logistic regression using the low birthweight data set of Hosmer and Lemeshow<br>(1989), available in the MASS library. The dataset consists of 189 babies, and the dependent variable<br>measures whether their weight was low at birth. There are 8 potential independent variables of which<br>two are categorical with more than two categories: race and the number of previous premature labors<br>(ptl). Figure 5 shows the output of the commands</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">library</span>(BMA)</span><br><span class="line"><span class="keyword">library</span>(MASS)</span><br><span class="line">data(birthwt)</span><br><span class="line">birthwt$race &lt;- as.factor (birthwt$race)</span><br><span class="line">birthwt$ptl &lt;- as.factor (birthwt$ptl)</span><br><span class="line">bwt.bic.glm &lt;- bic.glm (low ~ age + lwt</span><br><span class="line">+ race + smoke + ptl + ht + ui + ftv,</span><br><span class="line">data=birthwt, glm.family=<span class="string">"binomial"</span>)</span><br><span class="line">summary (bwt.bic.glm,conditional=<span class="literal">T</span>,digits=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>The function bic.glm in BMA can accept a formula, as here, instead of a design matrix and dependent variable (the same is true of bic.surv but not of bicreg)</p><h3 id="Survival-Analysis"><a href="#Survival-Analysis" class="headerlink" title="Survival Analysis"></a>Survival Analysis</h3><p>BMA can account for model uncertainty in survival analysis using the Cox proportional hazards model.We illustrate this using the well-known Primary Biliary Cirrhosis (PBC) data set of Fleming and Harrington (1991). This consists of 312 randomized patients with the disease, and the dependent variable was survival time; 187 of the records were censored. There were 15 potential predictors. The data set is available in the survival library, which is loaded when BMA is loaded.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(BMA)</span><br><span class="line"><span class="keyword">library</span>(MASS)</span><br><span class="line">data(pbc)</span><br><span class="line">x.pbc&lt;- pbc[<span class="number">1</span>:<span class="number">312</span>,]</span><br><span class="line">surv.t&lt;- x.pbc$time</span><br><span class="line">cens&lt;- x.pbc$status</span><br><span class="line">x.pbc&lt;- x.pbc[,-c(<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">19</span>)]</span><br><span class="line">x.pbc$bili&lt;- log(x.pbc$bili)</span><br><span class="line">x.pbc$alb&lt;- log(x.pbc$alb)</span><br><span class="line">x.pbc$protime&lt;- log(x.pbc$protime)</span><br><span class="line">x.pbc$copper&lt;- log(x.pbc$copper)</span><br><span class="line">x.pbc$sgot&lt;- log(x.pbc$sgot)</span><br><span class="line">pbc.bic.surv &lt;- bic.surv(x.pbc,surv.t,cens)</span><br><span class="line">summary(pbc.bic.surv,digits=<span class="number">2</span>)</span><br><span class="line">plot(pbc.bic.surv,mfrow=c(<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line">imageplot.bma(pbc.bic.surv)</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Based on R package BMA, we can easily deal with Bayesian model averaging for linear regression, generalized linear models, and survival or event history analysis using Cox proportional hazards models. More specific coding can refer to the manual of BMA. But based on the above knowledge, we are able to do some simple application by BMA.</p>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> econometrics </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Multi-process Introduction In Python</title>
      <link href="/2015/09/28/multi-process%20introduction%20in%20python/"/>
      <url>/2015/09/28/multi-process%20introduction%20in%20python/</url>
      <content type="html"><![CDATA[<h1 id="多进程介绍"><a href="#多进程介绍" class="headerlink" title="多进程介绍"></a>多进程介绍</h1><p>由于CPython实现中的GIL的限制，python中的多线程其实并不是真正的多线程，如果想要充分地使用多核CPU的资源，在python中大部分情况我们需要使用多进程。 这也许就是python中多进程类库如此简洁好用的原因所在。在python中可以向多线程一样简单地使用多进程。</p><a id="more"></a><h2 id="简单多进程程序"><a href="#简单多进程程序" class="headerlink" title="简单多进程程序"></a>简单多进程程序</h2><p>我们先看一个简单的例子，从而对多进程有一个直观的认识：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 子进程要执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_work</span><span class="params">(ID)</span>:</span></span><br><span class="line">    print(<span class="string">'Run process %s (%s)...'</span> % (ID, os.getpid()))</span><br><span class="line">    print(<span class="string">'process %s is done'</span> %(ID))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Parent process %s.'</span> % os.getpid()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Process will start.'</span></span><br><span class="line">    record=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    p = mp.Process(target=run_proc, args=(i,))</span><br><span class="line">    p.start()</span><br><span class="line">    record.append(p)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> record:</span><br><span class="line">        p.join()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Process end.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 结果为####</span></span><br><span class="line"></span><br><span class="line">Parent process <span class="number">6848.</span></span><br><span class="line">Process will start.</span><br><span class="line"></span><br><span class="line">Run process <span class="number">0</span> (<span class="number">4900</span>)...</span><br><span class="line">process <span class="number">0</span> <span class="keyword">is</span> done</span><br><span class="line">Run process <span class="number">1</span> (<span class="number">5720</span>)...</span><br><span class="line">process <span class="number">1</span> <span class="keyword">is</span> done</span><br><span class="line">Run process <span class="number">2</span> (<span class="number">6508</span>)...</span><br><span class="line">process <span class="number">2</span> <span class="keyword">is</span> done</span><br><span class="line"></span><br><span class="line">Process end.</span><br></pre></td></tr></table></figure><p>multiprocessing 是Python下面支持多进程的模块。进程任务的编类似线程操作，首先是定义一个工作函数(work_fun)，接着是对进程的声明，利用multiprocessing.Process([group[, target[, name[, args[, kargs]]]]])创建新的进程。其中重要的参数如下：</p><ul><li>target:   函数名</li><li>name:     进程名</li><li><p>args:     函数的参数<br>   kargs:       keywords参数<br>这里，target = work_fun , work_fun函数有ID这个参数，那么args=(i,) 只有一个参数的时候要加上,（tuple形式的参数传入）。声明好进程后，就可以启动进程运行了。启动进程采用 .start()函数。其余Process主要函数有：</p></li><li><p>run()  默认的run()函数调用target的函数，可以在子类中覆盖该函数，重写如何启动</p></li><li>start()  启动该进程</li><li>join([timeout])   父进程被停止，直到子进程被执行完毕。当timeout为None时没有超时，否则有超时。进程可以被join很多次，但不能join自己</li></ul><p><strong>注意：由于各种问题，python multiprocessing在windows下面编写的时候需要放在if <strong>name</strong>==’<strong>main</strong>‘: 下避免各种各样的错误 </strong></p><p>run函数时默认执行的，如果不是写子类(class）不需要关注。start函数目的在于启动进程，进程运行完work_fun后自动结束。但不同进程结束时间未必相同，这就需要最后来一个同步：.join()方法，保证子进程全部结束，主进程退出。程序运行完毕。这样一个简单的多进程运行框架就构建完毕了。</p><h3 id="主进程和子进程的关系"><a href="#主进程和子进程的关系" class="headerlink" title="主进程和子进程的关系"></a>主进程和子进程的关系</h3><p>一般来说，主进程运行结束后，子进程未必运行结束，这时候就存在选择，等待所有进程结束，或者主进程结束后子进程也随之结束。所以python多进程中设置了daemon方法，目的在于是否执行主进程结束后，子进程结束的命令。下面两个例子可以直观的告诉我们主进程和子进程的关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## daemon 为false ##</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(interval)</span>:</span></span><br><span class="line">    print(<span class="string">"work start:&#123;0&#125;"</span>.format(time.ctime()));</span><br><span class="line">    time.sleep(interval)</span><br><span class="line">    print(<span class="string">"work end:&#123;0&#125;"</span>.format(time.ctime()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p = multiprocessing.Process(target = worker, args = (<span class="number">1</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"end of the main process!"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 结果 ###</span></span><br><span class="line"><span class="comment">#end!</span></span><br><span class="line"><span class="comment">#work start:Tue Apr 21 21:29:10 2015</span></span><br><span class="line"><span class="comment">#work end:Tue Apr 21 21:29:13 2015</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(interval)</span>:</span></span><br><span class="line">    print(<span class="string">"work start:&#123;0&#125;"</span>.format(time.ctime()));</span><br><span class="line">    time.sleep(interval)</span><br><span class="line">    print(<span class="string">"work end:&#123;0&#125;"</span>.format(time.ctime()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p = multiprocessing.Process(target = worker, args = (<span class="number">3</span>,))</span><br><span class="line">    p.daemon = <span class="keyword">True</span></span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"end of the main process!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 结果 ###</span></span><br><span class="line"><span class="comment">#end!</span></span><br></pre></td></tr></table></figure><p>主进程结束，子进程随之结束是一个比较安全的做法，但很多时候子进程运行与主进程运行乃至各个子进程间运行速度不一致，如何让主进程最后结束呢？添加join命令即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(interval)</span>:</span></span><br><span class="line">    print(<span class="string">"work start:&#123;0&#125;"</span>.format(time.ctime()));</span><br><span class="line">    time.sleep(interval)</span><br><span class="line">    print(<span class="string">"work end:&#123;0&#125;"</span>.format(time.ctime()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p = multiprocessing.Process(target = worker, args = (<span class="number">3</span>,))</span><br><span class="line">    p.daemon = <span class="keyword">True</span></span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"end!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 结果 ###</span></span><br><span class="line"><span class="comment">#work start:Tue Apr 21 22:16:32 2015</span></span><br><span class="line"><span class="comment">#work end:Tue Apr 21 22:16:35 2015</span></span><br><span class="line"><span class="comment">#end!</span></span><br></pre></td></tr></table></figure><p>接下来将会介绍如何将多进程程序写成类的形式。</p><h2 id="转换为类"><a href="#转换为类" class="headerlink" title="转换为类"></a>转换为类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClockProcess</span><span class="params">(multiprocessing.Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, interval)</span>:</span></span><br><span class="line">        multiprocessing.Process.__init__(self)</span><br><span class="line">        self.interval = interval</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        n = <span class="number">5</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"the time is &#123;0&#125;"</span>.format(time.ctime()))</span><br><span class="line">            time.sleep(self.interval)</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = ClockProcess(<span class="number">3</span>)</span><br><span class="line">    p.start()  </span><br><span class="line"></span><br><span class="line"><span class="comment">#### 结果 ####</span></span><br><span class="line"><span class="comment">#the time is Sat Sep 26 11:10:38 2015</span></span><br><span class="line"><span class="comment">#the time is Sat Sep 26 11:10:41 2015</span></span><br><span class="line"><span class="comment">#the time is Sat Sep 26 11:10:44 2015</span></span><br><span class="line"><span class="comment">#the time is Sat Sep 26 11:10:47 2015</span></span><br><span class="line"><span class="comment">#the time is Sat Sep 26 11:10:50 2015</span></span><br></pre></td></tr></table></figure><p>从上面的例子中可以看到，编写子类，需要继承multiprocessing.Process，然后可以重写run函数进行编辑。接下来将会介绍如何利用进程池来操作</p><h2 id="进程的同步"><a href="#进程的同步" class="headerlink" title="进程的同步"></a>进程的同步</h2><p>进程间运行不可避免会涉及到同步问题，防止进程同时访问某个存储空间造成读写冲突是编写多进程程序一个一个核心问题。multiprocessing 提供了多种方法来帮助我们实现进程间的同步问题：</p><h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><p>利用“锁”（lock）方式来限制同时访问某个内存空间避免出错的方式是多进程操作中常用的同步方法。下面一个例子就是简单的使用lock来限制访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l</span><span class="params">(lock, num)</span>:</span>  </span><br><span class="line">    lock.acquire()  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hello Num: %s"</span> % (num)  </span><br><span class="line">    lock.release()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    lock = Lock()  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">20</span>):  </span><br><span class="line">        Process(target=l, args=(lock, num)).start()</span><br></pre></td></tr></table></figure><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>Semaphore用来控制对共享资源的访问数量，例如池的最大连接数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(s, i)</span>:</span></span><br><span class="line">    s.acquire()</span><br><span class="line">    print(multiprocessing.current_process().name + <span class="string">"acquire"</span>);</span><br><span class="line">    time.sleep(i)</span><br><span class="line">    print(multiprocessing.current_process().name + <span class="string">"release\n"</span>);</span><br><span class="line">    s.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = multiprocessing.Semaphore(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p = multiprocessing.Process(target = worker, args=(s, i*<span class="number">2</span>))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>Event用来实现进程间同步通信。同步的方式可以利用设定时间来等待同步，也可以利用set函数来进行同步<br>下面的例子说明了这一点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_event</span><span class="params">(e)</span>:</span></span><br><span class="line">    print(<span class="string">"wait_for_event: starting"</span>)</span><br><span class="line">    e.wait()</span><br><span class="line">    print(<span class="string">"wairt_for_event: e.is_set()-&gt;"</span> + str(e.is_set()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_event_timeout</span><span class="params">(e, t)</span>:</span></span><br><span class="line">    print(<span class="string">"wait_for_event_timeout:starting"</span>)</span><br><span class="line">    e.wait(t)</span><br><span class="line">    print(<span class="string">"wait_for_event_timeout:e.is_set-&gt;"</span> + str(e.is_set()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    e = multiprocessing.Event()</span><br><span class="line">    w1 = multiprocessing.Process(name = <span class="string">"block"</span>,</span><br><span class="line">            target = wait_for_event,</span><br><span class="line">            args = (e,))</span><br><span class="line"></span><br><span class="line">    w2 = multiprocessing.Process(name = <span class="string">"non-block"</span>,</span><br><span class="line">            target = wait_for_event_timeout,</span><br><span class="line">            args = (e, <span class="number">2</span>))</span><br><span class="line">    w1.start()</span><br><span class="line">    w2.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    e.set()</span><br><span class="line">    print(<span class="string">"main: event is set"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 结果 ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#wait_for_event: starting</span></span><br><span class="line"><span class="comment">#wait_for_event_timeout:starting</span></span><br><span class="line"><span class="comment">#wait_for_event_timeout:e.is_set-&gt;False</span></span><br><span class="line"><span class="comment">#main: event is set</span></span><br><span class="line"><span class="comment">#wairt_for_event: e.is_set()-&gt;True</span></span><br></pre></td></tr></table></figure><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>Pipe方法返回(conn1, conn2)代表一个管道的两个端。Pipe方法有duplex参数，如果duplex参数为True(默认值)，那么这个管道是全双工模式，也就是说conn1和conn2均可收发。duplex为False，conn1只负责接受消息，conn2只负责发送消息。</p><p>send和recv方法分别是发送和接受消息的方法。例如，在全双工模式下，可以调用conn1.send发送消息，conn1.recv接收消息。如果没有消息可接收，recv方法会一直阻塞。如果管道已经被关闭，那么recv方法会抛出EOFError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc1</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"send: %s"</span> %(i)</span><br><span class="line">            pipe.send(i)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc2</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"proc2 rev:"</span>, pipe.recv()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc3</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"PROC3 rev:"</span>, pipe.recv()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pipe = multiprocessing.Pipe()</span><br><span class="line">    p1 = multiprocessing.Process(target=proc1, args=(pipe[<span class="number">0</span>],))</span><br><span class="line">    p2 = multiprocessing.Process(target=proc2, args=(pipe[<span class="number">1</span>],))</span><br><span class="line">    <span class="comment">#p3 = multiprocessing.Process(target=proc3, args=(pipe[1],))</span></span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="comment">#p3.start()</span></span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    <span class="comment">#p3.join()</span></span><br></pre></td></tr></table></figure><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。put方法用以插入数据到队列中，put方法还有两个可选参数：blocked和timeout。如果blocked为True（默认值），并且timeout为正值，该方法会阻塞timeout指定的时间，直到该队列有剩余的空间。如果超时，会抛出Queue. Full异常。如果blocked为False，但该Queue已满，会立即抛出Queue.Full异常。</p><p>get方法可以从队列读取并且删除一个元素。同样，get方法有两个可选参数：blocked和timeout。如果blocked为True（默认值），并且timeout为正值，那么在等待时间内没有取到任何元素，会抛出Queue.Empty异常。如果blocked为False，有两种情况存在，如果Queue有一个值可用，则立即返回该值，否则，如果队列为空，则立即抛出Queue.Empty异常。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer_proc</span><span class="params">(q)</span>:</span>      </span><br><span class="line">    <span class="keyword">try</span>:         </span><br><span class="line">        q.put(<span class="number">111</span>, block = <span class="keyword">False</span>) </span><br><span class="line">    <span class="keyword">except</span>:         </span><br><span class="line">        <span class="keyword">pass</span>   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader_proc</span><span class="params">(q)</span>:</span>      </span><br><span class="line">    <span class="keyword">try</span>:         </span><br><span class="line">        <span class="keyword">print</span> q.get(block = <span class="keyword">False</span>) </span><br><span class="line">    <span class="keyword">except</span>:         </span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    q = multiprocessing.Queue()</span><br><span class="line">    writer = multiprocessing.Process(target=writer_proc, args=(q,))  </span><br><span class="line">    writer.start()   </span><br><span class="line"></span><br><span class="line">    reader = multiprocessing.Process(target=reader_proc, args=(q,))  </span><br><span class="line">    reader.start()  </span><br><span class="line"></span><br><span class="line">    reader.join()  </span><br><span class="line">    writer.join()</span><br></pre></td></tr></table></figure><h2 id="进程池pool"><a href="#进程池pool" class="headerlink" title="进程池pool"></a>进程池pool</h2><p>利用Python并行操作可以节约大量的时间。当被操作对象数目不大时，可以直接利用multiprocessing中的Process动态成生多个进程，10几个还好，但如果是上百个，上千个目标，手动的去限制进程数量却又太过繁琐，这时候我们就可以利用进程池pool来操作了。Pool可以提供指定数量的进程，供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来它。首先来看一个简单的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(ID)</span>:</span></span><br><span class="line">    print(<span class="string">"ID: %d"</span>, % ID)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"end of process %s"</span> % os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pool = multiprocessing.Pool(processes = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        pool.apply_async(func, (i, ))   <span class="comment">#维持执行的进程总数为processes=3，当一个进程执行完毕后会添加新的进程进去</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"starting the pool !!!"</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()   </span><br><span class="line">    <span class="comment">#调用join之前，先调用close函数，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Sub-process(es) done."</span>)</span><br></pre></td></tr></table></figure><p>关键函数解释：</p><ul><li>apply_async(func[, args[, kwds[, callback]]]) 它是非阻塞运行与之相对应的是apply(func[, args[, kwds]])是阻塞的，也就是说运行完一个再运行下一个，</li><li>close()    关闭pool，使其不在接受新的任务。</li><li>terminate()    结束工作进程，不在处理未完成的任务。</li><li>join()    主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用。</li></ul><p>创建一个进程池pool，并设定进程的数量为3，xrange(4)会相继产生四个对象[0, 1, 2, 4]，四个对象被提交到pool中，因pool指定进程数为3，所以0、1、2会直接送到进程中执行，当其中一个执行完事后才空出一个进程处理对象3。因为非阻塞，主函数执行独立于进程的执行，所以运行完for循环后直接输出“starting the pool !!!”，主程序在pool.join（）处等待各个进程的结束。若为阻塞的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(ID)</span>:</span></span><br><span class="line">    print(<span class="string">"ID: %d"</span>, % ID)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end of process %s"</span> % os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pool = multiprocessing.Pool(processes = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        pool.apply(func, (i, ))   <span class="comment">#维持执行的进程总数为processes，当一个进程执行完毕后会添加新的进程进去</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"starting the pool !!!"</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()   <span class="comment">#调用join之前，先调用close函数，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Sub-process(es) done."</span></span><br></pre></td></tr></table></figure><p>若想返回各个进程的结果该如何操作呢？可以利用如下的例子，这告诉我们，利用pool我们可以实现并行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(ID)</span>:</span></span><br><span class="line">    print(<span class="string">"ID: %d"</span> % ID)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end of process %s"</span> % os.getpid())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"done"</span>+ str(ID)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">        result.append(pool.apply_async(func, (i, )))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">":::"</span>, res.get()</span><br><span class="line">    print(<span class="string">"Sub-process(es) done."</span>)</span><br></pre></td></tr></table></figure><p>使用多个函数来进行计算的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker_1</span><span class="params">(interval)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"worker_1"</span></span><br><span class="line">    time.sleep(interval)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"end worker_1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker_2</span><span class="params">(interval)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"worker_2"</span></span><br><span class="line">    time.sleep(interval)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"end worker_2"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker_3</span><span class="params">(interval)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"worker_3"</span></span><br><span class="line">    time.sleep(interval)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"end worker_3"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    function_list=  [worker_1,worker_2,worker_3] </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"parent process %s"</span> %(os.getpid())</span><br><span class="line"></span><br><span class="line">    pool=multiprocessing.Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> function_list:</span><br><span class="line">        pool.apply_async(func,args=(<span class="number">1</span>,))     <span class="comment">#Pool执行函数，apply执行函数,当有一个进程执行完毕后，会添加一个新的进程到pool中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Waiting for all subprocesses done...'</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()    <span class="comment">#调用join之前，一定要先调用close() 函数，否则会出错, close()执行后不会有新的进程加入到pool,join函数等待素有子进程结束</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'All subprocesses done. exiting ...'</span></span><br></pre></td></tr></table></figure><h2 id="利用Queue-多进程并发运行处理数据"><a href="#利用Queue-多进程并发运行处理数据" class="headerlink" title="利用Queue 多进程并发运行处理数据"></a>利用Queue 多进程并发运行处理数据</h2><p>从前面我们知道，Queue是一个非常方便的进行进程间数据传输的工具，而同时我们也可以利用Queue这个特性来进行数据流的多进程并发设计,这里的关键在于如何设置退出机制，先学习一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">work_process</span><span class="params">(multiprocessing.Process)</span>:</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, task_queue, result_queue,flag)</span>:</span></span><br><span class="line">       multiprocessing.Process.__init__(self)</span><br><span class="line">       self.task_queue = task_queue <span class="comment"># 任务队列</span></span><br><span class="line">       self.result_queue = result_queue  <span class="comment"># 结果队列</span></span><br><span class="line">       self.flag=flag <span class="comment"># 退出标记</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">       proc_name = self.name</span><br><span class="line">       <span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment"># 循环进行</span></span><br><span class="line">           next_task = self.task_queue.get()   <span class="comment"># 获取任务队列的数据</span></span><br><span class="line">           print(<span class="string">'flag is %d'</span> %self.flag)</span><br><span class="line">           <span class="keyword">if</span> next_task <span class="keyword">is</span> <span class="keyword">None</span>:               <span class="comment">### 退出机制设计</span></span><br><span class="line">               <span class="comment"># Poison pill means shutdown</span></span><br><span class="line">               <span class="keyword">print</span> (<span class="string">'%s: Exiting'</span> % proc_name)</span><br><span class="line">               self.task_queue.task_done()</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">print</span> (<span class="string">'%s: %s'</span> % (proc_name, next_task))</span><br><span class="line">           answer = next_task() <span class="comment"># __call__()</span></span><br><span class="line">           self.task_queue.task_done()</span><br><span class="line">           self.result_queue.put(answer)  <span class="comment">#存储记录</span></span><br><span class="line">       print(<span class="string">'proces is done'</span>)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">       self.a = a</span><br><span class="line">       self.b = b</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span>  <span class="comment">## we can use Task() to excute this method</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">'%s * %s = %s'</span> % (self.a, self.b, self.a * self.b)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">'%s * %s'</span> % (self.a, self.b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="comment"># Establish communication queues</span></span><br><span class="line">   tasks = multiprocessing.JoinableQueue()</span><br><span class="line">   results = multiprocessing.Queue()</span><br><span class="line">   flag=[<span class="number">0</span>]</span><br><span class="line">   <span class="comment"># Start process</span></span><br><span class="line">   num_process = multiprocessing.cpu_count()</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'Creating %d consumers'</span> % num_process)</span><br><span class="line">   record = [ work_process(tasks, results,flag[<span class="number">0</span>])</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>) ]</span><br><span class="line">   <span class="keyword">for</span> w <span class="keyword">in</span> work_process:</span><br><span class="line">       w.start()</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># Enqueue jobs</span></span><br><span class="line">   num_jobs = <span class="number">10</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(num_jobs):</span><br><span class="line">       tasks.put(Task(i, i+<span class="number">1</span>))</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># Add a exit mechanism for each thread</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">       tasks.put(<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">   flag[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">   <span class="comment"># Wait for all of the tasks to finish</span></span><br><span class="line">   tasks.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># Start printing results</span></span><br><span class="line">   <span class="keyword">while</span> num_jobs:</span><br><span class="line">       result = results.get()</span><br><span class="line">       <span class="keyword">print</span> (<span class="string">'Result:'</span>, result)</span><br><span class="line">       num_jobs -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>从上面可以看到，程序中添加了两个退出机制的选择，但只有一个有效,就是利用queue在最后设置退出机制。那么我们可以从此知道如何在多进程情况下设置退出机制然后进行queue队列的并行计算。值得注意的是，tasks.join() 必须是JoinableQueue() 这个quene下面才能使用，同时，要避免出错必须加上在工作函数中加上self.task_queue.task_done()这个命令才行。否则就会出bug!</p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Agricultural Household Model Introduction</title>
      <link href="/2015/09/25/Agricultural-Household-Model-Intro/"/>
      <url>/2015/09/25/Agricultural-Household-Model-Intro/</url>
      <content type="html"><![CDATA[<h1 id="Agricultural-Household-Model"><a href="#Agricultural-Household-Model" class="headerlink" title="Agricultural Household Model"></a>Agricultural Household Model</h1><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li>development microecoomics </li></ul><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In developing countries, people who are farmer are very special. Because they earn at least part of their livelihood through work in their own enterprises(the land). At the same time, they also can consume a portion of their product(they grow crops, harvest them, sell them or eat them). We know that due to the unique feature of agriculture, household labour is often an important input into the production process of the farmer’s production activity. Consequently, Consequently, individuals make simultaneous decisions about production (the level of output, the demand for factors, and the choice of technology) and consumption (labor supply and commodity demand). This mixture just describes common daily life of most families in developing countries and provides starting point (Agricultural Household Model) for our analysis.</p><a id="more"></a><h2 id="Baseline-Model-Overview"><a href="#Baseline-Model-Overview" class="headerlink" title="Baseline Model Overview"></a>Baseline Model Overview</h2><p>The canonical model of an agricultural household includes a utility function, defined over consumption by each member of the household (usually can be simplified by one or two members), and a budget constraint, which incorporates production on assets owned by the household. </p><p>Consider a typical household with two household members whose aggregate utility is represented by a household utility function:</p><script type="math/tex; mode=display">\max U({c_1},{c_2},{l_1},{l_2})\ \ (1)</script><p>where each member gets utility from consuming a good ($c_1$ and $c_2$ ) and from leisure( $l_1$ and $l_2$ ).  Utility is an increasing function of both $c$ and $l$ </p><p>The most simple agricultural household models assume that each household faces a complete set of competitive markets. (This includes, in more general models than the one presented here, a complete set of markets for time- and state-indexed commodities.) Such assumption can be released in the following extending part</p><p>About the Budget Constrains, we have the following setup: </p><p>Let $p$ be the price of output, and $w$ be the wage of output (for simplicity, that the labour of the two family members is homogeneous.)  The household can produce the good on its farm according to the concave production function $F(L,A)$, where A is the area of the farm cultivated by the<br>household and $L$ is the amount of labour used on the farm. Let $E_i^L$ be personi’s endowment of time, $E^A$ the household’s endowment of land, and $r$ the price of one unit of land. </p><script type="math/tex; mode=display">\displaylines{  p({c_1} + {c_2}) + w{L^h} + r{A^h} \le F(L,A) + w(L_1^m + L_2^m) + r{A^m}\ \ (*) \cr   L = L_1^f + L_2^f + {L^h} \ \ (3)\cr   A = {A^f} + {A_h} \ \ (4)\cr   {E^A} = {A^f} + {A^m},E_i^L = L_i^f + L_i^m + {l_i},i \in \{ 1,2\} \ \  (5)\cr   {c_i},{l_i},L_i^f,L_i^m,{A^f},{A^m} \ge 0,\;i \in \{ 1,2\}  \ \ (6)\cr}</script><p>(*) is the budget constraint which tells us cash expenditures on consumption, hired labour($L^h$), and rented land ($A^h$) cannot exceed cash revenues from farming, market labour (rented labour $L_i^m$, and land rented out ($A^m$). the rest equations are resource constraints: labour<br>use on the farm is household labour used on the farm plus hired labour; land use on the farm is owned land used on the farm plus hired land; the household’s land endowment is used on its own farm or rented out, and each individual’s time endowment equals their labour use on the farm, plus market labour time, plus leisure time.</p><p>The <strong>maximization</strong> is with respect to consumption and leisure, hired labour and land, and household<br>labour and land supplied to the market and used on the household farm. </p><p>when we substitute the (3)-(5) into (*), we have: </p><script type="math/tex; mode=display">\displaylines{  p({c_1} + {c_2}) + w({l_1} + {l_2}) \le \Pi  + w(E_1^m + E_2^m) + r{E^A} \ \ (7)\cr   \Pi  = F(L,A) - wL - rA \ \ (8)\cr   {c_i},{l_i},L,A \ge 0,\;i \in \{ 1,2\}  \ \ (9)\cr}</script><p>(7) is called the ‘full-income’ constraint: the value of consumption cannot exceed the value of the household’s endowment plus farm profits. The household’s problem is now to maximize (1) (with respect to $L,A,c_{i}$  and $l_{i}$) subject to (7)–(9). </p><p>Three Key things to notices: </p><ul><li><p>none of the variables in (7), the equation for farm profits is in (1)</p></li><li><p>all of the variables in (1) are on the left side (and none are on the right side) of (7)</p></li><li><p>all variables on the right side of (7) other than Π are fixed </p></li></ul><p>As long as $U(\cdot)$ is characterized by local non-satiation(increasing), then (7) is binding at the solution and the maximized value of $U(\cdot)$ is increasing in $\Pi$ .</p><p>This implies that $L$ and $A$ can first be chosen to maximize prifit $\Pi$, and thus maximize the right side of (7), and then $c_{1},c_{2},l_{1}$ and $l_{2}$ can be chosen to maximize (1) subject to (7). <strong>This ability to “separate” the maximization problem into two steps is called the separability property of this model of agricultural households</strong>, because the production decisions of the household are separable from the household’s consumption choices. </p><p>The <strong>separation property</strong> is robust to the non-existence of some markets. For example, if there is no <em>land market</em>, then replace A by $E^{A}$ in (8) and set $r=0$. The problem remains recursive, and the household chooses labour inputs to maximize profits given the household’s endowment of land. This choice is independent of the household’s preferences or endowment of labour. An analogous result is true if there is no labour market but land can be traded freely. Thus, the household’s decision-making process can be divided in two stages: first, farm profit is maximized, and then utility is maximized given the full income budget constraint. </p><p>we can simplify the model and describe it by graph. Suppose that U(·) is such that at all prices and wages $c_{1}=c_{2}=c$ and $l_{1}=l_{2}=l$. Again, assuming that there is no market for land, the household chooses $c,l,L$.  $F(L,E^{A})$  is the production function on the household farm, given land endowment $E^{A}$. Given the real wage rate w/p, farm profits are maximized at \Pi(w/p.E^{A})<br>  using $L^{<em>}$  units of labour on the farm ($L^{</em>}=argmax\{F(L,E^{A})-(w/p)L\}$), Then, given the budget constraint $pc=wE^{L}+\Pi(w/p.E^{A})-wl$. household utility is maximized by choosing consumption $c^{<em>}$  and leisure $l^{</em>}. </p><p>To further illustrate the $\Pi(w/p.E^{A})=F(L,E^{A})-(w/p)L$ , $w/p$  can be regarded as the slop of $\Pi(w/p.E^{A})$, maximization requires $\Pi(w/p.E^{A})$be on the edge of $F(L,E^{A})$. The same principal when we turn to the maximization problem of $U(c,l)$.</p><div align="center"> <img src="/pic/f1.png" width="600" height="400" alt="figure 1" align="center"></div><h2 id="3-Incomplete-Market"><a href="#3-Incomplete-Market" class="headerlink" title="3 Incomplete Market"></a>3 Incomplete Market</h2><p>If multiple markets are incomplete, the separation property may no longer hold. The household no longer maximizes profit functions, and production decisions depend upon the preferences and endowments of the household. </p><h3 id="3-1-imperfections-in-both-the-land-and-labour-markets"><a href="#3-1-imperfections-in-both-the-land-and-labour-markets" class="headerlink" title="3.1 imperfections in both the land and labour markets"></a>3.1 imperfections in both the land and labour markets</h3><p>A classic example is the problem of a household that faces imperfections in both the land and labour markets. Suppose again that there is no market for land, but now add the possibility that there is some involuntary unemployment in the rural labour market. The household cultivates its endowment of land, and might face a binding constraint on the amount of labour it can supply off its own farm. The household problem (now assuming just one person in the household) is:</p><script type="math/tex; mode=display">\max_{c,l,L^{H},L^{F}}U(c,l)\ \ (10)</script><p>subject to </p><script type="math/tex; mode=display">\begin{matrix}  pc  & = & F({L^f} + {L^h},{E^A}) - w{L^h} + w{L^m} \ \ (11)\cr   {E^L} & = & l + {L^f} + {L^m}   \  \  \  \  \  (12) \cr   {L^m} & \le & M  \ \ (13) \cr  \end{matrix}</script><p>  $L^{h}$   is labour hired by the household to work on its farm,$L^{f}$is the household’s own labour on its farm, $L^{m}$is the time spent by the household working for a wage. and $M$ is the maximum amount of time the household can spend working for a wage as a result of some (here unmodelled) labour market rationing</p><h4 id="not-binding"><a href="#not-binding" class="headerlink" title="not binding"></a>not binding</h4><p>if $L^{m}\leq M$ is not binding, then (11) becomes $pc+wl=F(L,EA)-wL+wE^{L}$, where $L$ is the amount of labour used on the farm. In this case, the household maximizes profits and the separation property holds.</p><p>If separation holds, and the production function has constant returns to scale (CRTS), then all farms are identical. With CRTS, we can write $F(L,E^{A})=E^{A}f(L/E^{A})$, and the first-order condition for labour use is $w=f\prime(L/E^{A})$. All unconstrained farmers facing the same wage will use the same amount of labour per hectare, and achieve the same yield (output per unit of area) and output per unit of labour.</p><h4 id="binding"><a href="#binding" class="headerlink" title="binding"></a>binding</h4><p>In this case, $L^{m}=M,L^{h}=0$. The household’s problem becomes:</p><script type="math/tex; mode=display">\max_{c,l}U(c,l)\ \ (14)</script><p>subject to </p><script type="math/tex; mode=display">pc=F(E^{L}-M,E^{A})+wM \ \ (15)</script><p>first order conditions $U_{l}/U_{c}=F_{L}$. The household’s problem is illustrated in figure 2 </p> <div align="center"> <img src="/pic/f2.png" width="600" height="400" alt="figure 1" align="center"></div><p>inner axes demonstrate production on the household’s farm, with output on the vertical axis and labour input on the horizontal axis. $M$ hours are spent working in the market, earning $wM$. The household’s remaining labour time $(L^{f}$) is spent on the farm, producing q^{<em>}. So the household works $M+L^{f}$ hours and consumes $pc^{</em>}=wM+F(L^{f},E^{A})$ units of the good. The household achieves a maximized utility of $U(c^{<em>},l^{</em>})$ at point $A$. The household’s production choice clearly depends on its preferences and its endowment, and the separation property does not hold.</p><p>This sort of market structure could give rise to an oft-observed pattern in the rural areas of less developed countries. Many observers find that small farms are often cultivated more intensively than large farms. More labour per unit area is used on small farms, and yields are larger on these smaller farms. Consider a household with more land than the household consuming at point $A$<br> , but facing the same wage and labour market constraint. If this household were to cultivate with the same intensity as household $A$, it would have to choose to produce and consume at point $C$<br>  in the figure. If leisure is a normal good,$C$ will not be chosen. Instead, the household will choose to produce and consume at a point such as $B$ ,cultivating its larger farm less intensively than the smaller farm of household $A$  </p><p>by implicitly differentiating the first-order condition:</p><script type="math/tex; mode=display">\frac{dL}{dE^{A}}=...<\frac{L}{E^{A}}\ if\ U_{cl}\geq 0</script><p>Labour and land market imperfections are perhaps the most straightforward rationale for an inverse relationship between farm size and cultivation intensity.</p><h3 id="3-2-Risk-Averse"><a href="#3-2-Risk-Averse" class="headerlink" title="3.2 Risk-Averse"></a>3.2 Risk-Averse</h3><p>suppose that labour markets work well and the production function is CRTS but that production is risky, households are risk-averse, and insurance markets do not exist. To simplify this problem, suppose that households supply labour inelastically and that there is only a single good. The household’s problem is to </p><script type="math/tex; mode=display">\max_{L\geq0}EU(c)</script><p>subject to </p><script type="math/tex; mode=display">c=\theta E^{A}f(\frac{L}{E^{A}})-wL+wE^{L}</script><p>where $\theta$ is a random variable with positive support and mean one. The household chooses labour so that </p><script type="math/tex; mode=display">EU^{'}(c)[\theta f^{'}(\frac{L}{E^{A}})-w]=0</script><p>The separation property, therefore, does not hold. The above equation can be expressed as :</p><script type="math/tex; mode=display">\begin{matrix}   {f'EU'\left( {\theta  - 1} \right)} &  =  & {EU'\left( {w - f'} \right)}  \cr    {E\theta } &  =  & 1  \cr    {f'cov\left( {U',\theta } \right)} &  =  & {\left( {w - f'} \right)EU'}  \cr\end{matrix}</script><p>Consumption increases with $\theta$, so $cov(U\prime,\theta)&lt;0$; $f^{\prime}$ and $EU^{‘}$ are both positive, so $w &lt; f^{‘}$. This land is farmed less intensively than land that is cultivated under (expected) profit maximization. We have shown that a combination of labour, land, and/or insurance market failures could be associated with this observation; it is possible to construct simple models of financial market imperfections that lead to the same observation.</p><h2 id="4-unitary-household-model"><a href="#4-unitary-household-model" class="headerlink" title="4 unitary household model"></a>4 unitary household model</h2><p>In setting up the problem of the household, we rather simply wrote down a‘household utility function’ , which depended upon the leisure and consumption vector of each of the two individuals in the household. This approach is called unitary household model. The standard demand theory applies in this context, and empirical implementation is straightforward. Indeed the econometrician is often only able to observe aggregate household behavior. But such setup , the unitary model of the household, has increasingly come under attack on both the theoretical and empirical fronts. In the unitary framework, the process by which individual preferences get aggregated into a household utility function is essentially a“black box”; issues such as intra household inequality and household formation/dissolution cannot be handled very well. On the empirical side, important predictions of the unitary model have consistently failed to find support in the data. </p><p>The simplest case is that of a household that consumes only private goods and whose members have identical homothetic preferences. If this household always achieved a Pareto-efficient allocation of resources within the household, then by the second welfare theorem this allocation could be achieved through a competitive equilibrium within the household. Since the income-consumption paths of the members of the household are parallel lines, aggregate demand is independent of the distribution of income (and utility) within the household. </p><p>Let us take an example of unitary model: Consider a two-member household consisting of a husband and wife, indexed respectively by h and w . The husband and wife each has an individual utility function that depends on own consumption of private goods, but by consensus 2 ,they agree to maximize a social welfare function of their individual utilities, subject to a single budget constraint that pools together the two individual incomes. Let $c^h$ and $c^w$ denote the consumption, and $y^h$ and $y^w$ denote the income, of the husband and wife. The household’s problem is equivalent to maximizing a single utility function, $U$ ,subject to a pooled budget constraint</p><script type="math/tex; mode=display">\max_{c^{h},c^{w}}U(c^{h},c^{w})</script><script type="math/tex; mode=display">p^{h}c^{h}+p^{w}c^{w}=y^{h}+y^{w}=y</script><p>where $p^{h}$  and $p^{w}$ are the prices of the husband’s and wife’s consumption and $y$ is defined as the households total income, i.e. the sum of the husband’s and wife’s income. Solving the household maximization problem yields demand functions, f h and f w that depend only on prices and total income. Formally, we have: <script type="math/tex">c^{i}=f^{i}(p^{h},p^{w},y)\ i=h,w</script></p><p>A central prediction of the unitary model of the household is income pooling, which is the idea that the household’s demands depend only on its total income, $y$ ,and not on the sources of income. Empirically, </p><ul><li><p>if total income is held constant, a change in the sources of income would have no effect on demands.</p></li><li><p>a marginal increase in one source of income has the exact same effect on demands as a marginal increase in any other source of income</p></li></ul><h2 id="5-efficient-household-model"><a href="#5-efficient-household-model" class="headerlink" title="5 efficient household model"></a>5 efficient household model</h2><p>Chiappori (1988,1992) and Browning and Chiappori (1994)argue that economists generally have little notion of the actual intra-household bargaining process. They argue, therefore, that any model of this process should make only very minimal assumptions. Of all the assumptions that underlie the bargaining models of earlier authors, <strong>they retain only that of the efficiency of household resource allocation.</strong> This‘efficient household’ model makes minimal assumptions, but retains enough content to guide analysis in many cases. For example, if markets are complete, then the separation property holds for efficient households, just as it does for unitary households</p><script type="math/tex; mode=display">\max \sum_i \lambda_i U_i (\{ c_i\},\{ l_i\})\ \ 1'</script><p>Each individuali might care about the vector of consumption and leisure consumed by each other household member. A Pareto-efficient allocation of resources within the household is defined as the solution to the problem defined by (1’). As was the case for the unitary household model with complete markets, decisions regarding production do not depend on the preferences or endowments of the individuals in the household, nor on the‘Pareto weights’ $\lambda_i​$ assigned to each individual.</p><p>the unitary model has been rejected in favour of the more general efficient household model. The available empirical evidence casts serious doubt on the validity of the unitary model. While the available work is<br>mostly supportive of the more general model of efficient households,there is some evidence, particularly in Africa, that calls even this weaker model into question. If the efficient household model cannot adequately account for the intra-household allocation of resources, <em>it appears that it will be necessary to move towards more detailed, culturally and institutionally informed noncooperative models of the interaction between household members.</em>(the future development)</p><p>eg: Udry (1996), however,finds that women’s plots are cultivated much less intensively than their husbands’ plots in parts of Burkina Faso, implying that total agricultural output within the household could be increased by reallocating factors of production across the plots cultivated by household members and contradicting the Pareto efficiency of resource allocation within the household.</p>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> development economics </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Write Markdown With Sublime Text</title>
      <link href="/2015/07/20/write-markdown-with-sublime-text/"/>
      <url>/2015/07/20/write-markdown-with-sublime-text/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载Sublime Text 2<br>安装</p><h2 id="安装Package-Control"><a href="#安装Package-Control" class="headerlink" title="安装Package Control"></a>安装Package Control</h2><p>按Ctrl + ` 打开console<br>粘贴代码到console并回车<br>重启Sublime Text 2<br>import urllib2,os;pf=’Package Control.sublime-package’;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),’wb’).write(urllib2.urlopen(‘<a href="http://sublime.wbond.net/&#39;+pf.replace(" target="_blank" rel="noopener">http://sublime.wbond.net/&#39;+pf.replace(</a>‘ ‘,’%20’)).read())</p><a id="more"></a><h2 id="安装Markdown-Preview"><a href="#安装Markdown-Preview" class="headerlink" title="安装Markdown Preview"></a>安装Markdown Preview</h2><p>按Ctrl + Shift + P<br>输入pci 后回车(Package Control: Install Package)<br>稍等… ^_^<br>输入Markdown Preview回车</p><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>按Ctrl + N 新建一个文档<br>按Ctrl + Shift + P<br>使用Markdown语法编辑文档<br>语法高亮，输入ssm 后回车(Set Syntax: Markdown)<br>五、在浏览器预览Markdown文档</p><p>按Ctrl + Shift + P<br>输入mp 后回车(Markdown Preview: current file in browser)<br>此时就可以在浏览器里看到刚才编辑的文档了</p>]]></content>
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Treatment Effects Introduction</title>
      <link href="/2015/06/27/Treatment%20Effects%20Introduction/"/>
      <url>/2015/06/27/Treatment%20Effects%20Introduction/</url>
      <content type="html"><![CDATA[<h1 id="Treatment-Effect"><a href="#Treatment-Effect" class="headerlink" title="Treatment Effect"></a>Treatment Effect</h1><p><strong><a href="http://economics.mit.edu/files/32" target="_blank" rel="noopener">definition</a>:</strong> The term ‘treatment effect’ refers to the causal effect of a binary (0–1) variable on an outcome variable of scientific or policy interest. </p><p>The term ‘treatment effect’ originates in a medical literature concerned with the causal effects of binary, yes-or-no ‘treatments’, such as an experimental drug or a new surgical procedure.<br> Economics examples include the effects of government programmes and policies, such as those that subsidize training for disadvantaged workers, and the effects of individual choices like college attendance.</p><pre><code>Given a data-set describing the labour market circumstances of trainees and a non-trainee comparison group, we can compare the earnings of those who did participate in the programme and those who did not. Any empirical study of treatment effects would typically start with such simple comparisons. </code></pre><p>In general, omitted variables bias (also known as selection bias) is the most serious econometric concern that arises in the estimation of treatment effects. The link between omitted variables bias, causality, and treatment effects can be seen most clearly using the potential-outcomes<br>In general, omitted variables bias (also known as selection bias) is the most serious econometric concern that arises in the estimation of treatment effects. The link between omitted variables bias, causality, and treatment effects can be seen most clearly using the potential-outcomes<br>framework.</p><a id="more"></a><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>First assume a binary treatment. For each population unit, two possible outcomes: $y(0)$ (the outcome without treatment) and $y(1)$ (the outcome with treatment). The binary “treatment” indicator is $D$, where $D=1$ denotes “treatment”, The nature of $y(0)$ and $y(1)$ – discrete,<br>continuous, some mix -is ok.  </p><p>The gain from treatment is: </p><script type="math/tex; mode=display">y(1)-y(0)</script><p>For a particular unit $i$, the gain from treatment is<br>$y_{i}(1)-y_{i}(0)$ </p><ul><li>Problem: For each unit i, only one of $y(0)$ and $y(1)$ is observed.</li><li>In effect, we have a missing data problem (even though we will<br>eventually assume a random sample of units)</li></ul><p><strong>Two parameters are of primary interest: </strong> <strong>ATE</strong>(average treatment<br>effect) and <strong>ATT</strong>(average treatment effect on the treated )</p><ul><li><p>ATE</p><script type="math/tex; mode=display">\tau_{ATE}=E[y(1)-y(0)]</script><p>  The expected gain for a randomly selected unit from the population. This is sometimes called the <em>average causal effect</em>.</p></li><li><p>ATT</p><script type="math/tex; mode=display">\tau_{ATT}=E[y(1)-y(0)|D=1]</script></li><li><p>With heterogeneous treatment effects, (2) and (3) can be very different. ATE averages across gain from units that might never be subject to treatment. </p></li><li>how we estimate $\tau_{ATT}$ and  $\tau_{ATE}$ depends on what we<br>assume about treatment assignment. </li><li>the problem in estimating is that sample is limited, which means we only know $y(1|D=1)$ and $y(0|D=0)$we can not know the $y(1|D=0)$ </li></ul><p><strong>Sampling Assumptions</strong><br>Assume independent, identically distributed observations from the underlying population. The data we would like to have is  $(y_{i}(0),y_{i}(1)) : i = 1, . . . ,N$</p><p>But we only observe $D_{i}$ and </p><script type="math/tex; mode=display">y_{i}=(1-D_{i})y_{i}(0)+D_{i}y_{i}(1)=y_{i}(0)+D_{i}{y_{i}(1)-y_{i}(0)}</script><p>in other word( each individual can only be observed in one of the possible treatments)</p><p>Random sampling rules out treatment of one unit having an effect on<br>other units<br><strong>Estimation under Random Assignment</strong></p><ul><li>Strongest form of random assignment, $[y(0),y(1)]$ is  independent of $D$ <script type="math/tex; mode=display">E(y|D=1)-E(y|D=0)=E(Y(1))-E(y(0))=\tau_{ATE}=\tau_{ATT}</script></li></ul><p>under mean independence and the means on the left hand side can be<br>estimated by using sample averages on the two subsamples</p><p>To start with, we consider a linear structural outcome equation, and  homogeneous effects: </p><script type="math/tex; mode=display">y=\beta d+\epsilon</script><h2 id="DID-different-in-different-method"><a href="#DID-different-in-different-method" class="headerlink" title="DID (different in different method)"></a>DID (different in different method)</h2><p><strong>Definition</strong></p><ul><li>Two groups:<ul><li>D = 1 Treated units</li><li>D = 0 Control units</li></ul></li><li>Two periods:<ul><li>T = 0 Pre-Treatment period</li><li>T = 1 Post-Treatment period</li></ul></li><li>Potential outcome $Y_{d}(t )$<ul><li>$Y_{1i}(t )$ outcome unit i attains in period t when treatment between t and t − 1</li><li>$Y_{0i}(t )$ outcome unit i attains in period t with control between t and t − 1</li></ul></li></ul><p>ESITMATE <strong>ATET</strong><br>Focus on estimating the average effect of the treatment on the<br>treated</p><script type="math/tex; mode=display">\alpha_{ATT}=E[Y_{1}(1)-Y_{0}(1)|D=1]</script><hr><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Post-period(t=1)</th><th style="text-align:right">Pre-period(t=0)</th></tr></thead><tbody><tr><td>Treated D=1</td><td style="text-align:center">$E[Y_{1}(1);D=1]$</td><td style="text-align:right">$E[Y_{0}(0);D=1]$</td></tr><tr><td>Control D=0</td><td style="text-align:center">$E[Y_{0}(1);D=0]$</td><td style="text-align:right">$E[Y_{0}(0);D=0]$</td></tr></tbody></table></div><p><em>Problem</em><br>Missing potential outcome: $E[Y_{0}(1)|D = 1]$, i.e., what is the average post-period outcome for the treated in the absence of the treatment?</p><p><em>solving strategy</em></p><ul><li>Before vs. After<ul><li>Use: $E [Y (1)|D = 1] − E [Y (0)|D = 1]$</li><li>Assumes: $E [Y_{0}(1)|D = 1]= E [Y_{0}(0)|D = 1]$</li></ul></li><li>Treated vs. Control in Post-Period<ul><li>Use: $E [Y (1)|D = 1] − E [Y (1)|D = 0]$</li><li>Assumes: $E [Y_{0}(1)|D = 1]= E [Y_{0}(1)|D = 0]$</li></ul></li><li>Difference-in-Differences </li><li>Use: <ul><li>$\{E [Y (1)|D = 1] − E [Y (1)|D = 0] \}- \{ E [Y (0)|D = 1] − E [Y (0)|D = 0]\}$</li><li>Assumes: $E[Y_{0}(1) − Y_{0}(0)|D = 1] = E[Y_{0}(1) − Y_{0}(0)|D = 0]$</li></ul></li></ul><p>The rest of the content is in the slides<br>[resource link]</p>]]></content>
      
      <categories>
          
          <category> Economics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> econometrics </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Magoosh GRE Analytical Writing Notes</title>
      <link href="/2014/10/25/writing-notes/"/>
      <url>/2014/10/25/writing-notes/</url>
      <content type="html"><![CDATA[<h2 id="writing-tips"><a href="#writing-tips" class="headerlink" title="writing tips"></a>writing tips</h2><h3 id="Clarity-and-Concison"><a href="#Clarity-and-Concison" class="headerlink" title="Clarity and Concison!!!"></a>Clarity and Concison!!!</h3><p><strong>bad:</strong><br><em>Independent thought is highly valued in society, but it is better that knowledge, if it is arrived at, is achieved through the collection of a group of people</em><br><strong>good</strong><br> <em>Independent thought, while highly valuable, ultimately needs to be validated by society.</em> </p><a id="more"></a><h3 id="Logical-flow"><a href="#Logical-flow" class="headerlink" title="Logical flow"></a>Logical flow</h3><p>由反转正可能更为合适。<br><strong>bad</strong><br>many people have contributed helpful inventions, so technology is making life easier for us.<br>contributed invention -&gt;!!! NO technology can make life easier<br>invention NO technology<br>contribute NO life easier<br><strong>good</strong><br><em>The constant influx of new technologies can lead us to feel overwhelmed. Nevertheless, many of these technologies can make our lives easier.</em></p><h3 id="Style-and-Sentence-Variety"><a href="#Style-and-Sentence-Variety" class="headerlink" title="Style and Sentence Variety"></a>Style and Sentence Variety</h3><p> 同位语，变换多样单词<br> be specific</p><h3 id="Grammer-and-Spelling"><a href="#Grammer-and-Spelling" class="headerlink" title="Grammer and Spelling"></a>Grammer and Spelling</h3><p>synonym—同位语<br>the dog are barking 是严重的错误</p><h2 id="time-management"><a href="#time-management" class="headerlink" title="time management"></a>time management</h2><ol><li>brainstorm and outline (3min)</li><li>write intro and  thesis statement(3min)</li><li>write the body and example (20 min)</li><li>write conclusion (2 min)</li><li>Finish intro (2min)</li></ol><h2 id="tro-to-ISSUE-TASK"><a href="#tro-to-ISSUE-TASK" class="headerlink" title="tro to ISSUE TASK"></a>tro to ISSUE TASK</h2><ul><li><p>Direction -&gt; agree or disgree</p><ul><li>agree | disagree</li><li>support your position</li><li>extra info</li></ul></li><li><p>Choose a side</p><ul><li>choose a side but need to look at both side. 两边都要照顾到，有一个主要的方向</li></ul></li><li>concession point <ul><li>other side is also valid in some cases</li></ul></li></ul><p>对每一个大类中的topic 都要讨论一下<br>pros and cons</p><ul><li>write thesis </li><li>write body</li><li>write conclusion </li><li>finish intro</li></ul><h2 id="ISSUE-writing"><a href="#ISSUE-writing" class="headerlink" title="ISSUE writing"></a>ISSUE writing</h2><h3 id="Thesis"><a href="#Thesis" class="headerlink" title="Thesis"></a>Thesis</h3><ol><li>kepp thesis short and sweet </li><li>choose a side</li><li>most important sentence</li></ol><p>一定要短小精炼，把核心写出来，不要长！就一句话！！！</p><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>举例子，假设时。越具体越好！！！！！！<br>结尾时，要回归到ISSUE上，点题。</p><h3 id="concession-point"><a href="#concession-point" class="headerlink" title="concession point"></a>concession point</h3><ol><li>consider other side of argument</li><li>qualify one of your previous points</li></ol><h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3><ol><li>restate thesis and body</li><li>do not introduce new information<br>最后可以让步强化</li></ol><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><ol><li>introduce topic </li><li>用自己语言分析topic然后往自己想占的立场说话</li><li>声明自己的立场</li></ol><h1 id="on-how-to-writing-well"><a href="#on-how-to-writing-well" class="headerlink" title="on how to writing well"></a>on how to writing well</h1><p>your lead must capture the reader immediately and force him to keep reading. It must cajole him with freshness, or novelty, or paradox, or humor, or surprise, or with an unusual idea, or an interesting fact, or a question. Anything will do, as long as it nudges his curiosity and tugs at his sleeve. </p><p>结尾要有惊喜，这就像一根诱人口水的大骨头，首先它要有嚼头，然后它得告诉读者，这是最后一根了。 </p><p>VERBS.</p><p>不到万不得已，不要用被动动词</p><p>Use active verbs unless there is no comfortable way to get around using a passive verb.</p><p>Prune out the small words that qualify how you feel and how you think and what you saw: “a bit,” “a little,” “sort of,” “kind of,” “rather,” “quite,” “very,” “too,” “pretty much,” “in a sense” and dozens more. They dilute your style and your persuasiveness.</p><p>The Dash 破折号的用法</p><p>The dash is used in two ways. One is to amplify or justify in the second part of the sentence a thought you stated in the first part. “We decided to keep going—it was only 100 miles more and we could get there in time for dinner.”By its very shape the dash pushes the sentence ahead and explains why they decided to keep going. The other use involves two dashes, which set apart a parenthetical thought within a longer sentence. “She told me to get in the car—she had been after me all summer to have a haircut—and we drove silently into town.” An explanatory detail that might otherwise have required a separate sentence is dispatched along the way.</p><p><strong>But 开头</strong><br><strong>能用that 不要用which</strong><br>which 更为精确<br>If your sentence needs a comma to achieve its precise meaning, it probably needs “which.” “Which” serves a particular identifying function, different from “that.” (A) “Take the shoes that are in the closet.” This means: take the shoes that are in the closet, not the ones under the bed. (B) “Take the shoes, which are in the closet.” Only one pair of shoes is under discussion; the “which” usage tells you where they are. Note that the comma is necessary in B, but not in A.</p><ol><li><p>Do – prune out every word that does not perform a necessary function. Strip each sentence to its cleanest components. A clear sentence is no accident.</p></li><li><p>Do – use the thesaurus liberally. Learn the small gradations between words that seem to be synonyms.</p></li><li><p>Do – try to improve the rhythm by reversing the order of a sentence, substituting a word that has freshness or oddity, and by varying the lengths of sentences.</p></li><li><p>Do – make your first sentence the best one – your lead must capture the reader.</p></li><li><p>Do – make each sentence lead into the next. Readers think linearly.</p></li><li><p>Do – Take special care with the last sentence in your paragraph – its the springboard to the next paragraph.</p></li><li><p>Do – make your paragraphs short. Readers think in segments.</p></li><li><p>Do – pay special attention to the last sentence. The perfect ending should take your reader slightly by surprise and yet seem exactly right.</p></li><li><p>Do – Read it aloud to see how it sounds and re-edit – then do it again. Clear writing is the result of lots of tinkering.</p></li></ol><p>On the other hand:</p><ol><li><p>Don’t – use passive verbs unless there is no comfortable way to use an active verb.</p></li><li><p>Don’t – use adverbs that convey the same meaning as your strong active verb – prune it out.</p></li><li><p>Don’t – use adjectives when the concept is already in your carefully chosen noun – prune it out.</p></li><li><p>Don’t – use small words that qualify how you feel: “a bit,” “a little,” “sort of,” and dozens more. Good writing is lean and confident.</p></li><li><p>Don’t – use concept nouns:<br>Instead of – “The common reaction is incredulous laughter.”<br>Write – “Most people just laugh with disbelief.”</p></li><li><p>Don’t – use the exclamation point unless you must, do use the period more frequently, don’t forget the versatile dash, and cut down on the use of semi-colons and colons. If you don’t know how to punctuate, get a grammar book.</p></li></ol><h2 id="Intro-to-Argument"><a href="#Intro-to-Argument" class="headerlink" title="Intro to Argument"></a>Intro to Argument</h2><ul><li>challenge argument 找文章的逻辑漏洞</li><li>Discuss ways to improve the  argument 寻找能够提高文章说服力的途径</li></ul><h3 id="Directions"><a href="#Directions" class="headerlink" title="Directions"></a>Directions</h3><ul><li>Indentify stated/unstated assumption </li><li>Strengthen and weaken argument </li></ul><h3 id="Logical-Fallacies"><a href="#Logical-Fallacies" class="headerlink" title="Logical Fallacies"></a>Logical Fallacies</h3><ol><li>things changed 【3年前成功，今年也成功】-错</li><li>assumed cause and effect 【一个在另一个前发生，所以前一个导致后一个】-错</li><li>numbers and percentage assumptions 【数据和比例问题】</li><li>vague language 【in better shape than others 】</li><li>not all X are alike 【以局部推断总体】</li><li>don’t trust a survey </li><li>apple aren’t oranges 【different cities 】-错误类比</li></ol><h2 id="argument-task"><a href="#argument-task" class="headerlink" title="argument task"></a>argument task</h2><h3 id="intro-1"><a href="#intro-1" class="headerlink" title="intro"></a>intro</h3><ul><li>keep intro short and sweet </li><li>use standard/boilerplate language</li></ul><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><ul><li>focus on three logical fallacies</li><li>use a paragraph for each fallacy</li><li>strengthen argument</li></ul><h3 id="conclusion-1"><a href="#conclusion-1" class="headerlink" title="conclusion"></a>conclusion</h3><ul><li>keep short and sweet</li></ul><blockquote><p>Written with <a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a>.</p></blockquote>]]></content>
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GRE </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
